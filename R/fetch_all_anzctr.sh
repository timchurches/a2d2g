#!/bin/sh

echo 'Fetching anzctr_xml.zip...'

curl 'http://www.anzctr.org.au/TrialSearch.aspx?searchTxt=&conditionCategory=&conditionCode=&interventionCodeOperator=OR&interventionCode=&ageGroup=All&healthyVolunteers=All&gender=All&allocationToIntervention=All&dateOfRegistrationFrom=&dateOfRegistrationTo=&trialStartDateFrom=&trialStartDateTo=&recruitmentCountryOperator=OR&countryOfRecruitment=Australia%7cNew+Zealand&primarySponsorType=&fundingSource=&healthCondition=&interventionDescription=&phase=&recruitmentStatus=&registry=ALL&ethicsReview=&studyType=&isBasic=False&postcode=&distance=' \
-o /Users/tim.churches/g2d2t/data/anzctr_xml.zip \
-XPOST \
-H 'Referer: http://www.anzctr.org.au/TrialSearch.aspx?searchTxt=&conditionCategory=&conditionCode=&interventionCodeOperator=OR&interventionCode=&ageGroup=All&healthyVolunteers=All&gender=All&allocationToIntervention=All&dateOfRegistrationFrom=&dateOfRegistrationTo=&trialStartDateFrom=&trialStartDateTo=&recruitmentCountryOperator=OR&countryOfRecruitment=Australia%7CNew%20Zealand&primarySponsorType=&fundingSource=&healthCondition=&interventionDescription=&phase=&recruitmentStatus=&registry=ALL&ethicsReview=&studyType=&isBasic=False&postcode=&distance=' \
-H 'Content-Type: application/x-www-form-urlencoded' \
-H 'Origin: http://www.anzctr.org.au' \
-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \
-H 'DNT: 1' \
-H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/604.3.5 (KHTML, like Gecko) Version/11.0.1 Safari/604.3.5' \
-H 'Upgrade-Insecure-Requests: 1' \
--data 'ctl00_body_ToolkitScriptManager1_HiddenField=%3B%3BAjaxControlToolkit%2C+Version%3D3.5.60623.0%2C+Culture%3Dneutral%2C+PublicKeyToken%3D28f01b0e84b6d53e%3Aen-US%3A834c499a-b613-438c-a778-d32ab4976134%3A475a4ef5%3A5546a2b%3Ad2e10b12%3Aeffe2a26%3Af9e9a939&__EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE=%%2BL1RyaWFsL1JlZ2lzdHJhdGlvbi9UcmlhbFJldmlldy5hc3B4P2lkPTM3MzcyNSZpc1Jldmlldz10cnVlZGQCAw8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3MzcyNS5wZGY%2FdD0xMjZkZAIHDw8WAh8CBQYzNzM3MjVkZAIJDw8WAh8CBQ4xMjYxNzAwMTU0NTM1OGRkAgsPDxYCHwJlZGQCDQ8PFgIfAgUFRmFsc2VkZAIODxUtEHJlc3VsdHMtaGVhZGVyLTLLAUV2YWx1YXRpb24gb2YgYW4gSW1wbGVtZW50YXRpb24gUHJvamVjdC0gSW1wcm92aW5nIGNvZ25pdGl2ZSBhbmQgZnVuY3Rpb25hbCBjYXBhY2l0eSBvZiBvbGRlciBwZW9wbGUgd2l0aCBkZW1lbnRpYSBpbiByZXNpZGVudGlhbCBhZ2VkIGNhcmUgdGhyb3VnaCBhbiBleGVyY2lzZSBwcmVzY3JpcHRpb24gYXBwcm9hY2ggKEV4ZXJjaXNlIEV2YWx1YXRpb24pFkFjdGl2ZSwgbm90IHJlY3J1aXRpbmcHaW5mby1saQhBcHByb3ZlZAdpbmZvLWxpGlJldHJvc3BlY3RpdmVseSByZWdpc3RlcmVkMUhhcyB0aGUgdHJpYWwgYmVlbiB1cGRhdGVkIGluIHRoZSBsYXN0IDEyIG1vbnRocz8KVXAgdG8gZGF0ZQk3LzExLzIwMTcScmVzdWx0cy1oZWFkZXItMTAwCEFwcHJvdmVkClVwIHRvIGRhdGUTQUNUUk4xMjYxNzAwMTU0NTM1OBAwNyBOb3ZlbWJlciAyMDE3BHNob3cvY29nbml0aXZlIGZ1bmN0aW9uLCBwaHlzaWNhbCBmdW5jdGlvbiwgRGVtZW50aWEEc2hvdwlBdXN0cmFsaWEEc2hvdw9Tb3V0aCBBdXN0cmFsaWEEc2hvdwRzaG93FkFjdGl2ZSwgbm90IHJlY3J1aXRpbmcDbi9hBHNob3cIQXBwcm92ZWSLDUV4ZXJjaXNlIFBoeXNpb2xvZ3kgKEVQKSBiYXNlZCBwaHlzaWNhbCBhY3Rpdml0eSBpbnRlcnZlbnRpb25zIGZvciBvbGRlciBhZHVsdHMgaGF2ZSBiZWVuIHNob3duIHRvIGJlIGVmZmVjdGl2ZTsgaG93ZXZlciwgbm8gc3R1ZGllcyBoYXZlIGludmVzdGlnYXRlZCB3aGV0aGVyIEVQIGluIHJlc2lkZW50aWFsIGFnZWQgY2FyZSBmYWNpbGl0aWVzIGxlYWRzIHRvIG1haW50ZW5hbmNlIG9yIGltcHJvdmVtZW50IGluIHBoeXNpY2FsIG9yIGNvZ25pdGl2ZSBmdW5jdGlvbi4gVGhlIG9yZ2FuaXNhdGlvbiBjb25jZXJuZWQgaXMgY3VycmVudGx5IHJ1bm5pbmcgYSBmdW5kZWQgZXhlcmNpc2UgcHJvZ3JhbSB3aXRoIHRoZSBpbnRlbnRpb24gb2YgaW1wcm92aW5nIHRoZSBjb2duaXRpdmUgYW5kIHBoeXNpY2FsIGZ1bmN0aW9uYWxpdHkgb2YgUmVzaWRlbnRzLiAgRXhlcmNpc2UgUGh5c2lvbG9naXN0cyAoRVBzKSBzcGVjaWFsaXNlIGluIGNsaW5pY2FsIGV4ZXJjaXNlIGludGVydmVudGlvbnMgZm9yIHBlcnNvbnMgYXQgaGlnaCByaXNrIG9mIGRldmVsb3BpbmcsIG9yIHdpdGggZXhpc3RpbmcsIGNocm9uaWMgYW5kIGNvbXBsZXggbWVkaWNhbCBjb25kaXRpb25zIGFuZCBpbmp1cmllcy4gQXMgYSByZWxhdGl2ZWx5IG5ldyBwcm9mZXNzaW9uLCBFUHMgYXJlIGRldmVsb3Bpbmcgd2F5cyB0byB3b3JrIGVmZmVjdGl2ZWx5IHdpdGggdGhlIHNwZWNpZmljIG5lZWRzIG9mIG9sZGVyIHBlb3BsZSwgaW5jbHVkaW5nIHRob3NlIGxpdmluZyBpbiByZXNpZGVudGlhbCBhZ2VkIGNhcmUuIFRoZSBvcmdhbmlzYXRpb24gaGFzIGJlZW4gcnVubmluZyBhbiBFUC1sZWQgc3R1ZGVudCBjbGluaWMgZm9yIHJlc2lkZW50cyBpbiBvbmUgZmFjaWxpdHksIGluY2x1ZGluZyBkZWxpdmVyaW5nIHNlcnZpY2VzIHRvIHBlb3BsZSB3aXRoIGhpZ2gtbGV2ZWwgbmVlZHMgaW4gYSBzZWN1cmUgZGVtZW50aWEgdW5pdC4gVGhpcyB3b3JrIGhhcyBwcm92aWRlZCBpbml0aWFsIGV2aWRlbmNlIGFyb3VuZCB0aGUgcG9zaXRpdmUgaW1wYWN0IGV4ZXJjaXNlIGhhcyBvbiBhIHJhbmdlIG9mIGNocm9uaWMgY29uZGl0aW9ucyAoaW5jbHVkaW5nIGRlbWVudGlhKS4gT2JzZXJ2ZWQgaW1wcm92ZW1lbnRzIGluY2x1ZGUgaW5jcmVhc2VkIGZ1bmN0aW9uYWwgY2FwYWNpdHkgYW5kIGltcHJvdmVkIGNvZ25pdGl2ZSBmdW5jdGlvbi4gVGhlIHBvc2l0aXZlIGltcGFjdCBvbiByZXNpZGVudHMnIHdlbGxiZWluZywgYXMgYSByZXN1bHQgb2YgaW1wcm92ZWQgZnVuY3Rpb24sIGlzIHBlcmNlaXZlZCB0byBoYXZlIGhhZCBhIHJpcHBsZSBlZmZlY3Qgb24gZmFtaWx5IG1lbWJlcnM6IGUuZy4gYmV0dGVyIHF1YWxpdHkgb2YgbGlmZSBmb3IgdGhlaXIgbG92ZWQgb25lcy4gU3RhZmYgYWxzbyByZXNwb25kZWQgcG9zaXRpdmVseSB0byB0aGUgY2hhbmdlcyB0aGV5IHNhdyBpbiByZXNpZGVudHMuIFRoaXMgcHJvamVjdCBhaW1zIHRvIGNvbmR1Y3QgYW4gZXZpZGVuY2UtYmFzZWQgZXZhbHVhdGlvbiBvZiB0aGUgcHJvamVjdCAnRVAgaW4gQWdlZCBDYXJlJywgZXhwbG9yaW5nIHRoZSBlZmZlY3RzIG9mIGV4ZXJjaXNlIHByaW1hcmlseSBmb3IgcmVzaWRlbnRzIHdpdGggY29nbml0aXZlIGRlY2xpbmUuIFRoZSBldmFsdWF0aW9uIHdpbGwgdGFrZSBhIHBlcnNvbi1jZW50cmVkIGFwcHJvYWNoLiBRQW55IHJlc2lkZW50IG9mIHRoZSBwYXJ0aWNpcGF0aW5nIGFnZWQgY2FyZSBmYWNpbGl0eSBpcyBlbGlnaWJsZSB0byBwYXJ0aWNpcGF0ZS4uCDYwIFllYXJzCSBObyBsaW1pdBZCb3RoIG1hbGVzIGFuZCBmZW1hbGVzf1RoZXJlIGFyZSBubyBrZXkgZXhjbHVzaW9uIGNyaXRlcmlhLCBpbmNsdWRpbmcgcGh5c2ljYWwgb3IgbWVudGFsIGNvbmRpdGlvbnMsIGZvciB0aGUgZXZhbHVhdGlvbiBvZiB0aGlzIGV4ZXJjaXNlIGludGVydmVudGlvbi4OZXhwYW5kYWJsZS1ib3gKVW5pdmVyc2l0eR1Vbml2ZXJzaXR5IG9mIFNvdXRoIEF1c3RyYWxpYT9HUE8gQm94IDI0NzE8YnIgLz5BZGVsYWlkZSwgU291dGggQXVzdHJhbGlhIDUwMDE8YnIgLz5BdXN0cmFsaWEJQXVzdHJhbGlhBkEvUHJvZg5HYXlub3IgUGFyZml0dJgBVW5pdmVyc2l0eSBvZiBTb3V0aCBBdXN0cmFsaWEgKFVuaVNBKSw8YnIgLz5QNy0wOCwgTGV2ZWwgNywgUGxheWZvcmQgQnVpbGRpbmc8YnIgLz5DaXR5IEVhc3QgQ2FtcHVzPGJyIC8%2BTm9ydGggVGVycmFjZSwgQWRlbGFpZGUsIFNvdXRoIEF1c3RyYWxpYSwgNTAwMC4JQXVzdHJhbGlhEis2MSAoMDgpIDgzMCAyMTIxMhtnYXlub3IucGFyZml0dEB1bmlzYS5lZHUuYXUGaGlkZGVuZAIPDxQrAAQPFgQfBWUfA2dkZGQ8KwAEAQAWAh8CZWQCEQ8WAh8BaGQCEw9kFgYCAw8PFgIfDWVkZAIFDw8WAh8NBSYvVHJpYWxQZGYvVHJpYWxSZXZpZXctMzczNzI1LnBkZj90PTEyNmRkAi8PPCsABAEADxYCHwNnZGQCAw9kFhZmDxUCEHJlc3VsdHMtaGVhZGVyLTERVHJpYWwgZnJvbSBBTlpDVFJkAgEPDxYCHw0FPX4vVHJpYWwvUmVnaXN0cmF0aW9uL1RyaWFsUmV2aWV3LmFzcHg%2FaWQ9MzczODkxJmlzUmV2aWV3PXRydWVkZAIDDw8WAh8NBSYvVHJpYWxQZGYvVHJpYWxSZXZpZXctMzczODkxLnBkZj90PTEyNmRkAgcPDxYCHwIFBjM3Mzg5MWRkAgkPDxYCHwIFDjEyNjE3MDAxNTQ0MzY5ZGQCCw8PFgIfAmVkZAINDw8WAh8CBQVGYWxzZWRkAg4PFS0QcmVzdWx0cy1oZWFkZXItMnFFZmZlY3Qgb2YgcGhhcm1hY2V1dGljYWwgZG9wYW1pbmVyZ2ljIGVuaGFuY2VtZW50IG9uIHBlcmZvcm1hbmNlIGluIGEgY29tcGxleCBvcHRpbWlzYXRpb24gdGFzayBpbiBoZWFsdGh5IGFkdWx0cxJOb3QgeWV0IHJlY3J1aXRpbmcHaW5mby1saQhBcHByb3ZlZAdpbmZvLWxpGFByb3NwZWN0aXZlbHkgcmVnaXN0ZXJlZDFIYXMgdGhlIHRyaWFsIGJlZW4gdXBkYXRlZCBpbiB0aGUgbGFzdCAxMiBtb250aHM%2FClVwIHRvIGRhdGUJNy8xMS8yMDE3EnJlc3VsdHMtaGVhZGVyLTEwMAhBcHByb3ZlZApVcCB0byBkYXRlE0FDVFJOMTI2MTcwMDE1NDQzNjkQMDcgTm92ZW1iZXIgMjAxNwRzaG93FUNvZ25pdGl2ZSBlbmhhbmNlbWVudARzaG93CUF1c3RyYWxpYQRzaG93CFZpY3RvcmlhBHNob3cEc2hvdxJOb3QgeWV0IHJlY3J1aXRpbmcQMjQgTm92ZW1iZXIgMjAxNwRzaG93CEFwcHJvdmVkkBFBKSBBaW1zIGFuZCBPYmplY3RpdmVzPGJyIC8%2BVGhpcyBwcm9qZWN0IGFpbXMgdG8gaW52ZXN0aWdhdGUgdGhlIHJvbGUgb2YgdGhlIG5ldXJvdHJhbnNtaXR0ZXIgZG9wYW1pbmUgaW4gY29tcGxleCBkZWNpc2lvbiBtYWtpbmcsIGFuZCBob3cgdGhyZWUgcHJlc2NyaXB0aW9uIHN0aW11bGFudCBtZWRpY2F0aW9ucyB0aGF0IG1vZHVsYXRlIGRvcGFtaW5lIGxldmVscyBpbiB0aGUgYnJhaW4gaW4gc2xpZ2h0bHkgZGlmZmVyZW50IHdheXMgY2FuIGFmZmVjdCB0aGUgcXVhbGl0eSBvZiBjb21wbGV4IGRlY2lzaW9uIG1ha2luZy4gVGhlc2UgbWVkaWNhdGlvbnMgKGRleHRyb2FtcGhldGFtaW5lLCBtZXRoeWxwaGVuaWRhdGUgYW5kIG1vZGFmaW5pbCkgYXJlIGluY3JlYXNpbmdseSB1c2VkIGJ5IGhlYWx0aHkgcGVvcGxlIGZvciBub24tbWVkaWNhbCwgY29nbml0aXZlIGVuaGFuY2VtZW50IHB1cnBvc2VzLCBob3dldmVyIHRoZWlyIGVmZmVjdHMgb24gYmFzaWMgY29nbml0aW9uIGFyZSBvZnRlbiBmb3VuZCB0byBiZSBpbmNvbnNpc3RlbnQsIGFuZCB0aGVpciBlZmZlY3RzIG9uIG1vcmUgbmF0dXJhbGlzdGljLCBjb21wbGV4IG9wdGltaXNhdGlvbiBiZWhhdmlvdXJzIGFyZSBub3Qga25vd24uPGJyIC8%2BQikgS2V5IFF1ZXN0aW9uKHMpPGJyIC8%2BRG8gc3RpbXVsYW50IG1lZGljYXRpb25zLCB0aGF0IGluY3JlYXNlIGRvcGFtaW5lIGluIHRoZSBicmFpbiwgZW5oYW5jZSwgb3IgaGF2ZSBhIGRlbGV0ZXJpb3VzIGVmZmVjdCwgb24gdGhlIGNvbXBsZXRpb24gb2YgYSBjb21wbGV4IGRlY2lzaW9uIG1ha2luZyB0YXNrLiBNb3JlIHNwZWNpZmljYWxseSBkbyB0aGV5OzxiciAvPiogQWZmZWN0IHRoZSBhbW91bnQgb2YgdGltZSB0YWtlbiB0byBzb2x2ZSBhIHByb2JsZW0%2FIDxiciAvPiogSW5jcmVhc2Ugb3IgZGVjcmVhc2UgdGhlIGxpa2VsaWhvb2QgdGhhdCBhIHBhcnRpY2lwYW50IHdpbGwgZmluZCB0aGUgY29ycmVjdCBzb2x1dGlvbiB0byB0aGUgcHJvYmxlbSAodGhlIGNvbXB1dGF0aW9uYWwgcGVyZm9ybWFuY2UpPzxiciAvPiogSW5jcmVhc2Ugb3IgZGVjcmVhc2UgdGhlIGNvbXB1dGF0aW9uYWwgZGlzdGFuY2UgYmV0d2VlbiB0aGUgcGFydGljaXBhbnTigJlzIHNvbHV0aW9uIGFuZCB0aGUgY29ycmVjdCBzb2x1dGlvbiAodGhlIGVjb25vbWljIHBlcmZvcm1hbmNlKT88YnIgLz4qIEFmZmVjdCB0aGUgdmFyaWV0eSBvZiBzZWFyY2ggcGF0aHMgdGhhdCBwYXJ0aWNpcGFudHMgdGFrZSB0aHJvdWdoIHRoZSBzcGFjZSBvZiBwb3NzaWJsZSBzb2x1dGlvbnM%2FPGJyIC8%2BPGJyIC8%2BQykgUmVzZWFyY2ggRGVzaWduPGJyIC8%2BVGhpcyBzdHVkeSB3aWxsIHV0aWxpemUgYSBkb3VibGUtYmxpbmRlZCBwbGFjZWJvLWNvbnRyb2xsZWQgY3Jvc3NvdmVyIGRlc2lnbi4gV2Ugd2lsbCByZWNydWl0IDMyIGhlYWx0aHkgcGFydGljaXBhbnRzIHdpdGggbm8gaGlzdG9yeSBvZiBuZXVyb2xvZ2ljYWwsIHBzeWNoaWF0cmljIG9yIGhlYXJ0IGNvbmRpdGlvbnMuIEVhY2ggb25lIHdpbGwgcGFydGljaXBhdGUgaW4gYW4gaW5pdGlhbCBhc3Nlc3NtZW50IHNlc3Npb24gYW5kIGZvdXIgdGVzdGluZyBzZXNzaW9ucywgZWFjaCBhdCBsZWFzdCBvbmUgd2VlayBhcGFydCB0byBhbGxvdyBmb3IgcGhhcm1hY2V1dGljYWwgd2FzaG91dC4gQXQgZWFjaCBzZXNzaW9uLCB0aGUgcGFydGljaXBhbnQgd2lsbCByZWNlaXZlIGVpdGhlciBhIHNpbmdsZSBkb3NlIG9mIHRoZSB0aHJlZSBwaGFybWFjZXV0aWNhbHMgb3IgdGhlIHBsYWNlYm8uIEFmdGVyIGEgOTAtbWludXRlIHdhaXRpbmcgcGVyaW9kLCBkdXJpbmcgd2hpY2ggdGhlIHBhcnRpY2lwYW50IGZpbGxzIG91dCBudW1iZXIgb2YgZGVtb2dyYXBoaWMgYW5kIHBlcnNvbmFsaXR5IHN1cnZleXMsIHRoZSBwYXJ0aWNpcGFudCB3aWxsIGNvbXBsZXRlIGEgc2VyaWVzIG9mIGNvbXB1dGVyaXNlZCBjb21wbGV4IG9wdGltaXNhdGlvbiB0YXNrcyBhbmQgYmFzaWMgY29nbml0aW9uIHRhc2tzLiBEYXRhIGNvbGxlY3RlZCBpbmNsdWRlcyB0aGUgc2VxdWVuY2UgYW5kIHRpbWluZyBvZiB0aGUgc2VsZWN0aW9uIG9mIGl0ZW1zIGZvciBlYWNoIHRhc2sgc29sdXRpb24sIGtleSB2YXJpYWJsZXMgZnJvbSB0aGUgbW9yZSBiYXNpYyBjb2duaXRpdmUgdGFza3MgYW5kIHRoZSBhbnN3ZXJzIHRvIHRoZSBzdXJ2ZXkgcXVlc3Rpb25zLjxiciAvPjRIZWFsdGh5IHZvbHVudGVlcnMgYWdlZCBiZXR3ZWVuIDE4IGFuZCAzNSB5ZWFycyBvbGQuCDE4IFllYXJzCDM1IFllYXJzFkJvdGggbWFsZXMgYW5kIGZlbWFsZXP7A0hpc3Rvcnkgb2YgcHN5Y2hpYXRyaWMgb3IgbmV1cm9sb2dpY2FsIGlsbG5lc3MgaW5jbHVkaW5nIGVwaWxlcHN5LCBoZWFkIGluanVyeSwgcHJldmlvdXMgdXNlIG9mIHBzeWNob3Ryb3BpYyBtZWRpY2F0aW9uLCBoaXN0b3J5IG9mIHNpZ25pZmljYW50IGRydWcgdXNlLCBoZWFydCBjb25kaXRpb25zIChpbmNsdWRpbmcgaGlnaCBibG9vZCBwcmVzc3VyZSwgZGVmaW5lZCBhcyBhYm92ZSAxNDAgbW0vSGcgc3lzdG9saWMgYW5kL29yIDkwIG1tL0hnIGRpYXN0b2xpYyBwcmVzc3VyZSBhcyBtZWFzdXJlZCBhdCB0aGUgaW5pdGlhbCBhc3Nlc3NtZW50IHNlc3Npb24pIHByZWduYW5jeSwgb3IgZ2xhdWNvbWEuIEFueSBmYW1pbHkgaGlzdG9yeSBvZiBzdWRkZW4gZGVhdGggb2YgYSBmaXJzdCBkZWdyZWUgcmVsYXRpdmUgdGhyb3VnaCBjYXJkaWFjIG9yIHVua25vd24gY2F1c2VzIGJlZm9yZSB0aGUgYWdlIG9mIDUwIHllYXJzIG9sZCB3aWxsIGFsc28gZXhjbHVkZSB0aGUgcGFydGljaXBhbnQuIA5leHBhbmRhYmxlLWJveApVbml2ZXJzaXR5G1RoZSBVbml2ZXJzaXR5IG9mIE1lbGJvdXJuZS5UaGUgVW5pdmVyc2l0eSBvZiBNZWxib3VybmU8YnIgLz5WaWN0b3JpYSAzMDEwCUF1c3RyYWxpYQJEchBFbGl6YWJldGggQm93bWFueEJyYWluLCBNaW5kIGFuZCBNYXJrZXRzIExhYm9yYXRvcnk8YnIgLz5EZXBhcnRtZW50IG9mIEZpbmFuY2U8YnIgLz5UaGUgVW5pdmVyc2l0eSBvZiBNZWxib3VybmU8YnIgLz5WaWN0b3JpYSwgMzAxMDxiciAvPglBdXN0cmFsaWEPKzYxIDMgOTAzNSA5OTUwF2VhYm93bWFuQHVuaW1lbGIuZWR1LmF1BmhpZGRlbmQCDw8UKwAEDxYEHwVlHwNnZGRkPCsABAEAFgIfAmVkAhEPFgIfAWhkAhMPZBYGAgMPDxYCHw1lZGQCBQ8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3Mzg5MS5wZGY%2FdD0xMjZkZAIvDzwrAAQBAA8WAh8DZ2RkAgUPZBYWZg8VAhByZXN1bHRzLWhlYWRlci0xEVRyaWFsIGZyb20gQU5aQ1RSZAIBDw8WAh8NBT1%2BL1RyaWFsL1JlZ2lzdHJhdGlvbi9UcmlhbFJldmlldy5hc3B4P2lkPTM3Mzg4OSZpc1Jldmlldz10cnVlZGQCAw8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3Mzg4OS5wZGY%2FdD0xMjZkZAIHDw8WAh8CBQYzNzM4ODlkZAIJDw8WAh8CBQ4xMjYxNzAwMTU0MzM3MGRkAgsPDxYCHwJlZGQCDQ8PFgIfAgUFRmFsc2VkZAIODxUtEHJlc3VsdHMtaGVhZGVyLTKMAUVmZmVjdCBvZiBmb2N1c3NlZCBhY2NlcHRhbmNlIGFuZCBjb21taXRtZW50IHRoZXJhcHkgb24gcXVhbGl0eSBvZiBsaWZlIGFuZCBkZXByZXNzaW9uIGluIHBhdGllbnRzIHdpdGggZGVwcmVzc2l2ZSBzeW1wdG9tcyBpbiBwcmltYXJ5IGNhcmUsEk5vdCB5ZXQgcmVjcnVpdGluZwdpbmZvLWxpCEFwcHJvdmVkB2luZm8tbGkYUHJvc3BlY3RpdmVseSByZWdpc3RlcmVkMUhhcyB0aGUgdHJpYWwgYmVlbiB1cGRhdGVkIGluIHRoZSBsYXN0IDEyIG1vbnRocz8KVXAgdG8gZGF0ZQk3LzExLzIwMTcScmVzdWx0cy1oZWFkZXItMTAwCEFwcHJvdmVkClVwIHRvIGRhdGUTQUNUUk4xMjYxNzAwMTU0MzM3MBAwNyBOb3ZlbWJlciAyMDE3BHNob3cTZGVwcmVzc2l2ZSBzeW1wdG9tcwRzaG93C05ldyBaZWFsYW5kBmhpZGRlbgAEc2hvdwRzaG93Ek5vdCB5ZXQgcmVjcnVpdGluZw8wMSBKYW51YXJ5IDIwMTgEc2hvdwhBcHByb3ZlZNoCVGhlIFByaW1hcnkgcHVycG9zZSBvZiB0aGlzIHN0dWR5IGlzIHRvIGFzc2VzcyB0aGUgZmVhc2liaWxpdHkgb2YgcmVjcnVpdGluZyBwYXRpZW50cyBmcm9tIGEgcHJpbWFyeSBjYXJlIHdhaXRpbmcgcm9vbSB3aGVuIGV2YWx1YXRpbmcgdGhlIGVmZmVjdGl2ZW5lc3Mgb2YgRm9jdXNzZWQgQWNjZXB0YW5jZSBhbmQgQ29tbWl0bWVudCBUaGVyYXB5IChGQUNUKS4gSXQgaXMgYWxzbyBkZXNpZ25lZCB0byBoYXZlIHN1ZmZpY2llbnQgcG93ZXIgdG8gZGV0ZXJtaW5lIGlmIHRoZXJlIGlzIGEgYmVuZWZpdCBmcm9tIEZBQ1QgYXQgb25lIHdlZWsgYWZ0ZXIgdGhlIGludGVydmVudGlvbnMuIDxiciAvPjxiciAvPngxLglQYXRpZW50cyBhZ2VkIDE2IGFuZCBvdmVyIHdpdGggYSBQSFEtOCBmcm9tIDIgdG8gMjE8YnIgLz4yLgkgU3BlYWsgc3VmZmljaWVudCBFbmdsaXNoIChvciBoYXZlIGFuIGludGVycHJldGVyKS48YnIgLz4IMTYgWWVhcnMINzUgWWVhcnMWQm90aCBtYWxlcyBhbmQgZmVtYWxlc4wCMS4gQ3VycmVudGx5IG9uIGN1cnJlbnQgbWFqb3IgdHJhbnF1aWxpemVyIG1lZGljYXRpb24uPGJyIC8%2BMi4gVW5hYmxlIHRvIGNvbXByZWhlbmQgdGhlIGluZm9ybWF0aW9uIHNoZWV0LjxiciAvPjMuIEJpcG9sYXIgYWZmZWN0aXZlIGRpc29yZGVyLjxiciAvPjQuIEN1cnJlbnRseSBhY2Nlc3NpbmcgcHN5Y2hvbG9naWNhbCB0cmVhdG1lbnQuPGJyIC8%2BNS4gVGFraW5nIGFudGlkZXByZXNzYW50IG1lZGljYXRpb24gZm9yIGxlc3MgdGhhbiBvbmUgbW9udGguIDxiciAvPg5leHBhbmRhYmxlLWJveBpPdGhlciBDb2xsYWJvcmF0aXZlIGdyb3VwcxlHcmVlbnN0b25lIEZhbWlseSBDbGluaWMgLlBPIEJPeCA3NTQ0NzxiciAvPk1hbnVyZXdhIDxiciAvPkF1Y2tsYW5kIDIxMDILTmV3IFplYWxhbmQEUHJvZg1CcnVjZSBBcnJvbGwgQFVuaXZlcnNpdHkgb2YgQXVja2xhbmQ8YnIgLz5Qcml2YXRlIEJhZyA5MjEwOTxiciAvPkF1Y2tsYW5kIDExNDILTmV3IFplYWxhbmQNKzY0LTktOTIzNjk3OBticnVjZS5hcnJvbGxAYXVja2xhbmQuYWMubnoGaGlkZGVuZAIPDxQrAAQPFgQfBWUfA2dkZGQ8KwAEAQAWAh8CZWQCEQ8WAh8BaGQCEw9kFgYCAw8PFgIfDWVkZAIFDw8WAh8NBSYvVHJpYWxQZGYvVHJpYWxSZXZpZXctMzczODg5LnBkZj90PTEyNmRkAi8PPCsABAEADxYCHwNnZGQCBw9kFhZmDxUCEHJlc3VsdHMtaGVhZGVyLTERVHJpYWwgZnJvbSBBTlpDVFJkAgEPDxYCHw0FPX4vVHJpYWwvUmVnaXN0cmF0aW9uL1RyaWFsUmV2aWV3LmFzcHg%2FaWQ9MzczOTAxJmlzUmV2aWV3PXRydWVkZAIDDw8WAh8NBSYvVHJpYWxQZGYvVHJpYWxSZXZpZXctMzczOTAxLnBkZj90PTEyNmRkAgcPDxYCHwIFBjM3MzkwMWRkAgkPDxYCHwIFDjEyNjE3MDAxNTQyMzgxZGQCCw8PFgIfAmVkZAINDw8WAh8CBQVGYWxzZWRkAg4PFS0QcmVzdWx0cy1oZWFkZXItMokBQSByYW5kb21pemVkLCBvcGVuLWxhYmVsIHN0dWR5IGV2YWx1YXRpbmcgdGhlIGVmZmVjdHMgb2YgZm9vZCBhbmQgZG9zaW5nIHJlZ2ltZW4gb24gUS0xMjIgcGhhcm1hY29raW5ldGljcyBpbiBoZWFsdGh5IGZlbWFsZSB2b2x1bnRlZXJzDQoSTm90IHlldCByZWNydWl0aW5nB2luZm8tbGkbU3VibWl0dGVkLCBub3QgeWV0IGFwcHJvdmVkB2luZm8tbGkrUHJvc3BlY3RpdmVseSByZWdpc3RlcmVkPGJyIC8%2BKHByb3Zpc2lvbmFsKTFIYXMgdGhlIHRyaWFsIGJlZW4gdXBkYXRlZCBpbiB0aGUgbGFzdCAxMiBtb250aHM%2FClVwIHRvIGRhdGUJNy8xMS8yMDE3EnJlc3VsdHMtaGVhZGVyLTEwMBtTdWJtaXR0ZWQsIG5vdCB5ZXQgYXBwcm92ZWQKVXAgdG8gZGF0ZRRBQ1RSTjEyNjE3MDAxNTQyMzgxcBAwNyBOb3ZlbWJlciAyMDE3BHNob3c2VmFzb21vdG9yIHN5bXB0b21zIGluIGJyZWFzdCBjYW5jZXIgcGF0aWVudHMvc3Vydml2b3JzBHNob3cJQXVzdHJhbGlhBHNob3cPU291dGggQXVzdHJhbGlhBHNob3cEc2hvdxJOb3QgeWV0IHJlY3J1aXRpbmcQMjkgTm92ZW1iZXIgMjAxNwRzaG93G1N1Ym1pdHRlZCwgbm90IHlldCBhcHByb3ZlZO4DUS0xMjIgaXMgYmVpbmcgZGV2ZWxvcGVkIGJ5IFFVRSBPbmNvbG9neSBhcyBhIHRyZWF0bWVudCBmb3IgdmFzb21vdG9yIHN5bXB0b21zIChob3QgZmxhc2hlcykgaW4gZmVtYWxlIGJyZWFzdCBjYW5jZXIgcGF0aWVudHMvc3Vydml2b3JzLiBRLTEyMiBoYXMgYmVlbiBzdHVkaWVkIGluIHRocmVlIFBoYXNlIDEgY2xpbmljYWwgdHJpYWxzIGluIGNhbmNlciBwYXRpZW50cywgaGVhbHRoeSB2b2x1bnRlZXJzLCBhbmQgYnJlYXN0IGNhbmNlciBzdXJ2aXZvcnMgdGFraW5nIGFudGktZXN0cm9nZW4gdGhlcmFweSB3aG8gd2VyZSBleHBlcmllbmNpbmcgVk1TLiAgVGhpcyBzdHVkeSBpcyBkZXNpZ25lZCB0byBkZXRlcm1pbmUgdGhlIGVmZmVjdCBvZiBmb29kIG9uIFEtMTIyIHBoYXJtYWNva2luZXRpYyAoUEspIHBhcmFtZXRlcnMgKFBhcnQgMSkgYW5kIFBLIHBhcmFtZXRlcnMgZm9sbG93aW5nIGEgb25jZSBkYWlseSBvciB0d2ljZSBkYWlseSBkb3NpbmcgcmVnaW1lbi7%2BAS0gRmVtYWxlIHN1YmplY3RzIDQ1IHllYXJzIG9mIGFnZSBvciBvbGRlci48YnIgLz4tIGdlbmVyYWxseSBoZWFsdGh5IGFic2VudCBhbnkgY2xpbmljYWxseSBzaWduaWZpY2FudCBhbmQgcmVsZXZhbnQgYWJub3JtYWxpdHk8YnIgLz4tIG9mIG5vbi1jaGlsZGJlYXJpbmcgcG90ZW50aWFsLjxiciAvPi0gd2lsbGluZyB0byBhZGhlcmUgdG8gdGhlIHZpc2l0IGFuZCBhc3Nlc3NtZW50IHNjaGVkdWxlLCBhbmQgcHJvdG9jb2wgcmVzdHJpY3Rpb25zCDQ1IFllYXJzCSBObyBsaW1pdAdGZW1hbGVziwgtIENsaW5pY2FsbHkgcmVsZXZhbnQgaGlzdG9yeSBvZiBoZXBhdGljLCByZW5hbCwgcHVsbW9uYXJ5LCBwc3ljaGlhdHJpYywgb3IgaW5mZWN0aW91cyBkaXNvcmRlcnMgdGhhdCB3b3VsZCBpbnRlcmZlcmUgd2l0aCBzdHVkeSBwcm9jZWR1cmVzPGJyIC8%2BLSBIaXN0b3J5IG9mIHN0b21hY2ggYmFuZGluZyBvciBvdGhlciBzdXJnZXJ5LCBDcm9obuKAmXMgZGlzZWFzZSwgdWxjZXJhdGl2ZSBjb2xpdGlzLCAoZGlhYmV0aWMpIGdhc3Ryb3BhcmVzaXMsIGlycml0YWJsZSBib3dlbCBzeW5kcm9tZSwgaXJyZWd1bGFyIGJvd2VsIGhhYml0LCBHSSBzdG9tYSwgY29sb3N0b215PGJyIC8%2BLSBQcmVnbmFudCBvciBudXJzaW5nPGJyIC8%2BLSBmZWJyaWxlIGlsbG5lc3Mgd2l0aGluIDcgZGF5cyBvZiB0aGUgcGxhbm5lZCBmaXJzdCBkb3NlIG9mIHN0dWR5IGRydWcuPGJyIC8%2BLSBQYXJ0aWNpcGF0aW9uIGluIGEgY2xpbmljYWwgdHJpYWwgd2l0aCBhbiBJbnZlc3RpZ2F0aW9uYWwgUHJvZHVjdCB3aXRoaW4gMzAgZGF5cyBwcmlvciB0byBEYXkgMS4gPGJyIC8%2BLSBDdXJyZW50IHVzZSBvZiB0b2JhY2NvLCBvciB1c2Ugd2l0aGluIDMgbW9udGhzIG9mIHNjcmVlbmluZy48YnIgLz4tIEhpc3Rvcnkgb2Ygc3Vic3RhbmNlIGFidXNlIG9yIGFsY29ob2wgY29uc3VtcHRpb24gZXhjZWVkaW5nIDE0IGRyaW5rcy93ZWVrLjxiciAvPi0gQ2xpbmljYWwgbGFib3JhdG9yeSBhYm5vcm1hbGl0aWVzOjxiciAvPuKAoiBBTFQgb3IgQVNUID4gR3JhZGUgMTxiciAvPuKAoiBUb3RhbCBCaWxpcnViaW4gPiBHcmFkZSAxPGJyIC8%2B4oCiIFNlcnVtIENyZWF0aW5pbmUgPiBHcmFkZSAxPGJyIC8%2B4oCiIEhlbWF0b2xvZ3kgdmFsdWVzID4gdXBwZXIgbGltaXQgb2Ygbm9ybWFsPGJyIC8%2BLSBDbGluaWNhbGx5IHNpZ25pZmljYW50IEVDRyBhYm5vcm1hbGl0aWVzPGJyIC8%2BLSBVc2Ugb2YgbWVkaWNhdGlvbnMgdGhhdCBpbmNyZWFzZSBnYXN0cmljIHBIIG9yIGFmZmVjdCBnYXN0cmljIG1vdGlsaXR5PGJyIC8%2BLSBCb2R5IG1hc3MgaW5kZXggPiAzOC4OZXhwYW5kYWJsZS1ib3gaQ29tbWVyY2lhbCBzZWN0b3IvSW5kdXN0cnkMUXVlIE9uY29sb2d5MUxldmVsIDksIDMxIFF1ZWVuIFN0cmVldDxiciAvPk1lbGJvdXJuZSwgVklDIDMwMDAJQXVzdHJhbGlhAkRyC1JvYiBDcm9tYmllT1FVRSBPbmNvbG9neSBQdHkgTGltaXRlZDxiciAvPkxldmVsIDksIDMxIFF1ZWVuIFN0cmVldDxiciAvPk1lbGJvdXJuZSwgVklDIDMwMDAJQXVzdHJhbGlhDys2MSAzIDk2NTcgMDczMRhyY3JvbWJpZUBxdWVvbmNvbG9neS5jb20GaGlkZGVuZAIPDxQrAAQPFgQfBWUfA2dkZGQ8KwAEAQAWAh8CZWQCEQ8WAh8BaGQCEw9kFgYCAw8PFgIfDWVkZAIFDw8WAh8NBSYvVHJpYWxQZGYvVHJpYWxSZXZpZXctMzczOTAxLnBkZj90PTE0MWRkAi8PPCsABAEADxYCHwNnZGQCCQ9kFhZmDxUCEHJlc3VsdHMtaGVhZGVyLTERVHJpYWwgZnJvbSBBTlpDVFJkAgEPDxYCHw0FPX4vVHJpYWwvUmVnaXN0cmF0aW9uL1RyaWFsUmV2aWV3LmFzcHg%2FaWQ9MzczODY2JmlzUmV2aWV3PXRydWVkZAIDDw8WAh8NBSYvVHJpYWxQZGYvVHJpYWxSZXZpZXctMzczODY2LnBkZj90PTE0MWRkAgcPDxYCHwIFBjM3Mzg2NmRkAgkPDxYCHwIFDjEyNjE3MDAxNTQxMzkyZGQCCw8PFgIfAmVkZAINDw8WAh8CBQVGYWxzZWRkAg4PFS0QcmVzdWx0cy1oZWFkZXItMp8BQXNzZXNzaW5nIHRoZSBlZmZlY3RpdmVuZXNzIG9mIHNwaW5hbCBjb3JkIHN0aW11bGF0aW9uIHZlcnN1cyBzcGluYWwgZnVzaW9uIHN1cmdlcnkgZm9yIHRoZSB0cmVhdG1lbnQgb2YgY2hyb25pYyBsb3cgYmFjayBwYWluOiBhIHByb3NwZWN0aXZlIHJhbmRvbWlzZWQgc3R1ZHkuEk5vdCB5ZXQgcmVjcnVpdGluZwdpbmZvLWxpCEFwcHJvdmVkB2luZm8tbGkYUHJvc3BlY3RpdmVseSByZWdpc3RlcmVkMUhhcyB0aGUgdHJpYWwgYmVlbiB1cGRhdGVkIGluIHRoZSBsYXN0IDEyIG1vbnRocz8KVXAgdG8gZGF0ZQk3LzExLzIwMTcScmVzdWx0cy1oZWFkZXItMTAwCEFwcHJvdmVkClVwIHRvIGRhdGUTQUNUUk4xMjYxNzAwMTU0MTM5MhAwNyBOb3ZlbWJlciAyMDE3BHNob3cVQ2hyb25pYyBMb3cgQmFjayBQYWluBHNob3cJQXVzdHJhbGlhBHNob3cIVmljdG9yaWEEc2hvdwRzaG93Ek5vdCB5ZXQgcmVjcnVpdGluZw8xNSBKYW51YXJ5IDIwMTgEc2hvdwhBcHByb3ZlZLkSVGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIHN0dWR5IGlzIHRvIGRldGVybWluZSB3aGV0aGVyIG9yIG5vdCBwYXRpZW50cyB0aGF0IGFyZSB0cmVhdGVkIGJ5IHNwaW5hbCBjb3JkIHN0aW11bGF0aW9uIGhhdmUgdGhlIHNhbWUgb3IgZGlmZmVyZW50IHRyZWF0bWVudCBvdXRjb21lcyBhcyBwYXRpZW50cyB0aGF0IHVuZGVyZ28gc3BpbmFsIGZ1c2lvbiBpbiBhIGdyb3VwIG9mIHBhdGllbnRzIHRoYXQgaGF2ZSByZWNlaXZlZCBubyB0cmVhdG1lbnQgaW4gdGhlIHBhc3QgZm9yIGNocm9uaWMgbG93IGJhY2sgcGFpbi4gVGhlIG91dGNvbWVzIGFyZSBtZWFzdXJlZCBieSBwYWluIHNjb3JlcywgZGVwcmVzc2lvbiwgYW54aWV0eSBhbmQgc3RyZXNzIHNjb3JlcywgcGF0aWVudCBpbXByZXNzaW9uIG9mIGNoYW5nZSwgcGF0aWVudCBmdW5jdGlvbmFsaXR5LCBoZWFsdGggb3V0Y29tZXMgYXNzZXNzbWVudHMgYW5kIGRpc2FiaWxpdHkgc2NvcmVzLiBUaGUgcGF0aWVudHMnIGJlbGllZiBpbiB0aGUgZWZmaWNhY3kgb2YgdGhlIHRyZWF0bWVudCB3aWxsIGFsc28gYmUgY29sbGVjdGVkLiBUaGVyZSBpcyBhbHNvIGFuIGFzcGVjdCBvZiB0aGUgc3R1ZHkgdGhhdCB3aWxsIGxvb2sgYXQgd2hldGhlciBzcGluYWwgY29yZCBzdGltdWxhdGlvbiBpbiBjb25qdW5jdGlvbiB3aXRoIHNwaW5hbCBmdXNpb24gbGVhZHMgdG8gYmV0dGVyIHBhdGllbnQgb3V0Y29tZXMuIEVsaWdpYmxlIHN1YmplY3RzIHdpbGwgYmUgcmFuZG9taXNlZCB0byBlaXRoZXIgdGhlIHNwaW5hbCBjb3JkIHN0aW11bGF0aW9uIGFybSBvciB0aGUgZnVzaW9uIGFybS4gU3ViamVjdHMgcmFuZG9taXNlZCB0byB0aGUgc3BpbmFsIGNvcmQgc3RpbXVsYXRpb24gYXJtIHdpbGwgdW5kZXJnbyBhbiBpbml0aWFsIHNwaW5hbCBjb3JkIHN0aW11bGF0aW9uIHRyaWFsLiBJZiB0aGlzIHRyaWFsIGlzIHBvc2l0aXZlIChyZWxpZXZlcyBwYWluIGJ5IGF0IGxlYXN0IDUwJSksIHRoZSBzdWJqZWN0IHdpbGwgdGhlbiBiZSBvZmZlcmVkIGEgc3BpbmFsIGNvcmQgaW1wbGFudC4gSWYgdGhlIHRyaWFsIGlzIG5vdCBwb3NpdGl2ZSwgdGhlIHN1YmplY3Qgd2lsbCBiZSB3aXRoZHJhd24gZnJvbSB0aGUgc3R1ZHkgYW5kIG9mZmVyZWQgc3BpbmFsIGZ1c2lvbi4gSWYgdGhlIGltcGxhbnQgaXMgcG9zaXRpdmUgKHBhaW4gcmVsaWVmIG9mIGF0IGxlYXN0IDUwJSBpcyBtYWludGFpbmVkKSA2IG1vbnRocyBwb3N0IGltcGxhbnQsIGEgc3ViamVjdCB3aWxsIGJlIGZvbGxvd2VkIGZvciBhIGZ1cnRoZXIgMTIgbW9udGhzLiBJZiB0aGUgaW1wbGFudCBpcyBuZWdhdGl2ZSwgdGhlIHN1YmplY3Qgd2lsbCBiZSBvZmZlcmVkIHNwaW5hbCBmdXNpb24uIE91dGNvbWVzIG9mIHRoZSBmdXNpb24gd2lsbCBiZSBhc3Nlc3NlZCA2IG1vbnRocyBhZnRlciBzdXJnZXJ5LiBJZiB0aGUgZnVzaW9uIGlzIHBvc2l0aXZlIChwYWluIHJlbGllZiBvZiBhdCBsZWFzdCA1MCUgaXMgbWFpbnRhaW5lZCksIHRoZSBzdWJqZWN0IHdpbGwgYmUgZm9sbG93ZWQgZm9yIGEgZnVydGhlciAxMiBtb250aHMuIElmIHRoZSBmdXNpb24gaXMgbmVnYXRpdmUsIHRoZSBzdWJqZWN0IHdpbGwgYmUgb2ZmZXJlZCByZWFjdGl2YXRpb24gb2YgdGhlIHNwaW5hbCBjb3JkIHN0aW11bGF0b3IuIFRoZSBzdWJqZWN0IHdpbGwgdGhlbiBiZSBmb2xsb3dlZCBmb3IgMTggbW9udGhzIHBvc3QgcmVhY3RpdmF0aW9uLiBTdWJqZWN0cyByYW5kb21pc2VkIHRvIHRoZSBzcGluYWwgZnVzaW9uIGFybSB3aWxsIGJlIGFzc2Vzc2VkIDYgbW9udGhzIHBvc3QgcHJvY2VkdXJlLiBJZiB0aGUgc3BpbmFsIGZ1c2lvbiBpcyBwb3NpdGl2ZSAocGFpbiByZWxpZWYgb2YgYXQgbGVhc3QgNTAlIGlzIG1haW50YWluZWQpICwgc3ViamVjdHMgd2lsbCBiZSBmb2xsb3dlZCBmb3IgYSBmdXJ0aGVyIDEyIG1vbnRocy4gSWYgdGhlIHNwaW5hbCBmdXNpb24gaXMgbmVnYXRpdmUsIHN1YmplY3RzIHdpbGwgdGhlbiBiZSBvZmZlcmVkIGEgc3BpbmFsIGNvcmQgc3RpbXVsYXRpb24gdHJpYWwuIElmIHRoaXMgdHJpYWwgaXMgcG9zaXRpdmUgKGF0IGxlYXN0IDUwJSBvZiBwYWluIHJlbGllZiBpcyBvYnRhaW5lZCksIHN1YmplY3RzIHdpbGwgYmUgb2ZmZXJlZCBhIHNwaW5hbCBjb3JkIHN0aW11bGF0aW9uIGltcGxhbnQuIFN1YmplY3RzIHdpbGwgYmUgZm9sbG93ZWQgZm9yIDE4IG1vbnRocyBwb3N0IGltcGxhbnQgKHdoZXRoZXIgcG9zaXRpdmUgb3IgbmVnYXRpdmUpLiBJZiB0aGUgc3BpbmFsIGNvcmQgc3RpbXVsYXRpb24gdHJpYWwgaXMgbmVnYXRpdmUsIHN1YmplY3RzIHdpbGwgYmUgZm9sbG93ZWQgZm9yIDE4IG1vbnRocyBwb3N0IHRoZSBzcGluYWwgZnVzaW9uIHByb2NlZHVyZS4gvQnigKIJSGF2ZSBiZWVuIGRpYWdub3NlZCB3aXRoIGNocm9uaWMgbG93IGJhY2sgcGFpbiB0aGF0IGhhcyBwZXJzaXN0ZWQgZm9yIGF0IGxlYXN0IDkwIGRheXM8YnIgLz7igKIJUGFpbiBjbGluaWNhbGx5IHN1c3BlY3RlZCB0byBiZSBnZW5lcmF0ZWQgZnJvbSBzaW5nbGUgbGV2ZWwgbHVtYmFyIGRpc2MgZGlzZWFzZSBhcyBhc3Nlc3NlZCBieSBhbiBpbnZlc3RpZ2F0b3I8YnIgLz7igKIJQmUgMTggeWVhcnMgb2YgYWdlIG9yIG9sZGVyPGJyIC8%2B4oCiCUhhdmUgYW4gYXZlcmFnZSBwYWluIGludGVuc2l0eSBvZiBhdCBsZWFzdCA2IG91dCBvZiAxMCBvbiB0aGUgTnVtZXJpY2FsIFBhaW4gUmF0aW5nIFNjYWxlIGF0IGVucm9sbWVudC4gPGJyIC8%2B4oCiCVdpbGxpbmcgYW5kIGFibGUgdG8gY29tcGxldGUgaGVhbHRoIHF1ZXN0aW9ubmFpcmVzIGFuZCBwYWluIHNjYWxlcyBhcyBzcGVjaWZpZWQgaW4gdGhlIHByb3RvY29sIDxiciAvPuKAoglXaWxsaW5nIGFuZCBhYmxlIHRvIHNpZ24gdGhlIHN0dWR5LXNwZWNpZmljIFBhdGllbnQgSW5mb3JtZWQgQ29uc2VudCBmb3JtPGJyIC8%2B4oCiCUhhdmUgcHJpdmF0ZSBoZWFsdGggaW5zdXJhbmNlPGJyIC8%2B4oCiCU5vIHByZXZpb3VzIG9wZW4gYmFjayBzdXJnZXJ5IDxiciAvPuKAoglObyBwcmV2aW91cyBTQ1MgdHJlYXRtZW50PGJyIC8%2B4oCiCU5vIFJGIHRyZWF0bWVudCBpbiBwYXN0IDEyIG1vbnRoczxiciAvPuKAoglCZSBvbiBzdGFibGUgcGFpbiBtZWRpY2F0aW9ucywgYXMgZGV0ZXJtaW5lZCBieSB0aGUgSW52ZXN0aWdhdG9yLCBmb3IgYXQgbGVhc3QgMjggZGF5cyBwcmlvciB0byBlbnJvbGxpbmcgaW4gdGhpcyBzdHVkeS48YnIgLz7igKIJQmUgd2lsbGluZyB0byBub3QgaW5jcmVhc2UgcGFpbiBtZWRpY2F0aW9uLCB1bnRpbCA2IG1vbnRocyBhZnRlciBTQ1Mgb3IgZnVzaW9uIHN1cmdlcnkuIFRoaXMgZXhjbHVkZXMgcG9zdCBhbmQgcGVyaS1vcGVyYXRpdmUgYW5hbGdlc2lhIGFkbWluaXN0ZXJlZCBhcyBwZXIgdGhlIGNlbnRyZXPigJkgc3RhbmRhcmQgcHJhY3RpY2UgZm9yIHVwIHRvIDMgbW9udGhzIGZvbGxvd2luZyBzdXJnZXJ5LiA8YnIgLz7igKIJSW1hZ2luZywgYXMgcGVyIHN0YW5kYXJkIG9mIGNhcmUsIHRvIGVuc3VyZSBzdWl0YWJpbGl0eSBmb3Igc3BpbmFsIGZ1c2lvbiBzdXJnZXJ5IGFuZCBTQ1MgdGhlcmFweSAoTVJJICsvLSBDVCwgKy8tIFgtcmF5KS4gPGJyIC8%2BCDE4IFllYXJzCSBObyBsaW1pdBZCb3RoIG1hbGVzIGFuZCBmZW1hbGVz3hHigKIJSGF2ZSBwbGFucyB0byBlbnJvbGwgaW4gYW5vdGhlciBjbGluaWNhbCBzdHVkeSBkdXJpbmcgdGhlaXIgcGFydGljaXBhdGlvbiBpbiB0aGlzIHN0dWR5LCBvciBhcmUgY3VycmVudGx5IGVucm9sbGVkIGluIGFuIGludGVydmVudGlvbmFsIGNsaW5pY2FsIHN0dWR5IHRoYXQgY291bGQgaW50ZXJmZXJlIGluIHBhcnRpY2lwYXRpb24gaW4gdGhlIHRyaWFsIG9yIGFmZmVjdCB0aGUgc2NpZW50aWZpYyBzb3VuZG5lc3Mgb2YgdGhpcyBzdHVkeSA8YnIgLz7igKIJSGF2ZSBhIG1lZGljYWwgY29uZGl0aW9uIG9yIHBhaW4gaW4gb3RoZXIgYXJlYShzKSwgbm90IGludGVuZGVkIHRvIGJlIHRyZWF0ZWQgd2l0aCBTQ1Mgb3IgZnVzaW9uLCB0aGF0IGNvdWxkIGludGVyZmVyZSB3aXRoIHN0dWR5IHByb2NlZHVyZXMsIGFjY3VyYXRlIHBhaW4gcmVwb3J0aW5nLCBhbmQvb3IgY29uZm91bmQgZXZhbHVhdGlvbiBvZiBzdHVkeSBlbmRwb2ludHMsIGFzIGRldGVybWluZWQgYnkgdGhlIEludmVzdGlnYXRvciAoc3VjaCBhcyBwcmltYXJ5IGhlYWRhY2hlIGRpYWdub3NpcyBhbmQgZmlicm9teWFsZ2lhKS48YnIgLz7igKIJQ2xpbmljYWwgYmFjayBpbnN0YWJpbGl0eSB3aXRoIHN1cmdpY2FsbHkgdW5zdGFibGUgc3BvbmR5bG9saXN0aGVzaXMgYXMgZGV0ZXJtaW5lZCBieSB0aGUgaW52ZXN0aWdhdG9yPGJyIC8%2B4oCiCUhhdmUgZXZpZGVuY2Ugb2YgYW4gYWN0aXZlIGRpc3J1cHRpdmUgcHN5Y2hvbG9naWNhbCBvciBwc3ljaGlhdHJpYyBkaXNvcmRlciBvciBvdGhlciBrbm93biBjb25kaXRpb24gc2lnbmlmaWNhbnQgZW5vdWdoIHRvIGltcGFjdCBwZXJjZXB0aW9uIG9mIHBhaW4sIGNvbXBsaWFuY2Ugb2YgaW50ZXJ2ZW50aW9uIGFuZC9vciBhYmlsaXR5IHRvIGV2YWx1YXRlIHRyZWF0bWVudCBvdXRjb21lLCBhcyBkZXRlcm1pbmVkIGJ5IGEgcHN5Y2hvbG9naXN0IG9yIHRoZSBwaHlzaWNpYW4gPGJyIC8%2B4oCiCUhhdmUgYSBjdXJyZW50IGRpYWdub3NpcyBvZiBhIHByb2dyZXNzaXZlIG5ldXJvbG9naWNhbCBkaXNlYXNlIHN1Y2ggYXMgbXVsdGlwbGUgc2NsZXJvc2lzLCBjaHJvbmljIGluZmxhbW1hdG9yeSBkZW15ZWxpbmF0aW5nIHBvbHluZXVyb3BhdGh5LCByYXBpZGx5IHByb2dyZXNzaXZlIGFyYWNobm9pZGl0aXMsIHJhcGlkbHkgcHJvZ3Jlc3NpdmUgZGlhYmV0aWMgcGVyaXBoZXJhbCBuZXVyb3BhdGh5LCBicmFpbiBvciBzcGluYWwgY29yZCB0dW1vciwgYW5kL29yIGNlbnRyYWwgZGVhZmZlcmVudGF0aW9uIHN5bmRyb21lLiA8YnIgLz7igKIJSGF2ZSBhIGN1cnJlbnQgZGlhZ25vc2lzIG9mIGEgY29hZ3VsYXRpb24gZGlzb3JkZXIsIGJsZWVkaW5nIGRpYXRoZXNpcyB0aGF0IHdvdWxkIHB1dCBwYXRpZW50IGF0IGFueSBpbmNyZWFzZWQgcmlzayBvZiBibGVlZGluZyBkdXJpbmcgU0NTIG9yIGZ1c2lvbiBwcm9jZWR1cmUsIHByb2dyZXNzaXZlIHBlcmlwaGVyYWwgdmFzY3VsYXIgZGlzZWFzZSBvciB1bmNvbnRyb2xsZWQgZGlhYmV0ZXMgbWVsbGl0dXMuIDxiciAvPuKAoglIYXZpbmcgYW55IGNsaW5pY2FsIGV2aWRlbmNlIG9mIG1lY2hhbmljYWwgaW5zdGFiaWxpdHkgb3IgcHJvZ3Jlc3NpdmUgbmV1cm9sb2dpYyBwYXRob2xvZ3kgdGhhdCB3YXJyYW50cyBzdXJnaWNhbCBpbnRlcnZlbnRpb24uICA8YnIgLz7igKIJQW55IHByZXZpb3VzIGhpc3Rvcnkgb2Ygc3VyZ2VyeSBvbiB0aGUgcG9zdGVyaW9yIGVsZW1lbnRzIChsYW1pbmVjdG9teSwgcG9zdGVyaW9yIGZ1c2lvbikgdGhhdCB3b3VsZCBkaXNydXB0L29ibGl0ZXJhdGUgdGhlIHBvc3RlcmlvciBlcGlkdXJhbCBzcGFjZS48YnIgLz7igKIJSGF2ZSBhIGNvbmRpdGlvbiBjdXJyZW50bHkgcmVxdWlyaW5nIG9yIGxpa2VseSB0byByZXF1aXJlIHRoZSB1c2Ugb2YgTVJJIG9yIGRpYXRoZXJteS48YnIgLz7igKIJSGF2ZSBtZXRhc3RhdGljIG1hbGlnbmFudCBkaXNlYXNlIG9yIGFjdGl2ZSBsb2NhbCBtYWxpZ25hbnQgZGlzZWFzZS48YnIgLz7igKIJSGF2ZSBhIGxpZmUgZXhwZWN0YW5jeSBvZiBsZXNzIHRoYW4gMSB5ZWFyLjxiciAvPuKAoglIYXZlIGFuIGFjdGl2ZSBzeXN0ZW1pYyBvciBsb2NhbCBpbmZlY3Rpb24uPGJyIC8%2B4oCiCUJlIHByZWduYW50IChpZiBmZW1hbGUgYW5kIHNleHVhbGx5IGFjdGl2ZSwgc3ViamVjdCBtdXN0IGJlIHVzaW5nIGEgcmVsaWFibGUgZm9ybSBvZiBiaXJ0aCBjb250cm9sLCBiZSBzdXJnaWNhbGx5IHN0ZXJpbGUgb3IgYmUgYXQgbGVhc3QgMiB5ZWFycyBwb3N0LW1lbm9wYXVzYWwpLjxiciAvPg5leHBhbmRhYmxlLWJveAVPdGhlchhNb25hc2ggQ2xpbmljYWwgUmVzZWFyY2gpMjcxIENsYXl0b24gUm9hZCwgQ2xheXRvbiwgVmljdG9yaWEsIDMxNjgJQXVzdHJhbGlhA01ycwxNZXJ5bHluIFJ5YW5PTW9uYXNoIENsaW5pY2FsIFJlc2VhcmNoPGJyIC8%2BMjcxIENsYXl0b24gUm9hZDxiciAvPkNsYXl0b24gPGJyIC8%2BVmljdG9yaWEgMzE2OAlBdXN0cmFsaWEPKzYxIDMgOTU5NSA2MTExFW1yeWFuQG1vbmFzaGNyLmNvbS5hdQZoaWRkZW5kAg8PFCsABA8WBB8FZR8DZ2RkZDwrAAQBABYCHwJlZAIRDxYCHwFoZAITD2QWBgIDDw8WAh8NZWRkAgUPDxYCHw0FJi9UcmlhbFBkZi9UcmlhbFJldmlldy0zNzM4NjYucGRmP3Q9MTQxZGQCLw88KwAEAQAPFgIfA2dkZAILD2QWFmYPFQIQcmVzdWx0cy1oZWFkZXItMRFUcmlhbCBmcm9tIEFOWkNUUmQCAQ8PFgIfDQU9fi9UcmlhbC9SZWdpc3RyYXRpb24vVHJpYWxSZXZpZXcuYXNweD9pZD0zNzM4ODEmaXNSZXZpZXc9dHJ1ZWRkAgMPDxYCHw0FJi9UcmlhbFBkZi9UcmlhbFJldmlldy0zNzM4ODEucGRmP3Q9MTQxZGQCBw8PFgIfAgUGMzczODgxZGQCCQ8PFgIfAgUOMTI2MTcwMDE1NDAzMDNkZAILDw8WAh8CZWRkAg0PDxYCHwIFBUZhbHNlZGQCDg8VLRByZXN1bHRzLWhlYWRlci0yogFTdGVyb2lkcyBUbyBSZWR1Y2UgdGhlIEltcGFjdCBvbiBERWxpcml1bSAoU1RSSURFKSBzdHVkeSAtIHBpbG90IHJhbmRvbWlzZWQgY29udHJvbGxlZCB0cmlhbCBvZiBwcmVvcGVyYXRpdmUgZGV4YW1ldGhhc29uZSB0byBwcmV2ZW50IGRlbGlyaXVtIGFmdGVyIGhpcCBmcmFjdHVyZS4STm90IHlldCByZWNydWl0aW5nB2luZm8tbGkIQXBwcm92ZWQHaW5mby1saRhQcm9zcGVjdGl2ZWx5IHJlZ2lzdGVyZWQxSGFzIHRoZSB0cmlhbCBiZWVuIHVwZGF0ZWQgaW4gdGhlIGxhc3QgMTIgbW9udGhzPwpVcCB0byBkYXRlCTcvMTEvMjAxNxJyZXN1bHRzLWhlYWRlci0xMDAIQXBwcm92ZWQKVXAgdG8gZGF0ZRNBQ1RSTjEyNjE3MDAxNTQwMzAzEDA3IE5vdmVtYmVyIDIwMTcEc2hvdxZEZWxpcml1bSwgSGlwIEZyYWN0dXJlBHNob3cLTmV3IFplYWxhbmQGaGlkZGVuAARzaG93BHNob3cSTm90IHlldCByZWNydWl0aW5nEDAxIERlY2VtYmVyIDIwMTcEc2hvdwhBcHByb3ZlZLsXUG9zdG9wZXJhdGl2ZSBkZWxpcml1bSAoUE9EKSBpcyBhbiBpbXBvcnRhbnQgY2xpbmljYWwgcHJvYmxlbSBjb21tb25seSBvYnNlcnZlZCBpbiBlbGRlcmx5IHBhdGllbnRzIGR1cmluZyB0aGUgZmlyc3QgZmV3IGRheXMgZm9sbG93aW5nIGhpcCBmcmFjdHVyZSBzdXJnZXJ5LiBQT0QgaXMgYXNzb2NpYXRlZCB3aXRoIGluY3JlYXNlZCBsZW5ndGggb2YgaG9zcGl0YWwgc3RheSBhbmQgc2lnbmlmaWNhbnRseSBoaWdoZXIgbW9yYmlkaXR5IGFuZCBtb3J0YWxpdHkgcmF0ZXMgdGhhbiB0aG9zZSB3aG8gZG8gbm90IGdldCBQT0QuIFRoZSByZXBvcnRlZCBpbmNpZGVuY2Ugb2YgUE9EIGluIHBhdGllbnRzIGZvbGxvd2luZyBoaXAgZnJhY3R1cmUgc3VyZ2VyaWVzIHZhcmllcyBiZXR3ZWVuIDE2JSBhbmQgNjIlLiBTdHVkaWVzIHN1Z2dlc3QgdGhhdCBpbmZsYW1tYXRpb24gcmVsYXRlZCB0byB0aGUgc3RyZXNzIHJlc3BvbnNlIGZyb20gdGhlIGluaXRpYWwgdHJhdW1hICh0aGUgZnJhY3R1cmUgaXRzZWxmKSBhcyB3ZWxsIGFzIGZyb20gdGhlIHN1cmdpY2FsIHByb2NlZHVyZSAodGhlIG9wZXJhdGlvbiksIGFyZSBpbXBvcnRhbnQgY29udHJpYnV0aW5nIGZhY3RvcnMgdGhhdCBsZWFkIHRvIG5ldXJvLWluZmxhbW1hdGlvbiwgY29nbml0aXZlIGR5c2Z1bmN0aW9uIGFuZCBQT0QuIFRodXMsIGl0IGlzIHBvc3NpYmxlIHRoYXQgZXhvZ2Vub3VzIHN0ZXJvaWRzLCB3aGljaCByZWR1Y2UgaW5mbGFtbWF0aW9uLCBjYW4gcmVkdWNlIHRoZSByaXNrIG9mIGRldmVsb3BpbmcgUE9ELiBEZXhhbWV0aGFzb25lIChjb3J0aWNvc3Rlcm9pZCkgaGFzIGJlZW4gc2hvd24gdG8gcmVkdWNlIHRoZSByZWxlYXNlIG9mIGluZmxhbW1hdG9yeSBtYXJrZXJzIGFmdGVyIHN1cmdlcnkuIEhvd2V2ZXIsIHRoZXJlIGhhdmUgYmVlbiBubyBjbGluaWNhbCBzdHVkaWVzIHRvIGNvbmZpcm0gdGhlIHBvdGVudGlhbCBlZmZpY2FjeSBhbmQgc2FmZXR5IG9mIGRleGFtZXRoYXNvbmUgYXQgcHJldmVudGluZyBQT0QgaW4gdGhpcyBzcGVjaWZpYyBwb3B1bGF0aW9uLiBGdXJ0aGVybW9yZSwgdGhlcmUgYXJlIHVuaXF1ZSBmZWFzaWJpbGl0eSBpc3N1ZXMgaW4gY29uZHVjdGluZyBzdWNoIGEgc3R1ZHkgaW4gdGhpcyBwb3B1bGF0aW9uLiA8YnIgLz48YnIgLz5UaGUgbWFpbiBhaW1zIHdpdGggdGhpcyBmZWFzaWJpbGl0eSBzdHVkeSBhcmUgdG8gYXNzZXNzIHRoZSBzYWZldHkgYW5kIGZlYXNpYmlsaXR5IG9mIHN5c3RlbWljIGRleGFtZXRoYXNvbmUsIGFkbWluaXN0ZXJlZCBhcyBlYXJseSBhcyBwb3NzaWJsZSBhZnRlciBhcnJpdmFsIHRvIGhvc3BpdGFsLCBpbiBwYXRpZW50cyB3aXRoIGhpcCBmcmFjdHVyZXMsIHRvIGRldGVybWluZSB3aGV0aGVyIGEgbGFyZ2UgbXVsdGktY2VudHJlIHJhbmRvbWlzZWQgY29udHJvbGxlZCB0cmlhbCBzaG91bGQgYmUgY29uZHVjdGVkLiBQcm92aWRlZCBhY2NlcHRhYmxlIHNhZmV0eSBhbmQgZmVhc2liaWxpdHkgY2FuIGJlIGRlbW9uc3RyYXRlZCwgcmVzdWx0cyBvZiB0aGUgZmVhc2liaWxpdHkgc3R1ZHkgd2lsbCBiZSB1c2VkIHRvIGVzdGltYXRlIGltcG9ydGFudCBwYXJhbWV0ZXJzIHRoYXQgYXJlIG5lZWRlZCB0byBpbmZvcm0gdGhlIGRlc2lnbiBvZiBhIGxhcmdlciBtdWx0aS1jZW50cmUgcGhhc2UgSUlJIGNsaW5pY2FsIHRyaWFsLiBUaGUgbWFpbiBhaW0gb2YgdGhlIGZ1bGwgc3R1ZHkgaXMgdG8gaW52ZXN0aWdhdGUgdGhlIGVmZmVjdGl2ZW5lc3Mgb2YgZGV4YW1ldGhhc29uZSBvbiBkZWNyZWFzaW5nIGluY2lkZW5jZSwgc2V2ZXJpdHkgYW5kIGR1cmF0aW9uIG9mIFBPRC4gU2Vjb25kYXJ5IG91dGNvbWVzIGluY2x1ZGUgbGV2ZWxzIG9mIGluZmxhbW1hdG9yeSBjeXRva2luZXMgaW4gYmxvb2QgYW5kIGNlcmVicm9zcGluYWwgZmx1aWQuPGJyIC8%2BPGJyIC8%2BVGhpcyByYW5kb21pc2VkLCBwbGFjZWJvLWNvbnRyb2xsZWQsIGRvdWJsZS1ibGluZCBjbGluaWNhbCB0cmlhbCB3aWxsIGluY2x1ZGUgMTIwIHBhdGllbnRzIGFnZWQgNjUgYW5kIG92ZXIgYWRtaXR0ZWQgZm9yIGhpcCBmcmFjdHVyZS4gUGF0aWVudHMgd2lsbCBiZSByYW5kb21pc2VkIHRvIHJlY2VpdmUgZWl0aGVyIGRleGFtZXRoYXNvbmUgMjAgbWcgb3IgcGxhY2Viby4gVG8gZXhhbWluZSBzYWZldHksIGRydWcgcmVsYXRlZCBjb21wbGljYXRpb25zIHdpbGwgYmUgY29tcGFyZWQgYmV0d2VlbiB0aGUgaW50ZXJ2ZW50aW9uIGFuZCBjb250cm9sIGdyb3VwLiBGdXJ0aGVyIGZlYXNpYmlsaXR5IGlzc3VlcyAoZS5nLiBnZW5lcmF0aW5nIGEgcm9idXN0IGVzdGltYXRlIG9mIHRoZSBwb3RlbnRpYWwgZWZmZWN0IHNpemUsIGEgc3VzdGFpbmFibGUgcmVjcnVpdG1lbnQgcmF0ZSwgdGhlIHJlYWwgd29ybGQgaW5jaWRlbmNlIGluIG91ciBwb3B1bGF0aW9uIGV0Yy4pIHdpbGwgYmUgYXNzZXNzZWQuIFBPRCBpbmNpZGVuY2UgYW5kIGR1cmF0aW9uIHdpbGwgYmUgYXNzZXNzZWQgd2l0aCB0aGUgNEHigJlzIHRlc3QgKDRBVCksIG9uIHBvc3RvcGVyYXRpdmUgZGF5IDEsIDIgYW5kIDMuIFBhdGllbnRzIHdobyBkZXZlbG9wIFBPRCBkdXJpbmcgYW55IG9mIHRoZXNlIGRheXMgd2lsbCBiZSBhc3Nlc3NlZCBkYWlseSB1bnRpbCBpdCByZXNvbHZlcywgb3IgdW50aWwgZGlzY2hhcmdlZCBmcm9tIHRoZSBvcnRob3BhZWRpYyB3YXJkLiBTZXZlcml0eSBvZiBQT0Qgd2lsbCBiZSBhc3Nlc3NlZCB3aXRoIHRoZSBNZW1vcmlhbCBEZWxpcml1bSBBc3Nlc3NtZW50IFNjYWxlIChNREFTKS4gVGhlIGluZmxhbW1hdG9yeSByZXNwb25zZSB3aWxsIGJlIGFzc2Vzc2VkIGluIGEgc3ViIHNhbXBsZSBvZiBwYXRpZW50cyBieSBjb2xsZWN0aW5nIGJsb29kIHNhbXBsZXMgYW5kIG9uZSBjZXJlYnJvc3BpbmFsIGZsdWlkIChDU0YpIHNhbXBsZS4gVGhlc2Ugc2FtcGxlcyB3aWxsIGJlIGFuYWx5c2VkIGZvciBjeXRva2luZXMgYW5kIGJpb21hcmtlcnMgcHJldmlvdXNseSBhc3NvY2lhdGVkIHdpdGggZGVsaXJpdW0uPGJyIC8%2BOzY1IHllYXJzIGFuZCBvbGRlcjxiciAvPkZyYWN0dXJlZCBuZWNrIG9mIGZlbXVyPGJyIC8%2BPGJyIC8%2BCDY1IFllYXJzCSBObyBsaW1pdBZCb3RoIG1hbGVzIGFuZCBmZW1hbGVz8wFEZW1lbnRpYSBvciBhbnkgY29nbml0aXZlIGRlZmljaXQ8YnIgLz5EZWxpcml1bSBvbiBhZG1pc3Npb248YnIgLz5Vc2VkIHN0ZXJvaWRzIGluIHRoZSBsYXN0IDcgZGF5cyA8YnIgLz5TaWduaWZpY2FudCBhbmQgcG9vcmx5IGNvbnRyb2xsZWQgZGlhYmV0ZXMgKGdsdWNvc2UgPjEyIG1tb2wvbCBvbiBhZG1pc3Npb24pPGJyIC8%2BU3lzdGVtaWMgaW5mZWN0aW9uPGJyIC8%2BVW5hYmxlIHRvIHJlYWQgYW5kIHNwZWFrIEVuZ2xpc2gOZXhwYW5kYWJsZS1ib3gISG9zcGl0YWwfV2FpdGVtYXRhIERpc3RyaWN0IEhlYWx0aCBCb2FyZEtOb3J0aCBTaG9yZSBIb3NwaXRhbDxiciAvPlByaXZhdGUgQmFnIDkzNTAzPGJyIC8%2BTm9ydGggU2hvcmUsIEF1Y2tsYW5kIDA3NDALTmV3IFplYWxhbmQCRHINTWljaGFsIEtsdWdlcrABV2FpdGVtYXRhIERpc3RyaWN0IEhlYWx0aCBCb2FyZDxiciAvPk5vcnRoIFNob3JlIEhvc3BpdGFsPGJyIC8%2BRGVwYXJ0bWVudCBvZiBBbmFlc3RoZXNpYSBhbmQgUGVyaW9wZXJhdGl2ZSBtZWRpY2luZTxiciAvPlByaXZhdGUgQmFnIDkzLTUwMzxiciAvPk5vcnRoIFNob3JlIENpdHksIEF1Y2tsYW5kIDA3NDALTmV3IFplYWxhbmQNKzY0IDIxIDY4NDAyMiJtaWNoYWwua2x1Z2VyQHdhaXRlbWF0YWRoYi5nb3Z0Lm56BmhpZGRlbmQCDw8UKwAEDxYEHwVlHwNnZGRkPCsABAEAFgIfAmVkAhEPFgIfAWhkAhMPZBYGAgMPDxYCHw1lZGQCBQ8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3Mzg4MS5wZGY%2FdD0xNDFkZAIvDzwrAAQBAA8WAh8DZ2RkAg0PZBYWZg8VAhByZXN1bHRzLWhlYWRlci0xEVRyaWFsIGZyb20gQU5aQ1RSZAIBDw8WAh8NBT1%2BL1RyaWFsL1JlZ2lzdHJhdGlvbi9UcmlhbFJldmlldy5hc3B4P2lkPTM3Mzg1OCZpc1Jldmlldz10cnVlZGQCAw8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3Mzg1OC5wZGY%2FdD0xNDFkZAIHDw8WAh8CBQYzNzM4NThkZAIJDw8WAh8CBQ4xMjYxNzAwMTUzOTMyNWRkAgsPDxYCHwJlZGQCDQ8PFgIfAgUFRmFsc2VkZAIODxUtEHJlc3VsdHMtaGVhZGVyLTLJAURldmVsb3BtZW50IG9mIGEgc3RhbmRhcmRpc2VkIGFzc2Vzc21lbnQgdG9vbCAoU3lzdGVtYXRpYyBBc3Nlc3NtZW50IGZvciBCcmFpbiBJbmp1cnkgUmVoYWJpbGl0YXRpb24pIGZvciBwYXRpZW50cyBhZnRlciBhIHRyYXVtYXRpYyBicmFpbiBpbmp1cnkgb2YgYW5kIGl0cyBjb3JyZWxhdGlvbiB3aXRoIGZ1bmN0aW9uYWwgb3V0Y29tZSBtZWFzdXJlcwlDb21wbGV0ZWQHaW5mby1saQhBcHByb3ZlZAdpbmZvLWxpGlJldHJvc3BlY3RpdmVseSByZWdpc3RlcmVkMUhhcyB0aGUgdHJpYWwgYmVlbiB1cGRhdGVkIGluIHRoZSBsYXN0IDEyIG1vbnRocz8KVXAgdG8gZGF0ZQk3LzExLzIwMTcScmVzdWx0cy1oZWFkZXItMTAwCEFwcHJvdmVkClVwIHRvIGRhdGUTQUNUUk4xMjYxNzAwMTUzOTMyNRAwNyBOb3ZlbWJlciAyMDE3BHNob3csVHJhdW1hdGljIEJyYWluIEluanVyeSwgQ29nbml0aXZlIEltcGFpcm1lbnQEc2hvdwlBdXN0cmFsaWEEc2hvdw9OZXcgU291dGggV2FsZXMEc2hvdwRzaG93CUNvbXBsZXRlZANuL2EEc2hvdwhBcHByb3ZlZLYEVGhlIHB1cnBvc2Ugb2YgdGhpcyBzdHVkeSBpcyB0byBkZXRlcm1pbmUgd2hldGhlciBiYXNlbGluZSBjb2duaXRpdmUgc2NyZWVuaW5nIHRlc3RzLCBNb250cmVhbCBDb2duaXRpdmUgQXNzZXNzbWVudCAoTW9DQSksIEFkZGVuYnJvb2tl4oCZcyBDb2duaXRpdmUgQXNzZXNzbWVudC1JSUkgKEFDRS1JSUkpLCBPcmFsIFRyYWlsIE1ha2luZyBUZXN0LUIgKG9UTVQtQiksIHJlbGlhYmxlIERpZ2l0IFNwYW4gcHJlZGljdCBmdW5jdGlvbmFsIG91dGNvbWVzIGluIHBhdGllbnRzIGZvbGxvd2luZyBhIHRyYXVtYXRpYyBicmFpbiBpbmp1cnkgYW5kICB3aGV0aGVyIHRoZXkgY29ycmVsYXRlIHdpdGggbmV1cm9wc3ljaG9sb2dpY2FsIHRlc3RpbmcuICBJbiBhZGRpdGlvbiwgdGhlIHN0dWR5IGFpbWVkIHRvIGRldGVybWluZSB0aGUgYWNjdXJhY3kgYW5kIHZhbGlkaXR5IG9mIGJhc2VsaW5lIGNvZ25pdGl2ZSBzY3JlZW5pbmcgdGVzdHMgaW4gdGhlIGRldGVjdGlvbiBvZiB0aG9zZSBwYXRpZW50cyB3aXRoIGNvZ25pdGl2ZSBpbXBhaXJtZW50IG9uIG5ldXJvcHN5Y2hvbG9naWNhbCB0ZXN0aW5nLiD9AkFnZWQgb3ZlciAxOC02NSB5ZWFycyBvZiBhZ2UsIGFibGUgdG8gY29uc2VudDsgd2VyZSB3aXRoaW4gNiBtb250aHMgb2YgYSBuZXcgdHJhdW1hdGljIGJyYWluIGluanVyeSBvZiBzdWZmaWNpZW50IHNldmVyaXR5IHRvIHJlcXVpcmUgcmVmZXJyYWwgdG8gQnJhaW4gSW5qdXJ5IE91dHBhdGllbnQgQ2xpbmljIG9yIGFkbWlzc2lvbiB0byBCcmFpbiBJbmp1cnkgVW5pdCBmb3IgaW5wYXRpZW50IHJlaGFiaWxpdGF0aW9uLiBBIFRCSSBpcyBkZWZpbmVkIGFzIGRvY3VtZW50ZWQgaW5qdXJ5IHdpdGggYWJub3JtYWwgR0NTIGF0IHNjZW5lIG9yIEEmRSwgYSBtZWFzdXJhYmxlIFBUQSBvZiBhbnkgZHVyYXRpb24gb3IgYWJub3JtYWwgbmV3IGZpbmRpbmdzIG9uIENUL01SSQgxOCBZZWFycwg2NSBZZWFycxZCb3RoIG1hbGVzIGFuZCBmZW1hbGVzNUluYWJpbGl0eSB0byBjb25zZW50PGJyIC8%2BU2V2ZXJlIGxhbmd1YWdlIGltcGFpcm1lbnRzDmV4cGFuZGFibGUtYm94CEhvc3BpdGFsC1JveWFsIFJlaGFiK2MvbyAyMzUgTW9ycmlzb24gUmQgUnlkZSBOU1cgQXVzdHJhbGlhIDIxMTIJQXVzdHJhbGlhAkRyCFRyYW0gQnVpMmMvbyBSb3lhbCBSZWhhYjxiciAvPjIzNSBNb3JyaXNvbiBSZCBSeWRlIE5TVyAyMTEyCUF1c3RyYWxpYQ4rNjEgMiA5ODA4OTIyMhp0cmFtLmJ1aUByb3lhbHJlaGFiLmNvbS5hdQZoaWRkZW5kAg8PFCsABA8WBB8FZR8DZ2RkZDwrAAQBABYCHwJlZAIRDxYCHwFoZAITD2QWBgIDDw8WAh8NZWRkAgUPDxYCHw0FJi9UcmlhbFBkZi9UcmlhbFJldmlldy0zNzM4NTgucGRmP3Q9MTQxZGQCLw88KwAEAQAPFgIfA2dkZAIPD2QWFmYPFQIQcmVzdWx0cy1oZWFkZXItMRFUcmlhbCBmcm9tIEFOWkNUUmQCAQ8PFgIfDQU9fi9UcmlhbC9SZWdpc3RyYXRpb24vVHJpYWxSZXZpZXcuYXNweD9pZD0zNzM4NTUmaXNSZXZpZXc9dHJ1ZWRkAgMPDxYCHw0FJi9UcmlhbFBkZi9UcmlhbFJldmlldy0zNzM4NTUucGRmP3Q9MTQxZGQCBw8PFgIfAgUGMzczODU1ZGQCCQ8PFgIfAgUOMTI2MTcwMDE1MzgzMzZkZAILDw8WAh8CZWRkAg0PDxYCHwIFBUZhbHNlZGQCDg8VLRByZXN1bHRzLWhlYWRlci0ykAFBIHJhbmRvbWlzZWQgY29udHJvbGxlZCB0cmlhbCB0byBjb21wYXJlIHRoZSBlZmZpY2FjeSBvZiBvbmxpbmUgQ0JUIHZlcnN1cyBtaW5kZnVsbmVzcyBmb3IgcmVkdWNpbmcgc3ltcHRvbXMgb2YgZGVwcmVzc2lvbiBhbmQgYW54aWV0eSBpbiBhZHVsdHMSTm90IHlldCByZWNydWl0aW5nB2luZm8tbGkIQXBwcm92ZWQHaW5mby1saRhQcm9zcGVjdGl2ZWx5IHJlZ2lzdGVyZWQxSGFzIHRoZSB0cmlhbCBiZWVuIHVwZGF0ZWQgaW4gdGhlIGxhc3QgMTIgbW9udGhzPwpVcCB0byBkYXRlCTYvMTEvMjAxNxJyZXN1bHRzLWhlYWRlci0xMDAIQXBwcm92ZWQKVXAgdG8gZGF0ZRNBQ1RSTjEyNjE3MDAxNTM4MzM2EDA2IE5vdmVtYmVyIDIwMTcEc2hvd4wBTWFqb3IgRGVwcmVzc2l2ZSBEaXNvcmRlciwgR2VuZXJhbGlzZWQgYW54aWV0eSBkaXNvcmRlciwgU29jaWFsIGFueGlldHkgZGlzb3JkZXIsIFBhbmljIGRpc29yZGVyLCBBZ29yYXBob2JpYSwgT2JzZXNzaXZlIENvbXB1bHNpdmUgRGlzb3JkZXIEc2hvdwlBdXN0cmFsaWEEc2hvd4UBQXVzdHJhbGlhbiBDYXBpdGFsIFRlcnJpdG9yeSwgTmV3IFNvdXRoIFdhbGVzLCBOb3J0aGVybiBUZXJyaXRvcnksIFF1ZWVuc2xhbmQsIFNvdXRoIEF1c3RyYWxpYSwgVGFzbWFuaWEsIFdlc3Rlcm4gQXVzdHJhbGlhLCBWaWN0b3JpYQRzaG93BHNob3cSTm90IHlldCByZWNydWl0aW5nEDIwIE5vdmVtYmVyIDIwMTcEc2hvdwhBcHByb3ZlZLACVGhpcyByYW5kb21pc2VkIGNvbnRyb2xsZWQgdHJpYWwgc2Vla3MgdG8gY29tcGFyZSB0aGUgYWRoZXJlbmNlIHJhdGVzIGFuZCBlZmZpY2FjeSBvZiBpbnRlcm5ldC1kZWxpdmVyZWQgY29nbml0aXZlIGJlaGF2aW91cmFsIHRoZXJhcHkgYW5kIGludGVybmV0LWRlbGl2ZXJlZCBtaW5kZnVsbmVzcyBza2lsbHMgdHJhaW5pbmcgZm9yIHRoZSB0cmVhdG1lbnQgb2YgYWR1bHQgZGVwcmVzc2lvbiBhbmQgYW54aWV0eSBkaXNvcmRlcnMgaW1tZWRpYXRlbHkgZm9sbG93aW5nIHRyZWF0bWVudCBhbmQgYXQgNi1tb250aCBmb2xsb3ctdXAuIJkGKiBTZWxmLWlkZW50aWZpZWQgYXMgZXhwZXJpZW5jaW5nIGRlcHJlc3Npb24gYW5kL29yIGFueGlldHkuPGJyIC8%2BKiBNZWV0IGNyaXRlcmlhIGZvciBvbmUgb3IgbW9yZSBvZiB0aGUgZm9sbG93aW5nIGRpYWdub3NlczogTWFqb3IgRGVwcmVzc2l2ZSBEaXNwcmRlciAoTUREKSwgR2VuZXJhbGl6ZWQgQW54aWV0eSBEaXNvcmRlciAoR0FEKSwgU29jaWFsIEFueGlldHkgRGlzb3JkZXIgKFNBRCksIFBhbmljIERpc29yZGVyIChQRCksIEFnb3JhcGhvYmlhIChBRyksIG9yIE9ic2Vzc2l2ZS1Db21wdWxzaXZlIERpc29yZGVyIChPQ0QpIGFjY29yZGluZyB0byB0aGUgQURJUy01IGZvciBEU00tNS48YnIgLz4qIEF1c3RyYWxpYW4gcmVzaWRlbnQgc3RhdHVzPGJyIC8%2BKiBBdCBsZWFzdCAxOCB5ZWFycyBvZiBhZ2U8YnIgLz4qIEFjY2VzcyB0byBhIGNvbXB1dGVyLCBwcmludGVyLCBhbmQgdGhlIGludGVybmV0PGJyIC8%2BKiBJZiB0YWtpbmcgbWVkaWNhdGlvbiwgbXVzdCBoYXZlIGJlZW4gdGFraW5nIHRoZSBzYW1lIGRvc2UgZm9yIGF0IGxlYXN0IDIgbW9udGhzIGFuZCBub3QgaW50ZW5kIHRvIGNoYW5nZSB0aGF0IGRvc2UgZHVyaW5nIHRoZSBjb3Vyc2Ugb2YgdGhlIHByb2dyYW0uPGJyIC8%2BKiBQcmVwYXJlZCB0byBwcm92aWRlIG5hbWUsIHBob25lIG51bWJlciwgYW5kIGFkZHJlc3MsIGFuZCB0byBwcm92aWRlIHRoZSBuYW1lIGFuZCBwaG9uZSBudW1iZXIgb2YgYSBsb2NhbCBnZW5lcmFsIHByYWN0aXRpb25lci48YnIgLz4qIFdpbGxpbmcgdG8gcHJvdmlkZSBpbmZvcm1lZCBjb25zZW50LggxOCBZZWFycwkgTm8gbGltaXQWQm90aCBtYWxlcyBhbmQgZmVtYWxlc7oHIERvZXMgbm90IG1lZXQgZGlhZ25vc3RpYyBjcml0ZXJpYSBmb3IgYW4gYW54aWV0eSBvciBkZXByZXNzaXZlIGRpc29yZGVyLjxiciAvPi0gQ3VycmVudGx5IGV4cGVyaWVuY2luZyBzZXZlcmUgZGVwcmVzc2lvbiBzeW1wdG9tcyAoc2NvcmUgb2YgMjMgb3IgYWJvdmUgb24gdGhlIFBIUS05KS48YnIgLz4tIFJlZ3VsYXJseSB1c2luZyBpbGxpY2l0IGRydWdzIG9yIHJlZ3VsYXJseSBjb25zdW1pbmcgbW9yZSB0aGFuIHRocmVlIHN0YW5kYXJkIGRyaW5rcyBwZXIgZGF5PGJyIC8%2BLSBDdXJyZW50IHJlZ3VsYXIgdXNlIG9mIGJlbnpvZGlhemVwaW5lczxiciAvPi0gQ3VycmVudCB1c2Ugb2YgYXR5cGljYWwgYW50aS1wc3ljaG90aWNzPGJyIC8%2BLSBDdXJyZW50bHkgZXhwZXJpZW5jaW5nIGEgcHN5Y2hvdGljIG1lbnRhbCBpbGxuZXNzIG9yIGJpcG9sYXIgZGlzb3JkZXI8YnIgLz4tIENvbXBsZXRlZCBhbiBvbmxpbmUgcHJvZ3JhbSBmb3IgZGVwcmVzaXNvbiBhbmQvb3IgYW54aWV0eSBpbiB0aGUgcGFzdCB5ZWFyPGJyIC8%2BLSBDdXJyZW50IFBvc3QgdHJhdW1hdGljIHN0cmVzcyBkaXNvcmRlciAoUFRTRCk8YnIgLz4tIEN1cnJlbnRseSBzdWljaWRhbCBhbmQvb3Igc2V2ZXJlIHN5bXB0b21zIG9mIHN1aWNpZGFsIGlkZWF0aW9uIChkZWZpbmVkIGFzIHJlc3BvbmRpbmcgMyB0byB0aGUgUEhRLTkgcXVlc3Rpb24gOSBpdGVtIHRoYXQgYXNzZXNzZXMgdGhlIGZyZXF1ZW5jeSBvZiBzdWljaWRhbCBpZGVhdGlvbiBvdmVyIHRoZSBwYXN0IGZvcnRuaWdodCkuPGJyIC8%2BLVRob3NlIHNjb3JpbmcgMSBvciAyIG9uIHRoZSBQYXRpZW50IEhlYWx0aCBRdWVzdGlvbm5haXJlLTkgSXRlbSAoUEhRLTkpIGl0ZW0gOSB3aWxsIHJlcXVpcmUgcmlzayBhc3Nlc3NtZW50IHdpdGggdGhlIHJlc3BvbnNpYmxlIGNsaW5pY2lhbiBiZWZvcmUgYmVpbmcgYWRtaXR0ZWQgaW50byB0aGUgc3R1ZHkuDmV4cGFuZGFibGUtYm94ClVuaXZlcnNpdHkLVU5TVyBTeWRuZXlSTWF0aGV3cyBidWlsZGluZzxiciAvPlVOU1cgU3lkbmV5PGJyIC8%2BS2Vuc2luZ3RvbiBDYW1wdXM8YnIgLz5OU1csIEF1c3RyYWxpYSwgMjA1MglBdXN0cmFsaWECRHIKSmlsbCBOZXdieWFMZXZlbCAxMywgTWF0aGV3cyBCdWlsZGluZyw8YnIgLz5UaGUgVW5pdmVyc2l0eSBvZiBOZXcgU291dGggV2FsZXM8YnIgLz5TeWRuZXkgTlNXIDIwNTIgQXVzdHJhbGlhCUF1c3RyYWxpYQwrNjE0MDM3NTkxMjITai5uZXdieUB1bnN3LmVkdS5hdQZoaWRkZW5kAg8PFCsABA8WBB8FZR8DZ2RkZDwrAAQBABYCHwJlZAIRDxYCHwFoZAITD2QWBgIDDw8WAh8NZWRkAgUPDxYCHw0FJi9UcmlhbFBkZi9UcmlhbFJldmlldy0zNzM4NTUucGRmP3Q9MTQxZGQCLw88KwAEAQAPFgIfA2dkZAIRD2QWFmYPFQIQcmVzdWx0cy1oZWFkZXItMRFUcmlhbCBmcm9tIEFOWkNUUmQCAQ8PFgIfDQU9fi9UcmlhbC9SZWdpc3RyYXRpb24vVHJpYWxSZXZpZXcuYXNweD9pZD0zNzM5MDMmaXNSZXZpZXc9dHJ1ZWRkAgMPDxYCHw0FJi9UcmlhbFBkZi9UcmlhbFJldmlldy0zNzM5MDMucGRmP3Q9MTQxZGQCBw8PFgIfAgUGMzczOTAzZGQCCQ8PFgIfAgUOMTI2MTcwMDE1MzczNDdkZAILDw8WAh8CZWRkAg0PDxYCHwIFBUZhbHNlZGQCDg8VLRByZXN1bHRzLWhlYWRlci0yUk1lbGF0b25pbiB0byByZWR1Y2Ugc2VkYXRpdmUgdXNlIGluIG9sZGVyIGdlbmVyYWwgbWVkaWNhbCBpbnBhdGllbnRzIHdpdGggZGVsaXJpdW0STm90IHlldCByZWNydWl0aW5nB2luZm8tbGkIQXBwcm92ZWQHaW5mby1saRhQcm9zcGVjdGl2ZWx5IHJlZ2lzdGVyZWQxSGFzIHRoZSB0cmlhbCBiZWVuIHVwZGF0ZWQgaW4gdGhlIGxhc3QgMTIgbW9udGhzPwpVcCB0byBkYXRlCTYvMTEvMjAxNxJyZXN1bHRzLWhlYWRlci0xMDAIQXBwcm92ZWQKVXAgdG8gZGF0ZRNBQ1RSTjEyNjE3MDAxNTM3MzQ3EDA2IE5vdmVtYmVyIDIwMTcEc2hvdwhEZWxpcml1bQRzaG93CUF1c3RyYWxpYQRzaG93CFZpY3RvcmlhBHNob3cEc2hvdxJOb3QgeWV0IHJlY3J1aXRpbmcQMDQgRGVjZW1iZXIgMjAxNwRzaG93CEFwcHJvdmVkrwpEZWxpcml1bSBpcyBhbiBhY3V0ZSBjb25mdXNpb25hbCBzdGF0ZSB0aGF0IGlzIGEgbWVkaWNhbCBlbWVyZ2VuY3kgYW5kIGlzIGFzc29jaWF0ZWQgd2l0aCBzaWduaWZpY2FudCBtb3JiaWRpdHkgYW5kIG1vcnRhbGl0eS4gRGVsaXJpdW0gY2FuIG9mdGVuIGRpc3J1cHQgdGhlIHRpbWVzIHdoZW4gc29tZW9uZSBpcyBzbGVlcGluZyBvciBhd2FrZS4gQWx0aG91Z2ggdGhlIG1haW4gbWFuYWdlbWVudCBvZiBkZWxpcml1bSBpcyBiYXNlZCBvbiB0cmVhdG1lbnQgb2YgdGhlIHVuZGVybHlpbmcgY2F1c2VzLCBzcGVjaWZpYyBtZWRpY2F0aW9ucyBhcmUgc29tZXRpbWVzIG5lY2Vzc2FyeSB0byBtYW5hZ2UgZGVsaXJpdW0tcmVsYXRlZCBiZWhhdmlvdXJzLiBUaGVzZSBpbnRlcnZlbnRpb25zIGluY2x1ZGUgdGhlIHVzZSBvZiBzZWRhdGluZyBtZWRpY2F0aW9ucyB0aGF0IGFyZSBhc3NvY2lhdGVkIHdpdGggYW4gaW5jcmVhc2VkIHJpc2sgb2Ygc3Vic3RhbnRpYWwgaGFybS4gPGJyIC8%2BPGJyIC8%2BTWVsYXRvbmluIGlzIGEgbmF0dXJhbC1vY2N1cnJpbmcgc3Vic3RhbmNlIG1hZGUgaW4gdGhlIGJyYWluIHRoYXQgaGVscHMgcmVndWxhdGUgdGhlIHRpbWluZyBvZiBzbGVlcCBhbmQgd2FrZWZ1bG5lc3MuIEl0IGlzIGEgd2VsbC1lc3RhYmxpc2hlZCB0cmVhdG1lbnQgZm9yIGluc29tbmlhLCBoYXMgYSBnb29kIHNhZmV0eSBwcm9maWxlIGFuZCBoYXMgYSBwb3RlbnRpYWwgdGhlb3JldGljYWwgYmVuZWZpdCBpbiB0aGUgbWFuYWdlbWVudCBvZiBkZWxpcml1bSBieSBjb3JyZWN0aW5nIHRoZSBzbGVlcC13YWtlIGN5Y2xlIGRpc3J1cHRpb24gY29tbW9ubHkgc2VlbiBpbiBkZWxpcml1bS4gQWx0aG91Z2ggaXQgaGFzIGJlZW4gdXNlZCB0byBtYW5hZ2UgZGVsaXJpdW0gaW4gaG9zcGl0YWxzIGFyb3VuZCB0aGUgd29ybGQgZm9yIHNvbWUgeWVhcnMsIHRoZXJlIGhhdmUgYmVlbiBubyBzY2llbnRpZmljIHRyaWFscyB0byBleGFtaW5lIGl0cyBlZmZlY3RpdmVuZXNzLiBNZWxhdG9uaW4gaXMgYXBwcm92ZWQgaW4gQXVzdHJhbGlhIHRvIHRyZWF0IGluc29tbmlhLiBIb3dldmVyIGl0IGlzIG5vdCBhcHByb3ZlZCB0byBtYW5hZ2UgZGVsaXJpdW0uIFRoZXJlZm9yZSwgaXQgaXMgYW4gZXhwZXJpbWVudGFsIHRyZWF0bWVudCBmb3IgZGVsaXJpdW0uIFRoaXMgbWVhbnMgdGhhdCBpdCBtdXN0IGJlIHRlc3RlZCB0byBzZWUgaWYgaXQgaXMgYW4gZWZmZWN0aXZlIHRyZWF0bWVudCBmb3IgZGVsaXJpdW0uPGJyIC8%2BPGJyIC8%2BVGhpcyBzdHVkeSBhaW1zIHRvIGV4YW1pbmUgdGhlIGVmZmVjdCBvZiBtZWxhdG9uaW4gb24gZGVsaXJpdW0uPGJyIC8%2BXkRpYWdub3NpcyBvZiBkZWxpcml1bSAocmVnYXJkbGVzcyBvZiBjYXVzZSkgYWRtaXR0ZWQgdG8gZ2VuZXJhbCBtZWRpY2luZSB1bml0IGF0IEFsZnJlZCBIZWFsdGgINjUgWWVhcnMJIE5vIGxpbWl0FkJvdGggbWFsZXMgYW5kIGZlbWFsZXOYAUN1cnJlbnRseSB1c2Ugb2YgbWVsYXRvbmluPGJyIC8%2BQ3VycmVudCB1c2Ugb2YgYW50aXBzeWNob3RpYyBvciBiZW56b2RpYXplcGluZSBtZWRpY2F0aW9uPGJyIC8%2BQWxsZXJneSB0byBtZWxhdG9uaW48YnIgLz5VbmFibGUgdG8gc3dhbGxvdyBjYXBzdWxlPGJyIC8%2BDmV4cGFuZGFibGUtYm94CEhvc3BpdGFsDUFsZnJlZCBIZWFsdGg1QWxmcmVkIEhlYWx0aCwgNTUgQ29tbWVyY2lhbCBSb2FkLCBNZWxib3VybmUgVklDIDMwMDQJQXVzdHJhbGlhAkRyC0NocmlzIE1vcmFuP0FsZnJlZCBIZWFsdGgsPGJyIC8%2BNTUgQ29tbWVyY2lhbCBSb2FkLDxiciAvPk1lbGJvdXJuZSBWSUMgMzAwNAlBdXN0cmFsaWEOKzYxKDMpOTA3NjIwMDAWY2hyaXMubW9yYW5AbW9uYXNoLmVkdQZoaWRkZW5kAg8PFCsABA8WBB8FZR8DZ2RkZDwrAAQBABYCHwJlZAIRDxYCHwFoZAITD2QWBgIDDw8WAh8NZWRkAgUPDxYCHw0FJi9UcmlhbFBkZi9UcmlhbFJldmlldy0zNzM5MDMucGRmP3Q9MTQxZGQCLw88KwAEAQAPFgIfA2dkZAITD2QWFmYPFQIQcmVzdWx0cy1oZWFkZXItMRFUcmlhbCBmcm9tIEFOWkNUUmQCAQ8PFgIfDQU9fi9UcmlhbC9SZWdpc3RyYXRpb24vVHJpYWxSZXZpZXcuYXNweD9pZD0zNzM4NTAmaXNSZXZpZXc9dHJ1ZWRkAgMPDxYCHw0FJi9UcmlhbFBkZi9UcmlhbFJldmlldy0zNzM4NTAucGRmP3Q9MTQxZGQCBw8PFgIfAgUGMzczODUwZGQCCQ8PFgIfAgUOMTI2MTcwMDE1MzUzNjlkZAILDw8WAh8CZWRkAg0PDxYCHwIFBUZhbHNlZGQCDg8VLRByZXN1bHRzLWhlYWRlci0ynwFDb21wYXJpc29uIG9mIHRoZSBpbmNpZGVuY2Ugb2YgZGVoeWRyYXRpb24gYW5kIGRpdXJldGljIHVzZSBhbW9uZyBib3RoIGZyYWlsIG9sZGVyIGFuZCByb2J1c3Qgb2xkZXIgcGF0aWVudHMgd2hvIHByZXNlbnQgdG8gdGhlIEVtZXJnZW5jeSBEZXBhcnRtZW50IHdpdGggZmFsbHMJQ29tcGxldGVkB2luZm8tbGkIQXBwcm92ZWQHaW5mby1saRpSZXRyb3NwZWN0aXZlbHkgcmVnaXN0ZXJlZDFIYXMgdGhlIHRyaWFsIGJlZW4gdXBkYXRlZCBpbiB0aGUgbGFzdCAxMiBtb250aHM%2FClVwIHRvIGRhdGUJNi8xMS8yMDE3EnJlc3VsdHMtaGVhZGVyLTEwMAhBcHByb3ZlZApVcCB0byBkYXRlE0FDVFJOMTI2MTcwMDE1MzUzNjkQMDYgTm92ZW1iZXIgMjAxNwRzaG93JHBvbHlwaGFybWFjeSwgYWdlaW5nLCBmcmFpbHR5LCBmYWxscwRzaG93CUF1c3RyYWxpYQRzaG93D05ldyBTb3V0aCBXYWxlcwRzaG93BHNob3cJQ29tcGxldGVkA24vYQRzaG93CEFwcHJvdmVkjQlJbnRyb2R1Y3Rpb246IFRoaXMgc3R1ZHkgYWltZWQgdG8gbWVhc3VyZSB0aGUgcHJldmFsZW5jZSBvZiBkZWh5ZHJhdGlvbiBhbmQgZGl1cmV0aWMgdXNlIGluIG9sZGVyIHBhdGllbnRzIHByZXNlbnRpbmcgdG8gdGhlIEVtZXJnZW5jeSBEZXBhcnRtZW50IG9mIGEgbGFyZ2UgbWV0cm9wb2xpdGFuIGhvc3BpdGFsIHdpdGggZmFsbHMuIDxiciAvPk1hdGVyaWFscyBhbmQgTWV0aG9kczogU3ViamVjdHMgd2VyZSByZWNydWl0ZWQgYXMgYSBjb252ZW5pZW5jZSBzYW1wbGUgZnJvbSBhbGwgcGF0aWVudHMgYWdlZCBvdmVyIHNpeHR5IHllYXJzIHByZXNlbnRpbmcgd2l0aCBmYWxscy4gVGhlIG1lYW4gYWdlIG9mIHRoZSAyMDQgcmVjcnVpdHMgd2FzIDgxIHllYXJzIGFuZCA2NSUgd2VyZSBmZW1hbGUuIERlbW9ncmFwaGljLCBjbGluaWNhbCwgbWVkaWNhdGlvbiBhbmQgZmFsbHMgaW5mb3JtYXRpb24gd2VyZSBjb2xsZWN0ZWQgb24gYWRtaXNzaW9uIGFuZCB0aGUgc3ViamVjdHMgd2VyZSBjbGFzc2lmaWVkIGFzIGVpdGhlciByb2J1c3QgKDEwMSBzdWJqZWN0cykgb3IgZnJhaWwgKDEwMyBzdWJqZWN0cykgdXRpbGlzaW5nIHRoZSBFZG1vbnRvbiBGcmFpbCBTY2FsZS4gPGJyIC8%2BUmVzdWx0cyBhbmQgQ29uY2x1c2lvbnM6IENvbXBhcmVkIHRvIHJvYnVzdCBzdWJqZWN0cywgZnJhaWwgZmFsbGVycyB3ZXJlIG1vcmUgbGlrZWx5IHRvIHVzZSBkaXVyZXRpY3MgKDM0JSBmcmFpbCwgMTQlIHJvYnVzdCwgcD0wLjAwMSksIHRvIGJlIGRlaHlkcmF0ZWQgKDIwJSBmcmFpbCwgNyUgcm9idXN0LCBwPTAuMDAxKSBhbmQgdG8gaGF2ZSBib3RoIGRpdXJldGljIHVzZSBhbmQgZGVoeWRyYXRpb24gKDEzJSwgMyUgcm9idXN0LCBwPTAuMDEpLiAgVGhlc2UgZmluZGluZ3Mgc3VnZ2VzdCB0aGF0IGRlaHlkcmF0aW9uLCBwb3RlbnRpYWxseSBleGFjZXJiYXRlZCBieSBkaXVyZXRpYyB1c2UsIGlzIGNvbW1vbiBhbW9uZ3N0IG9sZGVyIHBhdGllbnRzIGFkbWl0dGVkIGFmdGVyIGEgZmFsbCwgcGFydGljdWxhcmx5IGFtb25nc3QgdGhlIGZyYWlsLiAgVGhlc2UgdHdvIGZhY3RvcnMsIGluIHRoZSBmcmFpbCBlbGRlcmx5IGluIHBhcnRpY3VsYXIsIG1lcml0IGZ1cnRoZXIgc3R1ZHkgYXMgcG90ZW50aWFsbHkgbW9kaWZpYWJsZSBjYXVzZXMgb2YgZmFsbHMuPGJyIC8%2BbmFib3ZlIDYwIHllYXJzIG9mIGFnZSBhbmQgaGF2ZSBwcmVzZW50ZWQgdG8gdGhlIEVEIGZvbGxvd2luZyBhIGZhbGw6IGFibGUgYW5kIHdpbGxpbmcgdG8gZ2l2ZSBpbmZvcm1lZCBjb25zZW50CDYwIFllYXJzCSBObyBsaW1pdBZCb3RoIG1hbGVzIGFuZCBmZW1hbGVzoAFCZWxvdyBhZ2Ugb2YgNjAgeWVhcnM6IHByZXNlbnRpbmcgdG8gRUQgZm9yIGEgcmVhc29uIG90aGVyIHRoYW4gYSBmYWxsOiB1bmFibGUgb3IgdW53aWxsaW5nIHRvIGdpdmUgaW5mb3JtZWQgY29uc2VudCAoaW5jbHVkaW5nIGluIHRoZSBjYXNlIG9mIHNlcmlvdXMgaW5qdXJpZXMpDmV4cGFuZGFibGUtYm94CkluZGl2aWR1YWwQQWxleGFuZGVyIEJlbm5ldEpSb3lhbCBOb3J0aCBTaG9yZSBIb3NwaXRhbDxiciAvPlBhY2lmaWMgSGlnaHdheTxiciAvPlN0IExlb25hcmRzLCBOU1cgMjA2NQlBdXN0cmFsaWEGQS9Qcm9mDE1hcmsgR2lsbGV0dGhFbWVyZ2VuY3kgRGVwYXJ0bWVudDxiciAvPlJveWFsIE5vcnRoIFNob3JlIEhvc3BpdGFsPGJyIC8%2BUGFjaWZpYyBIaWdod2F5PGJyIC8%2BU3QgTGVvbmFyZHM8YnIgLz5OU1cgMjA2NQlBdXN0cmFsaWEMKzYxMjk5MDY4MTIzGG1naWxsZXR0QG1lZC51c3lkLmVkdS5hdQZoaWRkZW5kAg8PFCsABA8WBB8FZR8DZ2RkZDwrAAQBABYCHwJlZAIRDxYCHwFoZAITD2QWBgIDDw8WAh8NZWRkAgUPDxYCHw0FJi9UcmlhbFBkZi9UcmlhbFJldmlldy0zNzM4NTAucGRmP3Q9MTQxZGQCLw88KwAEAQAPFgIfA2dkZAIVD2QWFmYPFQIQcmVzdWx0cy1oZWFkZXItMRFUcmlhbCBmcm9tIEFOWkNUUmQCAQ8PFgIfDQU9fi9UcmlhbC9SZWdpc3RyYXRpb24vVHJpYWxSZXZpZXcuYXNweD9pZD0zNzM4NjUmaXNSZXZpZXc9dHJ1ZWRkAgMPDxYCHw0FJi9UcmlhbFBkZi9UcmlhbFJldmlldy0zNzM4NjUucGRmP3Q9MTQxZGQCBw8PFgIfAgUGMzczODY1ZGQCCQ8PFgIfAgUOMTI2MTcwMDE1MzMzODFkZAILDw8WAh8CZWRkAg0PDxYCHwIFBUZhbHNlZGQCDg8VLRByZXN1bHRzLWhlYWRlci0yhwFDb21iaW5hdGlvbiB1bHRyYS1sb3cgZG9zZSBibG9vZCBwcmVzc3VyZSBsb3dlcmluZyB0cmVhdG1lbnQgZm9yIHBhdGllbnRzIHdpdGggdW50cmVhdGVkIGh5cGVydGVuc2lvbjogRXZhbHVhdGlvbiBvZiBzaG9ydC10ZXJtIHNhZmV0eS4STm90IHlldCByZWNydWl0aW5nB2luZm8tbGkRTm90IHlldCBzdWJtaXR0ZWQHaW5mby1saStQcm9zcGVjdGl2ZWx5IHJlZ2lzdGVyZWQ8YnIgLz4ocHJvdmlzaW9uYWwpMUhhcyB0aGUgdHJpYWwgYmVlbiB1cGRhdGVkIGluIHRoZSBsYXN0IDEyIG1vbnRocz8KVXAgdG8gZGF0ZQk2LzExLzIwMTcScmVzdWx0cy1oZWFkZXItMTAwEU5vdCB5ZXQgc3VibWl0dGVkClVwIHRvIGRhdGUUQUNUUk4xMjYxNzAwMTUzMzM4MXAQMDYgTm92ZW1iZXIgMjAxNwRzaG93DEh5cGVydGVuc2lvbgRzaG93CUF1c3RyYWxpYQRzaG93D05ldyBTb3V0aCBXYWxlcwRzaG93BHNob3cSTm90IHlldCByZWNydWl0aW5nEDAxIERlY2VtYmVyIDIwMTcEc2hvdxFOb3QgeWV0IHN1Ym1pdHRlZMkGVGhpcyBpcyBhIHJhbmRvbWlzZWQsIHBhcmFsbGVsLCBvcGVuLWxhYmVsIHN0dWR5IGZvciBwYXRpZW50cyB3aXRoIGh5cGVydGVuc2lvbiwgY29uZHVjdGVkIGJ5IEdlb3JnZSBNZWRpY2luZXMuIEV0aGljYWwgYXBwcm92YWwgd2lsbCBiZSBzb3VnaHQgaW4gTm92ZW1iZXIgMjAxNywgc2hvcnRseSBmb2xsb3dlZCBieSByZWd1bGF0b3J5IGFja25vd2xlZGdlbWVudC4gPGJyIC8%2BPGJyIC8%2BVGhpcyByZXNlYXJjaCBwcm9qZWN0IGFpbXMgdG8gdW5kZXJzdGFuZCB3aGV0aGVyIGEgc2luZ2xlIHBpbGwgY29udGFpbmluZyAzIHR5cGVzIG9mIGJsb29kIHByZXNzdXJlIGxvd2VyaW5nIG1lZGljYXRpb25zIGF0IHF1YXJ0ZXItc3RhbmRhcmQgZG9zZXMgd2lsbCBtb3JlIGVmZmVjdGl2ZWx5IGxvd2VyIGJsb29kIHByZXNzdXJlIGFuZCBoYXZlIGZld2VyIHNpZGUgZWZmZWN0cyBjb21wYXJlZCB0byBhIHN0YW5kYXJkIGRvc2Ugb2YgYSBzaW5nbGUgdHlwZSBvZiBoeXBlcnRlbnNpdmUgbWVkaWNhdGlvbi48YnIgLz48YnIgLz5UaGlzIHJlc2VhcmNoIHByb2plY3Qgd2lsbCBhc3Nlc3MgdHdvIGRpZmZlcmVudCBwaWxsIGNvbWJpbmF0aW9ucyBmb3IgdGhlIHRyZWF0bWVudCBvZiBoaWdoIGJsb29kIHByZXNzdXJlLCB0aGV5IGFyZTo8YnIgLz48YnIgLz7igKIJVWx0cmEtbG93IGRvc2U6IHRlbG1pc2FydGFuICgxMCBtZyksIGFtbG9kaXBpbmUgKDEuMjUgbWcpLCBhbmQgaW5kYXBhbWlkZSAoMC42MjUgbWcpIDxiciAvPjxiciAvPuKAoglMb3ctZG9zZTogbG9zYXJ0YW4gKDI1IG1nKSwgYW1sb2RpcGluZSAoMi41IG1nKSwgYW5kIGh5ZHJvY2hsb3JvdGhpYXppZGUgKDEyLjUgbWcpIOcDMS4JQmUgbWFsZSBvciBmZW1hbGUgYWdlZCAxOCB5ZWFycyBvciBvdmVyOyA8YnIgLz48YnIgLz4yLglIYXZlIGh5cGVydGVuc2lvbiwgZGVmaW5lZCBhcyBhbiBpbi1vZmZpY2Ugc3lzdG9saWMgYmxvb2QgcHJlc3N1cmUgb2YgbW9yZSB0aGFuIDE0MCBtbSBIZyBvbiB0aHJlZSBjb25zZWN1dGl2ZSBtZWFzdXJlbWVudHMgdGFrZW4gb3ZlciBhIDEwLW1pbnV0ZSBwZXJpb2Q7IGFuZDxiciAvPjxiciAvPjMuCU5vdCBiZSBvZiBjaGlsZGJlYXJpbmcgcG90ZW50aWFsLCBvciBhZ3JlZSB0byB1c2UgY29udHJhY2VwdGlvbiBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBwcm90b2NvbCAoZS5nLiBkaWFwaHJhZ20sIG1hbGUgY29uZG9tLCBjb21iaW5lZCBvcmFsIGNvbnRyYWNlcHRpdmUgcGlsbCwgY29wcGVyIGludHJhdXRlcmluZSBkZXZpY2UsIGxldm9ub3JnZXN0cmVsIGludHJhdXRlcmluZSBzeXN0ZW0gb3IgZXRvbm9nZXN0cmVsIGltcGxhbnQpLjxiciAvPggxOCBZZWFycwkgTm8gbGltaXQWQm90aCBtYWxlcyBhbmQgZmVtYWxlc5UGMS4JSGF2ZSBzZXZlcmUgaHlwZXJ0ZW5zaW9uLCBkZWZpbmVkIGFzIGFuIGluLW9mZmljZSBzeXN0b2xpYyBibG9vZCBwcmVzc3VyZSBtb3JlIHRoYW4gMTgwIG1tIEhnIG9uIHRocmVlIGNvbnNlY3V0aXZlIG1lYXN1cmVtZW50cyB0YWtlbiBvdmVyIGEgMTAgbWludXRlIHBlcmlvZDs8YnIgLz48YnIgLz4yLglIYXZlIGh5cGVydGVuc2lvbiB3aXRoIGEga25vd24gc2Vjb25kYXJ5IGNhdXNlIChlLmcuIHByaW1hcnkgYWxkb3N0ZXJvbmlzbSk7PGJyIC8%2BPGJyIC8%2BMy4JSGF2ZSBhIHByZXZpb3VzbHkgcmVjb3JkZWQgaW50b2xlcmFuY2UgdG8gYW55IGFuZ2lvdGVuc2luIHJlY2VwdG9yIGJsb2NrZXIsIGNhbGNpdW0gY2hhbm5lbCBibG9ja2VyLCBkaXVyZXRpYyBvciBzdWxwaG9uYW1pZGU7PGJyIC8%2BPGJyIC8%2BNC4JSGF2ZSByZWNlaXZlZCBhbnRpaHlwZXJ0ZW5zaXZlIHRyZWF0bWVudCB3aXRoaW4gdGhlIGxhc3QgdHdvIHdlZWtzOzxiciAvPjxiciAvPjUuCUhhdmUgdW5zdGFibGUgY2FyZGlhYyBkaXNlYXNlOzxiciAvPjxiciAvPjYuCUhhdmUgc2V2ZXJlIGtpZG5leSBkaXNlYXNlOzxiciAvPjxiciAvPjcuCUhhdmUgc2V2ZXJlIGxpdmVyIGRpc2Vhc2U7PGJyIC8%2BPGJyIC8%2BOC4JQmUgcHJlZ25hbnQgb3IgYnJlYXN0ZmVlZGluZzsgb3I8YnIgLz48YnIgLz45LglBbnkgb3RoZXIgbWVkaWNhbCBjb25kaXRpb24gdGhhdCB0aGUgSW52ZXN0aWdhdG9yIGJlbGlldmVzIHNob3VsZCBwcmVjbHVkZSB0aGUgcGF0aWVudOKAmXMgcGFydGljaXBhdGlvbiBpbiB0aGUgc3R1ZHkuPGJyIC8%2BDmV4cGFuZGFibGUtYm94GkNvbW1lcmNpYWwgc2VjdG9yL0luZHVzdHJ5EEdlb3JnZSBNZWRpY2luZXMoTGV2ZWwgNSwgMSBLaW5nIFN0cmVldCwgTmV3dG93biBOU1cgMjA0MglBdXN0cmFsaWEETWlzcwpSZWJlY2NhIEhvQEdlb3JnZUNsaW5pY2FsPGJyIC8%2BTGV2ZWwgNSwgMSBLaW5nIFN0cmVldDxiciAvPk5ld3Rvd24gTlNXIDIwNDIJQXVzdHJhbGlhDys2MSA0MTAgNjc3IDE3NRZyaG9AZ2VvcmdlY2xpbmljYWwuY29tBmhpZGRlbmQCDw8UKwAEDxYEHwVlHwNnZGRkPCsABAEAFgIfAmVkAhEPFgIfAWhkAhMPZBYGAgMPDxYCHw1lZGQCBQ8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3Mzg2NS5wZGY%2FdD0xNDFkZAIvDzwrAAQBAA8WAh8DZ2RkAhcPZBYWZg8VAhByZXN1bHRzLWhlYWRlci0xEVRyaWFsIGZyb20gQU5aQ1RSZAIBDw8WAh8NBT1%2BL1RyaWFsL1JlZ2lzdHJhdGlvbi9UcmlhbFJldmlldy5hc3B4P2lkPTM3Mzg0MyZpc1Jldmlldz10cnVlZGQCAw8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3Mzg0My5wZGY%2FdD0xNDFkZAIHDw8WAh8CBQYzNzM4NDNkZAIJDw8WAh8CBQ4xMjYxNzAwMTUzMjM5MmRkAgsPDxYCHwJlZGQCDQ8PFgIfAgUFRmFsc2VkZAIODxUtEHJlc3VsdHMtaGVhZGVyLTLcAVRvIGRldGVybWluZSB3aGV0aGVyIG1lZGljYWwgbWFuYWdlbWVudCBpbmNsdWRpbmcgbWFpbnRlbmFuY2UgZGlhbHlzaXMgdmVyc3VzIG1lZGljYWwgdHJlYXRtZW50IGFsb25lIHJlZHVjZXMgbW9ydGFsaXR5IGFuZCBtb3JiaWRpdHkgaW4gaGlnaGx5IGNvLW1vcmJpZCBwYXRpZW50cyBhZ2VkIG92ZXIgNzUgeWVhcnMgd2l0aCBzdGFnZSA1IGNocm9uaWMga2lkbmV5IGRpc2Vhc2UsICASTm90IHlldCByZWNydWl0aW5nB2luZm8tbGkbU3VibWl0dGVkLCBub3QgeWV0IGFwcHJvdmVkB2luZm8tbGkrUHJvc3BlY3RpdmVseSByZWdpc3RlcmVkPGJyIC8%2BKHByb3Zpc2lvbmFsKTFIYXMgdGhlIHRyaWFsIGJlZW4gdXBkYXRlZCBpbiB0aGUgbGFzdCAxMiBtb250aHM%2FClVwIHRvIGRhdGUJNi8xMS8yMDE3EnJlc3VsdHMtaGVhZGVyLTEwMBtTdWJtaXR0ZWQsIG5vdCB5ZXQgYXBwcm92ZWQKVXAgdG8gZGF0ZRRBQ1RSTjEyNjE3MDAxNTMyMzkycBAwNiBOb3ZlbWJlciAyMDE3BHNob3cYRW5kIFN0YWdlIEtpZG5leSBkaXNlYXNlBHNob3cJQXVzdHJhbGlhBHNob3eFAUF1c3RyYWxpYW4gQ2FwaXRhbCBUZXJyaXRvcnksIE5ldyBTb3V0aCBXYWxlcywgTm9ydGhlcm4gVGVycml0b3J5LCBRdWVlbnNsYW5kLCBTb3V0aCBBdXN0cmFsaWEsIFRhc21hbmlhLCBXZXN0ZXJuIEF1c3RyYWxpYSwgVmljdG9yaWEEc2hvdwRzaG93Ek5vdCB5ZXQgcmVjcnVpdGluZw8zMSBKYW51YXJ5IDIwMTgEc2hvdxtTdWJtaXR0ZWQsIG5vdCB5ZXQgYXBwcm92ZWSFFFRoZSBidXJkZW4gb2YgZW5kIHN0YWdlIGtpZG5leSBkaXNlYXNlIGlzIGdyb3dpbmcgZ2xvYmFsbHkuIE11Y2ggb2YgdGhpcyBncm93dGggc2luY2UgdGhlIHR1cm4gb2YgdGhlIGNlbnR1cnkgaGFzIGJlZW4gaW4gZWxkZXJseSBwYXRpZW50cywgYSBncm91cCBpbiB3aG9tIHRoZSBvdXRjb21lcyBmcm9tIGJvdGggZGlhbHlzaXMgYW5kIG5vbi1kaWFseXNpcyB0cmVhdG1lbnRzIGFyZSBwb29yLiAgT3B0aW1hbCB0aGVyYXB5IGZvciB0aGVzZSBvbGRlciBwYXRpZW50cyB3aXRoIGVuZCBzdGFnZSBraWRuZXkgZGlzZWFzZSBpcyBub3QgY2xlYXIgYW5kIHByYWN0aWNlIHZhcmllcyB3aWRlbHkuPGJyIC8%2BUmVjZW50IGxpdGVyYXR1cmUgc2hvd3MgaGlnaCBtb3J0YWxpdHkgcmF0ZXMgaW4gb2xkZXIgcGF0aWVudHMgcmVjZWl2aW5nIGRpYWx5c2lzLCB3aXRoIGFuIGF2ZXJhZ2UgbW9ydGFsaXR5IG9mIDI3JSBpbiB0aGUgZmlyc3QgeWVhci4gRGF0YSBvbiB0aGUgb3V0Y29tZXMgZnJvbSBub24tZGlhbHlzaXMgdHJlYXRtZW50LCB1c3VhbGx5IHJlZmVycmVkIHRvIGFzIHN1cHBvcnRpdmUgY2FyZSwgaXMgbXVjaCBsZXNzIGNsZWFyLiBUaGlzIGlzIGJlY2F1c2U6PGJyIC8%2B4oCiCVRoZXJlIGFyZSBubyByZWdpc3RyaWVzIG9mIHBhdGllbnRzIHJlY2VpdmluZyBzdXBwb3J0aW5nIGNhcmU8YnIgLz7igKIJSXQgaXMgZGlmZmljdWx0IHRvIGRlZmluZSBhIGNsZWFyIHN0YXJ0LWluIHBvaW50IGZvciBzdXBwb3J0aXZlIGNhcmUsIGFzIG9wcG9zZWQgdG8gZGlhbHlzaXMgaW5pdGlhdGlvbjxiciAvPuKAoglEaWFseXNpcyBwYXRpZW50IGdyb3VwcyBjb21wYXJlZCB0byBzdXBwb3J0aXZlIGNhcmUgcGF0aWVudHMgaGF2ZSBsYXJnZSBkaWZmZXJlbmNlcyBpbiBjby1tb3JiaWRpdGllczxiciAvPuKAoglUaGVyZSBpcyBjcm9zc292ZXIgYmV0d2VlbiB0aGUgdHdvIHBhdGllbnQgcGF0aHdheXM8YnIgLz5UaGUgb25seSBlZmZlY3RpdmUgd2F5IHRvIGJldHRlciB1bmRlcnN0YW5kIHRoZSBlZmZlY3RzIG9mIHRoZSBkaWFseXNpcyBhbmQgdGhlIHN1cHBvcnRpdmUgY2FyZSB0cmVhdG1lbnQgYXBwcm9hY2hlcyBpcyB0byByYW5kb21seSBhcHBseSB0aGUgdHJlYXRtZW50cyBpbiBhIGNsaW5pY2FsIHRyaWFsLiBUaGlzIGFwcHJvYWNoIGFsbG93cyB0aGUgaXNzdWVzIG9mIGxlYWQtdGltZSBiaWFzLCByZXNpZHVhbCBjb25mb3VuZGluZyBhbmQgY3Jvc3Mtb3ZlciB0byBiZSBlbGltaW5hdGVkIG9yIG1hbmFnZWQsIHRoZXJlYnkgcHJvZHVjaW5nIGZpbmRpbmdzIG9mIHRoZSBoaWdoZXN0IGNsaW5pY2FsIGFuZCBzY2llbnRpZmljIHZhbHVlLjxiciAvPkl0IGlzIHRoZSB2aWV3IG9mIHRoZSBpbnZlc3RpZ2F0b3JzIG9mIHRoZSBESVNDRVJOIFRyaWFsIHRoYXQsIHdoZXJlIGNsaW5pY2lhbnMgYW5kIHBhdGllbnRzIGhhdmUgZXF1aXBvaXNlIGFyb3VuZCB0aGUgcmVsYXRpdmUgYmVuZWZpdHMgYW5kIHJpc2tzIG9mIGRpYWx5c2lzIGFuZCBzdXBwb3J0aXZlIGNhcmUsIHRvIHJhbmRvbWx5IGFsbG9jYXRlIHBhdGllbnRzIHRvIGVpdGhlciBvZiB0aGVzZSB0cmVhdG1lbnQgYXBwcm9hY2hlcyBpcyBhbiBhcHByb3ByaWF0ZSBhbmQgZXRoaWNhbCBhcHByb2FjaC4gSW4gYSBzZXR0aW5nIGZvciBzY2FyY2UgaGVhbHRoY2FyZSByZXNvdXJjZXMsIHVuZGVyc3RhbmRpbmcgdGhpcyBiYWxhbmNlIGFyaXNpbmcgZnJvbSBhIHJlc291cmNlLWludGVuc2l2ZSB0cmVhdG1lbnQgc3VjaCBhcyBkaWFseXNpcyBpcyB0aGUgYXBwcm9wcmlhdGUgcGF0aCB0byBndWlkZSByZXNvdXJjZSBhbGxvY2F0aW9uLjxiciAvPk9iamVjdGl2ZXM6IFRoZSBwcmltYXJ5IG51bGwgaHlwb3RoZXNpcyBvZiB0aGUgRElTQ0VSTiBzdHVkeSBpcyB0aGF0LCBpbiBoaWdobHkgY28tbW9yYmlkIHBhdGllbnRzIGFnZWQgb3ZlciA3NSB5ZWFycyB3aXRoIHN0YWdlIDUgY2hyb25pYyBraWRuZXkgZGlzZWFzZSwgbWVkaWNhbCBtYW5hZ2VtZW50IGluY2x1ZGluZyBtYWludGVuYW5jZSBkaWFseXNpcyBjb21wYXJlZCB0byBtZWRpY2FsIHRyZWF0bWVudCBhbG9uZSBpcyBhc3NvY2lhdGVkIHdpdGggbm8gZGlmZmVyZW5jZXMgaW4gdGhlIG91dGNvbWUgb2YgbW9ydGFsaXR5LiBTZWNvbmRhcnkgbnVsbCBoeXBvdGhlc2VzIHdpbGwgZXhhbWluZSB0aGUgZWZmZWN0IG9mIHRoZSBzYW1lIGNvbXBhcmlzb24gdXBvbiB0aGUgb3V0Y29tZXMgb2YgcXVhbGl0eSBvZiBsaWZlLCBidXJkZW4gb2YgaG9zcGl0YWxpc2F0aW9uIGFuZCBjb3N0LWVmZmVjdGl2ZW5lc3MuPGJyIC8%2BU3R1ZHkgRGVzaWduOiBUaGUgRElTQ0VSTiBzdHVkeSBpcyBhIHJhbmRvbWlzZWQsIGNvbnRyb2xsZWQgdHJpYWwgd2l0aCBibGluZGluZyBvZiBvdXRjb21lIGFzc2Vzc21lbnQuIFBhcnRpY2lwYW50cyB3aWxsIGJlIHJhbmRvbWlzZWQgb24gYSAxOjEgYmFzaXMgdG8gdGhlIHR3byBzdHVkeSBhcm1zOiBNZWRpY2FsIHRyZWF0bWVudCB3aXRoIG1haW50ZW5hbmNlIGRpYWx5c2lzLCBPUiBtZWRpY2FsIHRyZWF0bWVudCAod2l0aCBubyBtYWludGVuYW5jZSBkaWFseXNpcykuIDxiciAvPusEMS4JQWdlZCBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gNzUgeWVhcnM8YnIgLz4yLglXaXRoIGFkdmFuY2VkIGNocm9uaWMga2lkbmV5IGRpc2Vhc2UsIGRlZmluZWQgYXMgaGF2aW5nIGFuIGVHRlIgb2YgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDEyIG1sL21pbi8xLjczbTIgIDxiciAvPjMuCUlzIGV4cGVjdGVkIGJ5IHRoZWlyIHRyZWF0aW5nIHBoeXNpY2lhbiB0byBtZWV0IGNsaW5pY2FsIGNyaXRlcmlhIGZvciBlbnRyeSB0byBhIG1haW50ZW5hbmNlIGRpYWx5c2lzIHByb2dyYW0gd2l0aGluIHRoZSBuZXh0IDI0IG1vbnRocy48YnIgLz40LglIYXMgc2F0aXNmaWVkIHRoZSB0cmVhdGluZyB1bml04oCZcyBwb2xpY2llcyByZWxhdGluZyB0byBlZHVjYXRpb24gcmVnYXJkaW5nIGVuZCBzdGFnZSBraWRuZXkgZGlzZWFzZSB0cmVhdG1lbnQgb3B0aW9uczxiciAvPjUuCVRoZSB0cmVhdGluZyBwaHlzaWNpYW4gY2FyaW5nIGZvciB0aGUgcGFydGljaXBhbnQgaGFzIGVxdWlwb2lzZSBhYm91dCB0aGUgYmFsYW5jZSBvZiByaXNrIGFuZCBiZW5lZml0IGZvciB0aGUgcGFydGljaXBhbnQgc2hvdWxkIHRoZXkgZW50ZXIgZWl0aGVyIHRyZWF0bWVudCBhcm0gb2YgdGhlIHN0dWR5LjxiciAvPgg3NSBZZWFycwkgTm8gbGltaXQWQm90aCBtYWxlcyBhbmQgZmVtYWxlc9gCMS4JVHJlYXRpbmcgcGh5c2ljaWFuIGNvbnNpZGVycyBpdCB1bmxpa2VseSB0aGF0IHRoZSBwYXJ0aWNpcGFudCB3aWxsIGFkaGVyZSB0byBhbGxvY2F0ZWQgc3R1ZHkgdHJlYXRtZW50PGJyIC8%2BMi4JUGFydGljaXBhbnQgdW5hYmxlIHRvIHVuZGVyc3RhbmQgdGhlIGltcGxpY2F0aW9ucyBvZiBib3RoIG9mIHRoZSBzdHVkeSB0cmVhdG1lbnQgYXJtcyBmb3IgdGhlaXIgZnV0dXJlIGNhcmU8YnIgLz4zLiAgICAgVGhlIHRyZWF0aW5nIHBoeXNpY2lhbiBleHBlY3RzIHRoYXQgdGhlIHBhcnRpY2lwYW50IHdpbGwgbm90IHN1cnZpdmUgMyBtb250aHMgYmV5b25kIHN0dWR5IHJhbmRvbWlzYXRpb248YnIgLz4OZXhwYW5kYWJsZS1ib3gaT3RoZXIgQ29sbGFib3JhdGl2ZSBncm91cHMmVGhlIEdlb3JnZSBJbnN0aXR1dGUgZm9yIEdsb2JhbCBIZWFsdGgoTGV2ZWwgNSwgMSBLaW5nIFN0cmVldCwgTmV3dG93biBOU1cgMjA0MglBdXN0cmFsaWECTXMMU2FyYWggQ29nZ2FuWVRoZSBHZW9yZ2UgSW5zdGl0dXRlIGZvciBHbG9iYWwgSGVhbHRoPGJyIC8%2BTGV2ZWwgNSwgMSBLaW5nIFN0cmVldCw8YnIgLz5OZXd0b3duIE5TVyAyMDQyCUF1c3RyYWxpYQ4rNjEyIDgwNTIgNDU2Nh5zY29nZ2FuQGdlb3JnZWluc3RpdHV0ZS5vcmcuYXUGaGlkZGVuZAIPDxQrAAQPFgQfBWUfA2dkZGQ8KwAEAQAWAh8CZWQCEQ8WAh8BaGQCEw9kFgYCAw8PFgIfDWVkZAIFDw8WAh8NBSYvVHJpYWxQZGYvVHJpYWxSZXZpZXctMzczODQzLnBkZj90PTE0MWRkAi8PPCsABAEADxYCHwNnZGQCGQ9kFhZmDxUCEHJlc3VsdHMtaGVhZGVyLTERVHJpYWwgZnJvbSBBTlpDVFJkAgEPDxYCHw0FPX4vVHJpYWwvUmVnaXN0cmF0aW9uL1RyaWFsUmV2aWV3LmFzcHg%2FaWQ9MzcyNTEzJmlzUmV2aWV3PXRydWVkZAIDDw8WAh8NBSYvVHJpYWxQZGYvVHJpYWxSZXZpZXctMzcyNTEzLnBkZj90PTE0MWRkAgcPDxYCHwIFBjM3MjUxM2RkAgkPDxYCHwIFDjEyNjE3MDAxNTMxMzAzZGQCCw8PFgIfAmVkZAINDw8WAh8CBQVGYWxzZWRkAg4PFS0QcmVzdWx0cy1oZWFkZXItMpoBUGlsb3Qgc3R1ZHk6IEludHJhbmFzYWwgb3h5dG9jaW4gYWRtaW5pc3RyYXRpb24gYXMgYSBwb3RlbnRpYWwgc3ltcHRvbWF0aWMgaW50ZXJ2ZW50aW9uIHRyZWF0bWVudCB0byBpbXByb3ZlIGVtb3Rpb24gcmVjb2duaXRpb24gaW4gcGF0aWVudHMgd2l0aCBkZW1lbnRpYRJOb3QgeWV0IHJlY3J1aXRpbmcHaW5mby1saQhBcHByb3ZlZAdpbmZvLWxpGFByb3NwZWN0aXZlbHkgcmVnaXN0ZXJlZDFIYXMgdGhlIHRyaWFsIGJlZW4gdXBkYXRlZCBpbiB0aGUgbGFzdCAxMiBtb250aHM%2FClVwIHRvIGRhdGUJMy8xMS8yMDE3EnJlc3VsdHMtaGVhZGVyLTEwMAhBcHByb3ZlZApVcCB0byBkYXRlE0FDVFJOMTI2MTcwMDE1MzEzMDMQMDMgTm92ZW1iZXIgMjAxNwRzaG93JkFsemhlaW1lcidzIGRpc2Vhc2UsIFZhc2N1bGFyIGRlbWVudGlhBHNob3cJQXVzdHJhbGlhBHNob3cPTmV3IFNvdXRoIFdhbGVzBHNob3cEc2hvdxJOb3QgeWV0IHJlY3J1aXRpbmcQMTQgTm92ZW1iZXIgMjAxNwRzaG93CEFwcHJvdmVkygZQZW9wbGUgd2l0aCBkZW1lbnRpYSBvZnRlbiBleHBlcmllbmNlIGRpZmZpY3VsdHkgaW4gcmVjb2duaXNpbmcgdGhlIGVtb3Rpb25zIG9mIG90aGVyIHBlb3BsZSwgc3VjaCBhcyBmZWFyLCBhbmdlciBhbmQgc2FkbmVzcy4gVGhpcyBjYW4gaW1wYWN0IHVwb24gcmVsYXRpb25zaGlwcyBhbmQgc29jaWFsIGludGVyYWN0aW9ucyB0aHVzIGNhdXNpbmcgZGlzdHJlc3MgZm9yIHRoZSBpbmRpdmlkdWFsIGxpdmluZyB3aXRoIGRlbWVudGlhIGFzIHdlbGwgYXMgZm9yIGZhbWlseSBtZW1iZXJzIGFuZCBmcmllbmRzLiBUaGlzIHN0dWR5IGludmVzdGlnYXRlcyB3aGV0aGVyIGEgbmF0dXJhbGx5IG9jY3VycmluZyBob3Jtb25lIGluIHRoZSBib2R5LCBveHl0b2NpbiwgY2FuIGhlbHAgcGVvcGxlIHdpdGggQWx6aGVpbWVyJ3MgZGlzZWFzZSBhbmQvb3IgVmFzY3VsYXIgZGVtZW50aWEgcmVjb2duaXNlIHRoZSBlbW90aW9ucyBvZiBvdGhlciBwZW9wbGUgYmV0dGVyLiBJdCBpcyBoeXBvdGhlc2lzZWQgdGhhdCBwYXRpZW50cyB3aG8gcmVjZWl2ZSB0aGUgb3h5dG9jaW4gbmFzYWwgc3ByYXkgd2lsbCBkZW1vbnN0cmF0ZSBpbXByb3ZlZCBhY2N1cmFjeSBvZiBlbW90aW9uIHJlY29nbml0aW9uLCBmb2xsb3dpbmcgYSBzaW5nbGUgZG9zZSBhbmQgcmVwZWF0ZWQgYWRtaW5pc3RyYXRpb24gb3ZlciBvbmUgd2Vlay4gRnVydGhlcm1vcmUsIGl0IGlzIGFsc28gaHlwb3RoZXNpc2VkIGNhcmVycyBvZiBwYXRpZW50cyB3aG8gcmVjZWl2ZSB0aGUgb3h5dG9jaW4gbmFzYWwgc3ByYXkgd2lsbCByZXBvcnQgaW1wcm92ZWQgaW50ZXJhY3Rpb25zIGFuZCByZWR1Y2VkIGNhcmVnaXZlciBidXJkZW4uIIICVG8gYmUgZWxpZ2libGUgcGFydGljaXBhbnRzIG11c3Q6PGJyIC8%2BMS4gNjAgdG8gOTAgeWVhcnMgb2YgYWdlPGJyIC8%2BMi4gSGF2ZSBhIGRpYWdub3NpcyBvZiBtaWxkIEFELCBWYXNjdWxhciBEZW1lbnRpYSBvciBtaXhlZCBBRCAvIFZhc2N1bGFyIERlbWVudGlhIDxiciAvPihNTVNFID4gMjEpPGJyIC8%2BMy4gSGF2ZSBhIGNhcmVyIHdobyB3aWxsIGJlIGFibGUgdG8gbGl2ZSB3aXRoIHRoZSBwYXJ0aWNpcGFudCBkdXJpbmcgdGhlIHN0dWR5PGJyIC8%2BCDYwIFllYXJzCDkwIFllYXJzFkJvdGggbWFsZXMgYW5kIGZlbWFsZXORDVBhcnRpY2lwYW50cyB3aWxsIGJlIGV4Y2x1ZGVkIGlmIHRoZXk6PGJyIC8%2BMS4gSGF2ZSBwcmlvciBoaXN0b3J5IHBzeWNoaWF0cmljIGRpc29yZGVycyAoZS5nLiBtYWpvciBkZXByZXNzaW9uLCBzY2hpem9waHJlbmlhLCBiaXBvbGFyIGRpc29yZGVyKTxiciAvPjIuIEhhdmUgYSBzY29yZSBvZiA9PCA0MCBvbiB0aGUgQmVudG9uIEZhY2lhbCBSZWNvZ25pdGlvbiBUZXN0PGJyIC8%2BMy4gSGF2ZSBhIHNjb3JlIG9uIHRoZSAxOC1pdGVtIEhhbWlsdG9uIERlcHJlc3Npb24gUmF0aW5nIFNjYWxlIGdyZWF0ZXIgdGhhbiAxNjxiciAvPjQuIFByZXNjcmliZWQgYW4gYW50aWNob2xpbmVzdGVyYXNlIG1lZGljYXRpb24gZm9yIGxlc3MgdGhhbiB0aHJlZSBtb250aHMgb3IgYXJlIGV4cGVyaWVuY2luZyBzaWRlIGVmZmVjdHMgc2Vjb25kYXJ5IHRvIHRoaXMgY2xhc3Mgb2YgbWVkaWNhdGlvbi4gPGJyIC8%2BNS4gQ3VycmVudGx5IHByZXNjcmliZWQgYW55IG9mIHRoZSBmb2xsb3dpbmcgY2xhc3NlcyBvZiBtZWRpY2F0aW9uczogbm9uLWFudGljaG9saW5lc3RlcmFzZSBtZWRpY2F0aW9ucyBmb3IgZGVtZW50aWEsIGFudGlwc3ljaG90aWNzLCBhbnRpZGVwcmVzc2FudHMsIGJlbnpvZGlhemVwaW5lcywgc2VkYXRpdmVzLCBhbmQgaHlwbm90aWNzPGJyIC8%2BNi4gSGF2ZSBwcmlvciBoaXN0b3J5IG9mIG5ldXJvbG9naWNhbCBkaXNvcmRlciAoZS5nLiwgaGVhZCBpbmp1cnksIHN0cm9rZSBvciB0cmFuc2llbnQgaXNjaGVtaWMgYXR0YWNrLCBlcGlsZXBzeSk8YnIgLz43LiBIYXZlIGEgZGlhZ25vc2lzIG9mIGFub3RoZXIgbmV1cm9kZWdlbmVyYXRpdmUgZGlzZWFzZSAoZS5nLiwgRGVtZW50aWEgd2l0aCBMZXd5IEJvZGllcywgRnJvbnRvdGVtcG9yYWwgRGVtZW50aWEsIFBhcmtpbnNvbuKAmSBEaXNlYXNlIERlbWVudGlhKTxiciAvPjguIEhhdmUgYW4gaW50ZWxsZWN0dWFsIGRpc2FiaWxpdHk8YnIgLz45LiBIYXZlIGEgY3VycmVudCBoaXN0b3J5IG9mIHN1YnN0YW5jZSBhYnVzZTxiciAvPjEwLiBIYXMgYSBoaXN0b3J5IG9mIGEgbXlvY2FyZGlhbCBpbmZhcmN0aW9uIHdpdGhpbiB0aGUgbGFzdCB0d28geWVhcnMgb3IgY29uZ2VzdGl2ZSBoZWFydCBmYWlsdXJlPGJyIC8%2BMTEuIEN1cnJlbnQgdW5jb250cm9sbGVkIGh5cGVydGVuc2lvbjxiciAvPjEyLiBDdXJyZW50IGJyYWR5Y2FyZGlhIChyYXRlIDwgNTAgYmVhdHMgcGVyIG1pbnV0ZS9icG0pIG9yIHRhY2h5Y2FyZGlhIChyYXRlID4gMTAwIGJwbSk8YnIgLz4xMy4gSGFzIGEgZGlhZ25vc2lzIG9mIGxvbmcgUVQgc3luZHJvbWU8YnIgLz4xNC4gQ3VycmVudCB1c2Ugb2YgcHJvc3RhZ2xhbmRpbnMgYW5kIHRoZWlyIGFuYWxvZ3VlczxiciAvPjE1LiBDdXJyZW50IHVzZSBvZiBhbnkgYW5hZXN0aGV0aWMgKGluaGFsYXRpb24gb3IgY2F1ZGFsKTxiciAvPjE2LiBLbm93biBhbGxlcmdpZXMgdG8gb3h5dG9jaW4gb3IgdG8gcHJlc2VydmF0aXZlcyBpbiB0aGUgbmFzYWwgc3ByYXk8YnIgLz4xNy4gUGFydGljaXBhbnRzIHdpdGggc2V2ZXJlIG5hc2FsIG9ic3RydWN0aW9uL2Jsb2NrYWdlPGJyIC8%2BMTguIFBhcnRpY2lwYW50cyB3aXRoIHNldmVyZWx5IGNvbXByb21pc2VkIGhlcGF0aWMgZnVuY3Rpb248YnIgLz4xOS4gUGFydGljaXBhbnRzIHdpdGggc2V2ZXJlbHkgY29tcHJvbWlzZWQgcmVuYWwgZnVuY3Rpb24OZXhwYW5kYWJsZS1ib3gKVW5pdmVyc2l0eRRVbml2ZXJzaXR5IG9mIFN5ZG5leWNCcmFpbiBhbmQgTWluZCBDZW50cmUsIFVuaXZlcnNpdHkgb2YgU3lkbmV5PGJyIC8%2BMTAwIE1hbGxldHQgU3RyZWV0PGJyIC8%2BQ2FtcGVyZG93biw8YnIgLz5OU1csIDIwNTAJQXVzdHJhbGlhAk1yE0pvaGFubmVzIE1pY2hhZWxpYW6dAVRoZSBCcmFpbiAmIE1pbmQgQ2VudHJlPGJyIC8%2BSGVhbHRoeSBCcmFpbiBBZ2VpbmcgUHJvZ3JhbSwgPGJyIC8%2BOTQgTWFsbGV0dCBTdCwgQ2FtcGVyZG93bjxiciAvPlRoZSBVbml2ZXJzaXR5IG9mIFN5ZG5leSA8YnIgLz5OU1cgMjA1MCBBVVNUUkFMSUE8YnIgLz48YnIgLz4JQXVzdHJhbGlhDCs2MTI5MzUxMDYyMSFqb2hhbm5lcy5taWNoYWVsaWFuQHN5ZG5leS5lZHUuYXUGaGlkZGVuZAIPDxQrAAQPFgQfBWUfA2dkZGQ8KwAEAQAWAh8CZWQCEQ8WAh8BaGQCEw9kFgYCAw8PFgIfDWVkZAIFDw8WAh8NBSYvVHJpYWxQZGYvVHJpYWxSZXZpZXctMzcyNTEzLnBkZj90PTE0MWRkAi8PPCsABAEADxYCHwNnZGQCGw9kFhZmDxUCEHJlc3VsdHMtaGVhZGVyLTERVHJpYWwgZnJvbSBBTlpDVFJkAgEPDxYCHw0FPX4vVHJpYWwvUmVnaXN0cmF0aW9uL1RyaWFsUmV2aWV3LmFzcHg%2FaWQ9MzcyNTc4JmlzUmV2aWV3PXRydWVkZAIDDw8WAh8NBSYvVHJpYWxQZGYvVHJpYWxSZXZpZXctMzcyNTc4LnBkZj90PTE0MWRkAgcPDxYCHwIFBjM3MjU3OGRkAgkPDxYCHwIFDjEyNjE3MDAxNTMwMzE0ZGQCCw8PFgIfAmVkZAINDw8WAh8CBQVGYWxzZWRkAg4PFS0QcmVzdWx0cy1oZWFkZXItMo8BVHJpYWxsaW5nIGFuIGludGVydmVudGlvbiB0byBzdXBwb3J0IHRoZSB3ZWxsYmVpbmcgb2YgcGFyZW50cyBvZiBjaGlsZHJlbiB3aXRoIGEgZGlzYWJpbGl0eSBhbmQgc3RhZmYgd2VsbGJlaW5nOiBUaGUgUHVyc3VpdCBvZiBXZWxsYmVpbmcgU3R1ZHkKUmVjcnVpdGluZwdpbmZvLWxpCEFwcHJvdmVkB2luZm8tbGkaUmV0cm9zcGVjdGl2ZWx5IHJlZ2lzdGVyZWQxSGFzIHRoZSB0cmlhbCBiZWVuIHVwZGF0ZWQgaW4gdGhlIGxhc3QgMTIgbW9udGhzPwpVcCB0byBkYXRlCTMvMTEvMjAxNxJyZXN1bHRzLWhlYWRlci0xMDAIQXBwcm92ZWQKVXAgdG8gZGF0ZRNBQ1RSTjEyNjE3MDAxNTMwMzE0EDAzIE5vdmVtYmVyIDIwMTcEc2hvdzxNZW50YWwgaGVhbHRoLCBQYXJlbnRhbCBtZW50YWwgaGVhbHRoLCBKb2ItcmVsYXRlZCB3ZWxsYmVpbmcEc2hvdwlBdXN0cmFsaWEEc2hvdwhWaWN0b3JpYQRzaG93BHNob3cKUmVjcnVpdGluZwNuL2EEc2hvdwhBcHByb3ZlZNwHVGhpcyBpcyBhIHRyaWFsIG9mIGEgY2FwYWNpdHkgYnVpbGRpbmcgcHJvZ3JhbSB0byBidWlsZCB0aGUgc2VsZi1lZmZpY2FjeSBvZiBFYXJseSBDaGlsZGhvb2QgSW50ZXJ2ZW50aW9uIFNlcnZpY2Ugc3RhZmYgKGtub3duIGFzIGtleSB3b3JrZXJzKSB0byBzdXBwb3J0IHBhcmVudGFsIG1lbnRhbCB3ZWxsYmVpbmcgYW5kIHRoZXJlZm9yZSB0aGVpciBvd24gd2VsbGJlaW5nLiBTdHJhdGVnaWVzIHRvIGltcHJvdmUgdGhlIG1lbnRhbCBoZWFsdGggb2YgcGFyZW50cyBvZiBjaGlsZHJlbiB3aXRoIGEgZGlzYWJpbGl0eSBhcmUgdXJnZW50bHkgbmVlZGVkLCBhbmQgYXJlIHRpbWVseSBnaXZlbiB0aGUgY3VycmVudCByb2xsb3V0IG9mIHRoZSBOYXRpb25hbCBEaXNhYmlsaXR5IEluc3VyYW5jZSBTY2hlbWUgKE5ESVMpIGluIEF1c3RyYWxpYS4gVGhpcyBwcm9ncmFtIGlzIG5lZWRlZCB0byBicmVhayB0aGUgdmljaW91cyBjeWNsZSBvZiBwb29yIG1lbnRhbCBoZWFsdGggaW4gcGFyZW50cyBvZiBjaGlsZHJlbiB3aXRoIGEgZGlzYWJpbGl0eSB0aGF0IGxlYWRzIHRvIHBvb3JlciBzaG9ydCBhbmQgbG9uZyB0ZXJtIG91dGNvbWVzIGZvciB0aGVtc2VsdmVzLCB0aGVpciBjaGlsZCBhbmQgdGhlaXIgZmFtaWx5LiBTdGFmZiB3aWxsIHJlY2VpdmUgdGhlIHByb2dyYW0gYXMgcGFydCBvZiBvcmdhbmlzYXRpb25hbCBjaGFuZ2UgdG8gaW1wcm92ZSBib3RoIHBhcmVudCBhbmQgc3RhZmYgbWVudGFsIHdlbGxiZWluZy4gQXBwbHlpbmcgYSBjYXBhY2l0eSBidWlsZGluZyBmcmFtZXdvcmsgYW5kIGFzc2Vzc2luZyBjaGFuZ2VzIGluIHNlbGYtZWZmaWNhY3kgb2YgcHJvZmVzc2lvbmFscyB0aGlzIHByb2dyYW0gd2FzIGRldmVsb3BlZCB0byBub3Qgb25seSBiZW5lZml0IHRoZSB3ZWxsYmVpbmcgb2YgcGFyZW50cyBvZiBjaGlsZHJlbiB3aXRoIGEgZGlzYWJpbGl0eSBidXQgYWxzbyB0aGUgd2VsbGJlaW5nIG9mIHRoZWlyIEtleSBXb3JrZXJzLoMCU3RhZmY6IEN1cnJlbnRseSBlbXBsb3llZCBzdGFmZiB3b3JraW5nIHdpdGhpbiB0aGUgc2VydmljZSAoWW9vcmFsbGEncyBDaGlsZHJlbidzIFNlcnZpY2VzIEVhcmx5IENoaWxkaG9vZCBJbnRlcnZlbnRpb24gU2VydmljZSkgcmVjZWl2aW5nIHRoZSBpbnRlcnZlbnRpb24uIDxiciAvPlBhcmVudHM6IFBhcmVudHMgd2hvIGFjY2VzcyB0aGUgRWFybHkgQ2hpbGRob29kIEludGVydmVudGlvbiBTZXJ2aWNlIHJlY2VpdmluZyB0aGUgaW50ZXJ2ZW50aW9uIAgxOCBZZWFycwkgTm8gbGltaXQWQm90aCBtYWxlcyBhbmQgZmVtYWxlcxZObyBleGNsdXNpb24gY3JpdGVyaWEuDmV4cGFuZGFibGUtYm94ClVuaXZlcnNpdHkbVGhlIFVuaXZlcnNpdHkgb2YgTWVsYm91cm5lK0xldmVsIDUsIDIwNyBCb3V2ZXJpZSBTdCwgQ2FybHRvbiwgVklDIDMwNTMJQXVzdHJhbGlhBE1pc3MKRGFuYSBZb3VuZ8wBSmFjayBCcm9ja2hvZmYgQ2hpbGQgSGVhbHRoIGFuZCBXZWxsYmVpbmcgUHJvZ3JhbSwgVGhlIENlbnRyZSBmb3IgSGVhbHRoIEVxdWl0eSwgTWVsYm91cm5lIFNjaG9vbCBvZiBQb3B1bGF0aW9uIGFuZCBHbG9iYWwgSGVhbHRoLCBUaGUgVW5pdmVyc2l0eSBvZiBNZWxib3VybmUsIExldmVsIDUsIDIwNyBCb3V2ZXJpZSBTdCwgQ2FybHRvbiwgVmljLCAzMDU3CUF1c3RyYWxpYQ4rNjEgMyA5MDM1OTg3MBlkYW5hLnlvdW5nQHVuaW1lbGIuZWR1LmF1BmhpZGRlbmQCDw8UKwAEDxYEHwVlHwNnZGRkPCsABAEAFgIfAmVkAhEPFgIfAWhkAhMPZBYGAgMPDxYCHw1lZGQCBQ8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3MjU3OC5wZGY%2FdD0xNDFkZAIvDzwrAAQBAA8WAh8DZ2RkAh0PZBYWZg8VAhByZXN1bHRzLWhlYWRlci0xEVRyaWFsIGZyb20gQU5aQ1RSZAIBDw8WAh8NBT1%2BL1RyaWFsL1JlZ2lzdHJhdGlvbi9UcmlhbFJldmlldy5hc3B4P2lkPTM3Mzg4MiZpc1Jldmlldz10cnVlZGQCAw8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3Mzg4Mi5wZGY%2FdD0xNDFkZAIHDw8WAh8CBQYzNzM4ODJkZAIJDw8WAh8CBQ4xMjYxNzAwMTUyOTMzNmRkAgsPDxYCHwJlZGQCDQ8PFgIfAgUFRmFsc2VkZAIODxUtEHJlc3VsdHMtaGVhZGVyLTJTVGhlIGVmZmVjdCBvZiByZXRpbmFsIGltYWdlIGRlZm9jdXMgb24gY2hvcm9pZGFsIGJsb29kIGZsb3cgaW4gaGVhbHRoeSB5b3VuZyBhZHVsdHMKUmVjcnVpdGluZwdpbmZvLWxpCEFwcHJvdmVkB2luZm8tbGkaUmV0cm9zcGVjdGl2ZWx5IHJlZ2lzdGVyZWQxSGFzIHRoZSB0cmlhbCBiZWVuIHVwZGF0ZWQgaW4gdGhlIGxhc3QgMTIgbW9udGhzPwpVcCB0byBkYXRlCTMvMTEvMjAxNxJyZXN1bHRzLWhlYWRlci0xMDAIQXBwcm92ZWQKVXAgdG8gZGF0ZRNBQ1RSTjEyNjE3MDAxNTI5MzM2EDAzIE5vdmVtYmVyIDIwMTcEc2hvdxlJc2NoZW1pYyByZXRpbmFsIGRpc2Vhc2VzBHNob3cLTmV3IFplYWxhbmQGaGlkZGVuAARzaG93BHNob3cKUmVjcnVpdGluZwNuL2EEc2hvdwhBcHByb3ZlZNELUmV0aW5hbCBpc2NoZW1pYSBwbGF5cyBhIHNpZ25pZmljYW50IHJvbGUgaW4gdGhlIHBhdGhvZ2VuZXNpcyBvZiBhZ2UtcmVsYXRlZCBtYWN1bGFyIGRlZ2VuZXJhdGlvbiAoQU1EKSBhbmQgZGlhYmV0aWMgcmV0aW5vcGF0aHkgKERSKS0gdHdvIG9mIHRoZSBtb3N0IGNvbW1vbiBzaWdodC10aHJlYXRlbmluZyBkaXNlYXNlcyBpbiB0aGUgZGV2ZWxvcGVkIHdvcmxkLiBUcmVhdG1lbnQgb3B0aW9ucyBmb3IgdGhlc2UgY29uZGl0aW9ucyBhcmUgbGltaXRlZCBhbmQgdGhlcmUgaXMgYSBzaWduaWZpY2FudCBpbnRlcmVzdCBpbiBkZXZlbG9waW5nIG1ldGhvZHMgZm9yIGluY3JlYXNpbmcgb2N1bGFyIGJsb29kIGZsb3cgc28gYXMgdG8gcmVkdWNlZCBpc2NoZW1pYSBhbmQgaW5oaWJpdCBkaXNlYXNlIHByb2dyZXNzaW9uLiBJbiBoZWFsdGh5IGV5ZXMsIDcwJSBvZiBibG9vZCBmbG93IHBhc3NlcyB0aHJvdWdoIHRoZSBvY3VsYXIgY2hvcm9pZCBidXQgaW4gYm90aCBBTUQgYW5kIERSIHRoZSB0aGlja25lc3Mgb2YgdGhlIGNob3JvaWQgaXMgc2lnbmlmaWNhbnRseSByZWR1Y2VkLiBJbnRlcmVzdGluZ2x5LCB0aGUgY2hvcm9pZCBoYXMgYSByZW1hcmthYmxlIGNhcGFjaXR5IHRvIGluY3JlYXNlIGl0cyB0aGlja25lc3Mgd2hlbiBleHBvc2VkIHRvIHNob3J0LXRlcm0gbXlvcGljIGRlZm9jdXMtIGEgY29uZGl0aW9uIGluIHdoaWNoIHRoZSBpbWFnZSBpcyBmb3JtZWQgaW4gZnJvbnQgb2YgdGhlIHJldGluYS4gQmVjYXVzZSB0aGUgY2hvcm9pZCBpcyBsYXJnZWx5IGEgdmFzY3VsYXIgdGlzc3VlLCB0aGlzIHJhcGlkIGFuZCB0cmFuc2llbnQgY2hvcm9pZGFsIHJlc3BvbnNlIHRvIGRlZm9jdXMgaXMgcHJlc3VtYWJseSBkcml2ZW4gYnkgY2hhbmdlcyBpbiBibG9vZCBmbG93LiBUaGlzIHByb2plY3QgYWltcyB0byB0cmFuc2xhdGUgdGhpcyBmaW5kaW5nIGludG8gYSBjbGluaWNhbCBhcHBsaWNhdGlvbiwgYW5kIHVzZSBjb250YWN0IGxlbnMtaW5kdWNlZCByZXRpbmFsIGRlZm9jdXMgYXMgYSBwb3RlbnRpYWwgbmV3IHRyZWF0bWVudCB0byBpbmNyZWFzZSBjaG9yb2lkYWwgdGhpY2tuZXNzIGFuZCBibG9vZCBmbG93IGluIHBhdGllbnRzIHdpdGggQU1EIGFuZCBEUiBzbyBhcyB0byByZWR1Y2UgaXNjaGVtaWEgYW5kIGltcHJvdmUgdmlzdWFsIG91dGNvbWVzLjxiciAvPjxiciAvPlRoZSBwcmltYXJ5IHB1cnBvc2Ugb2YgdGhlIHN0dWR5IGlzIHRvIGludmVzdGlnYXRlIHdoZXRoZXIgdGhlIGFwcGxpY2F0aW9uIG9mIGRlZm9jdXNzaW5nIGNvbnRhY3QgbGVucyBlbmhhbmNlcyBibG9vZCBmbG93IGluIHRoZSBwb3N0ZXJpb3IgZXllLiBXZSBoeXBvdGhlc2l6ZSB0aGF0IGEgc2hvcnQtdGVybSB3ZWFyIG9mIGRlZm9jdXNzaW5nIGNvbnRhY3QgbGVucywga25vd24gdG8gcHJvZHVjZSB0aGlja25lc3MgY2hhbmdlcyBpbiB0aGUgcG9zdGVyaW9yIGV5ZSwgcmVzdWx0cyBpbiBhbiBpbmNyZWFzZSBpbiBibG9vZCBmbG93LmYxOC0zNSB5ZWFycyBvbGQgaGVhbHRoeSBzdWJqZWN0czxiciAvPm5vcm1hbCBvciBjb3JyZWN0ZWQgdG8gbm9ybWFsIHZpc2lvbiB3aXRoIGdsYXNzZXMvY29udGFjdCBsZW5zZXMIMTggWWVhcnMIMzUgWWVhcnMWQm90aCBtYWxlcyBhbmQgZmVtYWxlc7kCUmVmcmFjdGl2ZSBlcnJvciBncmVhdGVyIHRoYW4gLTMuMDBEUyBvciArMy4wMEQgc3BoZXJpY2FsIGVxdWl2YWxlbnQgd2l0aCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGV5ZXMgbW9yZSB0aGFuIDEuMDBEOyBhc3RpZ21hdGlzbSBncmVhdGVyIHRoYW4gMS4wMEQ7IGFtYmx5b3BpYSwgYW55IHVuZGVybHlpbmcgb2N1bGFyIHBhdGhvbG9neSBvciBwcmV2aW91cyBoaXN0b3J5IG9mIG9jdWxhciBzdXJnZXJ5OyBhbmQgcHJldmlvdXMgaGlzdG9yeSBvZiBteW9waWEgY29udHJvbCB0cmVhdG1lbnQgKHN1Y2ggYXMgT3J0aG8tSyBhbmQgYXRyb3BpbmUpLg5leHBhbmRhYmxlLWJveApVbml2ZXJzaXR5GlRoZSBVbml2ZXJzaXR5IG9mIEF1Y2tsYW5kkgFTY2hvb2wgb2YgT3B0b21ldHJ5IGFuZCBWaXNpb24gU2NpZW5jZTxiciAvPlRoZSBVbml2ZXJzaXR5IG9mIEF1Y2tsYW5kPGJyIC8%2BODUgUGFyayBSb2FkLCBHcmFmdG9uLCBBdWNrbGFuZDxiciAvPjEwMjM8YnIgLz5OZXcgWmVhbGFuZDxiciAvPjxiciAvPgtOZXcgWmVhbGFuZAJEcgxTYWZhbCBLaGFuYWx5U2Nob29sIG9mIE9wdG9tZXRyeSBhbmQgVmlzaW9uIFNjaWVuY2U8YnIgLz5UaGUgVW5pdmVyc2l0eSBvZiBBdWNrbGFuZDxiciAvPjg1IFBhcmsgUm9hZCwgR3JhZnRvbjxiciAvPjEwMjM8YnIgLz5BdWNrbGFuZAtOZXcgWmVhbGFuZA0rNjQgOSA5MjM3ODY5F3Mua2hhbmFsQGF1Y2tsYW5kLmFjLm56BmhpZGRlbmQCDw8UKwAEDxYEHwVlHwNnZGRkPCsABAEAFgIfAmVkAhEPFgIfAWhkAhMPZBYGAgMPDxYCHw1lZGQCBQ8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3Mzg4Mi5wZGY%2FdD0xNDFkZAIvDzwrAAQBAA8WAh8DZ2RkAh8PZBYWZg8VAhByZXN1bHRzLWhlYWRlci0xEVRyaWFsIGZyb20gQU5aQ1RSZAIBDw8WAh8NBT1%2BL1RyaWFsL1JlZ2lzdHJhdGlvbi9UcmlhbFJldmlldy5hc3B4P2lkPTM3MzkwMiZpc1Jldmlldz10cnVlZGQCAw8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3MzkwMi5wZGY%2FdD0xNDFkZAIHDw8WAh8CBQYzNzM5MDJkZAIJDw8WAh8CBQ4xMjYxNzAwMTUyODM0N2RkAgsPDxYCHwJlZGQCDQ8PFgIfAgUFRmFsc2VkZAIODxUtEHJlc3VsdHMtaGVhZGVyLTJEQW50aWJpb3RpYyBQcm9waHlsYXhpcyBpbiBCZW5pZ24gR3luYWVjb2xvZ2ljYWwgTGFwYXJvc2NvcGljIFN1cmdlcnkSTm90IHlldCByZWNydWl0aW5nB2luZm8tbGkbU3VibWl0dGVkLCBub3QgeWV0IGFwcHJvdmVkB2luZm8tbGkrUHJvc3BlY3RpdmVseSByZWdpc3RlcmVkPGJyIC8%2BKHByb3Zpc2lvbmFsKTFIYXMgdGhlIHRyaWFsIGJlZW4gdXBkYXRlZCBpbiB0aGUgbGFzdCAxMiBtb250aHM%2FClVwIHRvIGRhdGUJMy8xMS8yMDE3EnJlc3VsdHMtaGVhZGVyLTEwMBtTdWJtaXR0ZWQsIG5vdCB5ZXQgYXBwcm92ZWQKVXAgdG8gZGF0ZRRBQ1RSTjEyNjE3MDAxNTI4MzQ3cBAwMyBOb3ZlbWJlciAyMDE3BHNob3cqQmVuaWduIEd5bmFlY29sb2dpY2FsIExhcGFyb3Njb3BpYyBTdXJnZXJ5BHNob3cJQXVzdHJhbGlhBHNob3cPTmV3IFNvdXRoIFdhbGVzBHNob3cEc2hvdxJOb3QgeWV0IHJlY3J1aXRpbmcQMDUgRmVicnVhcnkgMjAxOARzaG93G1N1Ym1pdHRlZCwgbm90IHlldCBhcHByb3ZlZN8QU3VyZ2ljYWwgc2l0ZSBpbmZlY3Rpb25zIGFyZSByZWNvZ25pc2VkIGFzIGEgY29tbW9uIHN1cmdpY2FsIGNvbXBsaWNhdGlvbiwgYW5kIHRoZSB1c2Ugb2YgYW50aWJpb3RpYyBwcm9waHlsYXhpcyBoYXMgYmVjb21lIGFuIGltcG9ydGFudCBtZXRob2Qgb2YgcmVkdWNpbmcgdGhlIHJpc2sgb2YgaW5mZWN0aW9uLiAgSG93ZXZlciwgZ2l2ZW4gaW5jcmVhc2luZyBjb25jZXJucyByZWdhcmRpbmcgYW50aWJpb3RpYyByZXNpc3RhbmNlLCBpdCBpcyBpbXBvcnRhbnQgdGhhdCB0aGUgdXNlIG9mIGFudGliaW90aWMgcHJvcGh5bGF4aXMgYmUgZXZpZGVuY2UgYmFzZWQuICBMb2NhbCBhbmQgaW50ZXJuYXRpb25hbCBndWlkZWxpbmVzIGF0dGVtcHQgdG8gYWlkIGNsaW5pY2lhbnMgYnkgb3V0bGluaW5nIHRoZSBldmlkZW5jZSBhdmFpbGFibGUgZm9yIHByb3BoeWxheGlzIGZvciB2YXJpb3VzIGd5bmFlY29sb2dpY2FsIHByb2NlZHVyZXMuICBUaGUgY3VycmVudCBBdXN0cmFsaWFuIFRoZXJhcGV1dGljIEd1aWRlbGluZXMgcmVjb21tZW5kIGFudGliaW90aWMgcHJvcGh5bGF4aXMgZm9yIGh5c3RlcmVjdG9teSwgdGVybWluYXRpb24gb2YgcHJlZ25hbmN5IGFuZCBjYWVzYXJlYW4gZGVsaXZlcnksIHdpdGggbm8gc3BlY2lmaWMgcmVmZXJlbmNlIHRvIG5vbi1oeXN0ZXJlY3RvbXkgY29tcGxleCBsYXBhcm9zY29waWMgcHJvY2VkdXJlcy4gIDxiciAvPkFsdGhvdWdoIGFuYXBoeWxhY3RpYyByZWFjdGlvbnMgdG8gY2VwaGFsb3Nwb3JpbnMgYXJlIHJlcG9ydGVkIHRvIGJlIHJhcmUgKDAuMDAxIHRvIDAuMSUpLCBza2luIHJlYWN0aW9ucyBzdWNoIGFzIHVydGljYXJpYSwgcmFzaCwgZXhhbnRoZW0gYW5kIHBydXJpdGlzIG9jY3VyIGluIDEtMyUgb2YgcGF0aWVudHMuIE90aGVyIHJlcG9ydGVkIHJlYWN0aW9ucyBpbmNsdWRlIHNlcnVtLXNpY2tuZXNzLWxpa2UgcmVhY3Rpb24sIGZldmVyIGFuZCBpbW11bm9oZW1hdG9sb2dpYyByZWFjdGlvbnMuICBBZGRpdGlvbmFsbHksIHRoZSBwb3RlbnRpYWwgY29zdHMgb2YgYW50aWJpb3RpYyByZXNpc3RhbmNlIG1lYW4gYWxsIGNsaW5pY2lhbnMgaGF2ZSBhIGhlaWdodGVuZWQgcmVzcG9uc2liaWxpdHkgdG8gZW5zdXJlIGFkbWluaXN0cmF0aW9uIG9mIGFudGliaW90aWNzIGlzIGZvciBhcHByb3ByaWF0ZSBpbmRpY2F0aW9ucy48YnIgLz5NZWRpY2FyZSBkYXRhIHNob3dzIHRoYXQgYXQgbGVhc3QgMjUwMDAgbm9uLWh5c3RlcmVjdG9teSwgb3BlcmF0aXZlIGxhcGFyb3Njb3BpYyBneW5hZWNvbG9naWNhbCBwcm9jZWR1cmVzIHdlcmUgcGVyZm9ybWVkIGluIEF1c3RyYWxpYSBsYXN0IHllYXIuICBJbiB2aWV3IG9mIHRoZSBmcmVxdWVuY3kgd2l0aCB3aGljaCBzdWNoIHN1cmdlcnkgaXMgcGVyZm9ybWVkLCB0aGVyZSBpcyBhIGNsZWFyIG5lZWQgZm9yIGFuIGFwcHJvcHJpYXRlbHkgcG93ZXJlZCBzdHVkeSB0byBleGFtaW5lIHdoZXRoZXIgdGhlcmUgaXMgYSByb2xlIGZvciBhbnRpYmlvdGljIHByb3BoeWxheGlzIGZvciBub24taHlzdGVyZWN0b215IGxhcGFyb3Njb3BpYyBzdXJnZXJ5IGluIGd5bmFlY29sb2d5LiAgVG8gZW5zdXJlIHRoaXMgYSBzdHVkeSBvZiB0aGlzIG1hZ25pdHVkZSBjYW4gYmUgY2FycmllZCBvdXQgY29ycmVjdGx5LCBpdCBpcyBlc3NlbnRpYWwgdG8gcGVyZm9ybSB0aGlzIHBpbG90IHN0dWR5IHRvIGFzc2VzcyB0aGUgZmVhc2liaWxpdHkgb2YgZnV0dXJlIHN0dWRpZXMuICBHaXZlbiB0aGUgcG90ZW50aWFsIGNvc3RzIHRvIGJvdGggcGF0aWVudHMgYW5kIHRoZSBoZWFsdGgtY2FyZSBzeXN0ZW0gb2YgcG9zdC1vcGVyYXRpdmUgaW5mZWN0aW91cyBtb3JiaWRpdHksIGFzIHdlbGwgYXMgdGhlIGNvc3RzIG9mIHVzaW5nIGFudGliaW90aWNzLCBpbmNsdWRpbmcgdGhlIGFjdHVhbCBjb3N0IG9mIGRydWcgYWRtaW5pc3RyYXRpb24sIGFkdmVyc2UgcmVhY3Rpb25zIGluIGluZGl2aWR1YWwgcGF0aWVudHMsIGFuZCBwb3RlbnRpYWwgaW5jcmVhc2VzIGluIGFudGliaW90aWMgcmVzaXN0YW5jZSwgdGhlIHJlc3VsdHMgb2YgdGhpcyBzdHVkeSBoYXZlIHRoZSBwb3RlbnRpYWwgdG8gc2lnbmlmaWNhbnRseSBpbXBhY3QgYm90aCBsb2NhbCBhbmQgaW50ZXJuYXRpb25hbCBwb2xpY3kgaW4gdGhpcyBhcmVhLoUEMS4JUGF0aWVudHMgcmVxdWlyaW5nIGFuIGVsZWN0aXZlIGxhcGFyb3Njb3BpYyBwcm9jZWR1cmUgKHRoYXQgZG9lcyBub3QgaW5jbHVkZSBoeXN0ZXJlY3RvbXkpIGZvciBhIGJlbmlnbiBneW5hZWNvbG9naWNhbCBjb25kaXRpb24gYXMgZGV0ZXJtaW5lZCBqb2ludGx5IGJ5IHRoZSBzdXJnZW9uIGFuZCB0aGUgcGF0aWVudC48YnIgLz4yLglFbmdsaXNoIHNwZWFraW5nLjxiciAvPjMuCU92ZXIgMTggeWVhcnMgb2YgYWdlIGF0IHRpbWUgb2Ygc3VyZ2VyeS48YnIgLz40LglQYXRpZW50cyB3aG8gdW5kZXJzdGFuZCB0aGUgY29uZGl0aW9ucyBvZiB0aGUgc3R1ZHkgYW5kIGFyZSB3aWxsaW5nIHRvIHBhcnRpY2lwYXRlIGZvciB0aGUgbGVuZ3RoIG9mIHRoZSBwcmVzY3JpYmVkIHRlcm0gb2YgZm9sbG93LXVwLiA8YnIgLz41LglQYXRpZW50cyB3aG8gYXJlIGNhcGFibGUgb2YsIGFuZCBoYXZlIGdpdmVuLCBpbmZvcm1lZCBjb25zZW50IHRvIHRoZWlyIHBhcnRpY2lwYXRpb24gaW4gdGhlIHN0dWR5LjxiciAvPggxOCBZZWFycwkgTm8gbGltaXQHRmVtYWxlc4ICMS4JUHJlZ25hbnQgd29tZW4uPGJyIC8%2BMi4JSW1tdW5vY29tcHJvbWlzZWQgcGF0aWVudHMuPGJyIC8%2BMy4JUGF0aWVudHMgd2l0aCBhIGRvY3VtZW50ZWQgaGlzdG9yeSBvZiBjZXBoYWxvc3BvcmluIGFsbGVyZ3k8YnIgLz40LglQYXRpZW50cyB3aXRoIGEgZG9jdW1lbnRlZCBoaXN0b3J5IG9mIG1ham9yIHBlbmljaWxsaW4gYWxsZXJneTxiciAvPjUuCUN1cnJlbnQgaW52b2x2ZW1lbnQgaW4gYW55IG90aGVyIHJlc2VhcmNoIHByb2plY3QuPGJyIC8%2BDmV4cGFuZGFibGUtYm94CEhvc3BpdGFsGFJveWFsIEhvc3BpdGFsIGZvciBXb21lbiJCYXJrZXIgU3QsIDxiciAvPlJhbmR3aWNrIE5TVyAyMDMxCUF1c3RyYWxpYQZBL1Byb2YMSmFzb24gQWJib3R0P1JveWFsIEhvc3BpdGFsIGZvciBXb21lbjxiciAvPkJhcmtlciBTdHJlZXQsIFJhbmR3aWNrLCBOU1cgMjAzMQlBdXN0cmFsaWEMKzYxMjkzODI2MTExFGouYWJib3R0QHVuc3cuZWR1LmF1BmhpZGRlbmQCDw8UKwAEDxYEHwVlHwNnZGRkPCsABAEAFgIfAmVkAhEPFgIfAWhkAhMPZBYGAgMPDxYCHw1lZGQCBQ8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3MzkwMi5wZGY%2FdD0xNDFkZAIvDzwrAAQBAA8WAh8DZ2RkAiEPZBYWZg8VAhByZXN1bHRzLWhlYWRlci0xEVRyaWFsIGZyb20gQU5aQ1RSZAIBDw8WAh8NBT1%2BL1RyaWFsL1JlZ2lzdHJhdGlvbi9UcmlhbFJldmlldy5hc3B4P2lkPTM3Mzg3MSZpc1Jldmlldz10cnVlZGQCAw8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3Mzg3MS5wZGY%2FdD0xNDFkZAIHDw8WAh8CBQYzNzM4NzFkZAIJDw8WAh8CBQ4xMjYxNzAwMTUyNzM1OGRkAgsPDxYCHwJlZGQCDQ8PFgIfAgUFRmFsc2VkZAIODxUtEHJlc3VsdHMtaGVhZGVyLTKLAVVzZSBvZiBleGNpdGVCQ0kgZm9yIHRlY2hub2xvZ3kgYXNzaXN0ZWQgc3Ryb2tlIHJlaGFiaWxpdGF0aW9uOiBVc2FiaWxpdHkgYW5kDQphY2NlcHRhYmlsaXR5IGZvciBwaHlzaW90aGVyYXBpc3RzIGFuZCBwZW9wbGUgd2l0aCBzdHJva2UuDQoSTm90IHlldCByZWNydWl0aW5nB2luZm8tbGkIQXBwcm92ZWQHaW5mby1saRhQcm9zcGVjdGl2ZWx5IHJlZ2lzdGVyZWQxSGFzIHRoZSB0cmlhbCBiZWVuIHVwZGF0ZWQgaW4gdGhlIGxhc3QgMTIgbW9udGhzPwpVcCB0byBkYXRlCTMvMTEvMjAxNxJyZXN1bHRzLWhlYWRlci0xMDAIQXBwcm92ZWQKVXAgdG8gZGF0ZRNBQ1RSTjEyNjE3MDAxNTI3MzU4EDAzIE5vdmVtYmVyIDIwMTcEc2hvdwZTdHJva2UEc2hvdwtOZXcgWmVhbGFuZAZoaWRkZW4ABHNob3cEc2hvdxJOb3QgeWV0IHJlY3J1aXRpbmcQMTAgTm92ZW1iZXIgMjAxNwRzaG93CEFwcHJvdmVk7QdUaGUgYWltIG9mIHRoaXMgcmVzZWFyY2ggaXMgdG8gaW52ZXN0aWdhdGUgdGhlIHVzYWJpbGl0eSBhbmQgYWNjZXB0YWJpbGl0eSBvZiBleGNpdGVCQ0kgYSB3ZWFyYWJsZSByZWhhYmlsaXRhdGlvbiBkZXZpY2UgdGhhdCBpcyBpbiBhIGRldmVsb3BtZW50IGFuZCByZWZpbmVtZW50IHBoYXNlLCB3aGljaCBhaW1zIHRvIGltcHJvdmUgd2Fsa2luZyBhYmlsaXR5IGluIHBlb3BsZSB3aXRoIHN0cm9rZS4gVGhlIGludGVydmVudGlvbiBoYXMgYmVlbiB0ZXN0ZWQgcHJldmlvdXNseSBhbmQgc2hvd24gdG8gYmUgc2FmZSBhbmQgZWZmZWN0aXZlIHdoZW4gZGVsaXZlcmVkIHVzaW5nIGxhYm9yYXRvcnkgYmFzZWQgZXF1aXBtZW50LiBXZSBhcmUgbWFraW5nIGEgc21hbGxlciwgbGlnaHRlciwgcG9ydGFibGUgdmVyc2lvbiBvZiB0aGUgbGFib3JhdG9yeSBkZXZpY2UsIHdoaWNoIGNhbiBiZSB1c2VkIGluIGNsaW5pY2FsIHNldHRpbmdzLiBXZSB3YW50IHRvIG9ic2VydmUgcGVvcGxlIHdpdGggc3Ryb2tlIGFuZCB0aGVyYXBpc3RzIHdoaWxlIHRoZXkgdXNlIHRoZSBkZXZpY2UsIGFuZCB0aGVuIGludGVydmlldyB0aGVtIHRvIGZpbmQgb3V0IHdoYXQgdGhleSB0aGluayBhYm91dCB0aGUgZXhjaXRlQkNJIGFuZCBob3cgaXQgY291bGQgYmUgbWFkZSBiZXR0ZXIuIFdlIHdpbGwgdXNlIHRoZXNlIGZpbmRpbmdzIHRvIG1vZGlmeSB0aGUgZGV2aWNlIHRvIGltcHJvdmUgaXRzIHVzYWJpbGl0eSBhbmQgYWNjZXB0YWJpbGl0eSB0byBjbGluaWNpYW5zIGFuZCBwZW9wbGUgd2l0aCBzdHJva2UuIEZvbGxvd2luZyB0aGUgaW5jb3Jwb3JhdGlvbiBvZiB1c2FiaWxpdHkgZmVlZGJhY2ssIHR3byBzdHJva2UgcGFydGljaXBhbnRzIHdpbGwgdGFrZSBwYXJ0IGluIGEgMyB3ZWVrIHBoeXNpb3RoZXJhcHkgaW50ZXJ2ZW50aW9uIGluIHdoaWNoIHN0YW5kYXJkIHBoeXNpb3RoZXJhcHkgZXhlcmNpc2VzIHdpbGwgYmUgc3VwcGxlbWVudGVkIHdpdGggdGhlIGV4Y2l0ZUJDSS48YnIgLz6kA1N0cm9rZSBwYXJ0aWNpcGFudHMgd2hvIG1lZXQgdGhlIGZvbGxvd2luZyBpbmNsdXNpb24gY3JpdGVyaWEgd2lsbCBiZSBjb25zaWRlcmVkOjxiciAvPuKAoiBBZ2VkIDE4IHllYXJzIG9yIG1vcmU8YnIgLz7igKIgU3Ryb2tlIHdpdGggaGVtaXBhcmVzaXMgYWZmZWN0aW5nIHRoZWlyIGFiaWxpdHkgdG8gbW92ZSB0aGVpciBhbmtsZTxiciAvPlBoeXNpb3RoZXJhcGlzdCBwYXJ0aWNpcGFudHMgaW4gdGhlIHVzYWJpbGl0eSB0cmlhbCAocGFydCAxKSB3aWxsIGJlIGluY2x1ZGVkIGlmOjxiciAvPuKAoiBUaGV5IGhhdmUgNSB5ZWFyc%2BKAmSBleHBlcmllbmNlIGluIG5ldXJvbG9naWNhbCByZWhhYmlsaXRhdGlvbjxiciAvPuKAoiBBcmUgYWJsZSB0byBhdHRlbmQgYSBkYXRhIGNvbGxlY3Rpb24gc2Vzc2lvbiBhdCBBVVQgVW5pdmVyc2l0eQgxOCBZZWFycwkgTm8gbGltaXQWQm90aCBtYWxlcyBhbmQgZmVtYWxlc5ICU3Ryb2tlIFBhcnRpY2lwYW50cyB3aWxsIGJlIGV4Y2x1ZGVkIGlmIHRoZXk6PGJyIC8%2B4oCiIGFyZSB1bmFibGUgdG8gZW5nYWdlIGluIHRoZSB0ZXN0aW5nIGR1ZSB0byBzaWduaWZpY2FudCBjb2duaXRpdmUsIHBlcmNlcHR1YWwgb3IgY29tbXVuaWNhdGlvbiBkZWZpY2l0czxiciAvPuKAoiBoYXZlIGhhZCBhIGNlcmViZWxsYXIgc3Ryb2tlPGJyIC8%2B4oCiIGhhdmUgYW5vdGhlciBtZWRpY2FsIGNvbmRpdGlvbiB0aGF0IG1heSBpbXBhY3QgdGhlIHRlc3Rpbmcgb3IgcmVzdWx0cw5leHBhbmRhYmxlLWJveApVbml2ZXJzaXR5IkF1Y2tsYW5kIFVuaXZlcnNpdHkgb2YgVGVjaG5vbG9neSCWAUhlYWx0aCBhbmQgUmVoYWJpbGl0YXRpb24gUmVzZWFyY2ggSW5zdGl0dXRlLCBGYWN1bHR5IG9mIEhlYWx0aCBhbmQgRW52aXJvbm1lbnRhbCBTY2llbmNlLCBBVVQgVW5pdmVyc2l0eSw8YnIgLz5Qcml2YXRlIEJhZyA5MjAwNiw8YnIgLz5BdWNrbGFuZCAxMTQyLgtOZXcgWmVhbGFuZARNaXNzDEdlbW1hIEFsZGVyIJYBSGVhbHRoIGFuZCBSZWhhYmlsaXRhdGlvbiBSZXNlYXJjaCBJbnN0aXR1dGUsIEZhY3VsdHkgb2YgSGVhbHRoIGFuZCBFbnZpcm9ubWVudGFsIFNjaWVuY2UsIEFVVCBVbml2ZXJzaXR5LDxiciAvPlByaXZhdGUgQmFnIDkyMDA2LDxiciAvPkF1Y2tsYW5kIDExNDIuC05ldyBaZWFsYW5kFys2NCA5IDkyMSA5OTk5IGV4dCA3ODE1EGdhbGRlckBhdXQuYWMubnoGaGlkZGVuZAIPDxQrAAQPFgQfBWUfA2dkZGQ8KwAEAQAWAh8CZWQCEQ8WAh8BaGQCEw9kFgYCAw8PFgIfDWVkZAIFDw8WAh8NBSYvVHJpYWxQZGYvVHJpYWxSZXZpZXctMzczODcxLnBkZj90PTE0MWRkAi8PPCsABAEADxYCHwNnZGQCIw9kFhZmDxUCEHJlc3VsdHMtaGVhZGVyLTERVHJpYWwgZnJvbSBBTlpDVFJkAgEPDxYCHw0FPX4vVHJpYWwvUmVnaXN0cmF0aW9uL1RyaWFsUmV2aWV3LmFzcHg%2FaWQ9MzcyOTY0JmlzUmV2aWV3PXRydWVkZAIDDw8WAh8NBSYvVHJpYWxQZGYvVHJpYWxSZXZpZXctMzcyOTY0LnBkZj90PTE0MWRkAgcPDxYCHwIFBjM3Mjk2NGRkAgkPDxYCHwIFDjEyNjE3MDAxNTI0MzgxZGQCCw8PFgIfAmVkZAINDw8WAh8CBQVGYWxzZWRkAg4PFS0QcmVzdWx0cy1oZWFkZXItMl1BIHJhbmRvbWlzZWQgdHJpYWwgb2YgY29sY2hpY2luZSBmb3IgcmVkdWNpbmcgb3N0ZW9hcnRocml0aXMtcmVsYXRlZCBwYWluIGluIHRoZSBoYW5kIChDT0xBSCkSTm90IHlldCByZWNydWl0aW5nB2luZm8tbGkIQXBwcm92ZWQHaW5mby1saRhQcm9zcGVjdGl2ZWx5IHJlZ2lzdGVyZWQxSGFzIHRoZSB0cmlhbCBiZWVuIHVwZGF0ZWQgaW4gdGhlIGxhc3QgMTIgbW9udGhzPwpVcCB0byBkYXRlCTIvMTEvMjAxNxJyZXN1bHRzLWhlYWRlci0xMDAIQXBwcm92ZWQKVXAgdG8gZGF0ZRNBQ1RSTjEyNjE3MDAxNTI0MzgxEDAyIE5vdmVtYmVyIDIwMTcEc2hvdxVIYW5kIE9zdGVvYXJ0aHJpdGlzDQoEc2hvdwlBdXN0cmFsaWEEc2hvdw9Tb3V0aCBBdXN0cmFsaWEEc2hvdwRzaG93Ek5vdCB5ZXQgcmVjcnVpdGluZxAyMCBOb3ZlbWJlciAyMDE3BHNob3cIQXBwcm92ZWSwF0JBQ0tHUk9VTkQ6IE9zdGVvYXJ0aHJpdGlzIChPQSkgaXMgdGhlIG1vc3QgY29tbW9uIGpvaW50IGRpc2Vhc2UgYW5kIGZyZXF1ZW50bHkgaW52b2x2ZXMgdGhlIGhhbmQuIFBhaW5mdWwgaGFuZCBPQSBpcyBhc3NvY2lhdGVkIHdpdGggYSBzaWduaWZpY2FudCBkaXNlYXNlIGJ1cmRlbiBhbmQgcmVkdWNlZCBxdWFsaXR5IG9mIGxpZmUuIEluZGVlZCwgdGhlIGVmZmVjdCBvZiBzeW1wdG9tYXRpYyBoYW5kIE9BIG9uIHF1YWxpdHkgb2YgbGlmZSBpcyBjb21wYXJhYmxlIHRvIHJoZXVtYXRvaWQgYXJ0aHJpdGlzLCBidXQgYWZmZWN0cyBjb25zaWRlcmFibHkgbW9yZSBwZW9wbGUgKHByZXZhbGVuY2UgfjIwJSB2ZXJzdXMgfjElIGluIG9sZGVyIGFkdWx0cykuIFdpdGggYW4gYWdlaW5nIHBvcHVsYXRpb24sIHRoZSBidXJkZW4gYW5kIGhlYWx0aC1jYXJlIGNvc3RzIHJlbGF0ZWQgdG8gaGFuZCBPQSB3aWxsIGluY3JlYXNlLiBQYXRpZW50cyBvZnRlbiByZWx5IG9uIE5TQUlEcyBvciBvcGlhdGVzIHdpdGggY29uY29taXRhbnQgYWR2ZXJzZSBlZmZlY3RzIGluIHRoaXMgYWdlIGdyb3VwIHRvIGNvbnRyb2wgcGFpbi4gIEhhbmQgT0EgaXMgYSBoZXRlcm9nZW5lb3VzIGNvbmRpdGlvbiB3aXRoIGFwcHJveGltYXRlbHkgNTAlIG9mIHBhdGllbnRzIGhhdmluZyBldmlkZW5jZSBvZiBzeW5vdml0aXMuIFRoaXMgcGhlbm90eXBlIG9mIGhhbmQgT0Egd2l0aCBpbmZsYW1tYXRvcnkgc2lnbnMgaS5lLiB0aG9zZSB3aXRoIGV2aWRlbmNlIG9mIHN5bm92aXRpcyBpcyBhc3NvY2lhdGVkIHdpdGggaW5jcmVhc2VkIHBhaW4uIEluIGFkZGl0aW9uLCBoYW5kIE9BIGpvaW50cyB3aXRoIHN5bm92aXRpcyBhcmUgMy41IHRpbWVzIG1vcmUgbGlrZWx5IHRvIGV4cGVyaWVuY2UgcmFwaWQgam9pbnQgZGVzdHJ1Y3Rpb24gYW5kIHJhZGlvZ3JhcGhpYyBwcm9ncmVzc2lvbiB0aGFuIHRob3NlIHdpdGhvdXQgc3lub3ZpdGlzLiBVbHRyYXNvdW5kIChVUykgaGFzIGJlZW4gc2hvd24gdG8gcmVsaWFibHkgZGV0ZWN0IHN5bm92aXRpcyBpbiB0aGUgam9pbnRzIG9mIHRoZSBoYW5kIHdoZW4gcGVyZm9ybWVkIGJ5IGFuIGV4cGVyaWVuY2VkIHRlY2huaWNpYW4uIFRoZXJlZm9yZSwgdGhpcyBpcyB0aGUgc3ViZ3JvdXAgb2YgcGF0aWVudHMgd2l0aCBoYW5kIE9BIHRoYXQgYXJlIG1vc3QgaW4gbmVlZCBvZiBldmlkZW5jZS1iYXNlZCB0aGVyYXBpZXMuIFByZXZpb3VzIHN0dWR5IHRvIGFzc2VzcyB0cmVhdG1lbnRzIGZvciBoYW5kIE9BIHVzaW5nIG9mIHBsYXF1ZW5pbCwgZXRhbmVyY2VwdCBvciBhZGFsaW11bWFiIGZvdW5kIG5vdCBzdXBlcmlvciB0byBwbGFjZWJvIHRvIGFsbGV2aWF0ZSBwYWluLiBUaGVyZSBpcyBwb3NzaWJsZSBlZmZlY3QgaWYgc3RydWN0dXJhbCBtb2RpZmljYXRpb24gd2l0aCBldGFuZXJjZXB0IGFuZCBhZGFsaW11bWFiIGhhcyBiZWVuIHNob3duIHRvIGJlIGJlbmVmaWNpYWwgaW4gZXJvc2l2ZSBhbmQgaW5mbGFtZWQgaGFuZCBPQS4gVGhlIGNvc3QgaG93ZXZlciBvZiB0aGVzZSBtZWRpY2F0aW9ucyBpbiAyMEsvcGVyIHllYXIsIHRoZXJlZm9yZSB0aGVyZSB1c2UgaXMgYW4gZXhwZW5zaXZlIGFsdGVybmF0aXZlLjxiciAvPjxiciAvPkN1cnJlbnRseSwgdGhlcmUgYXJlIG5vIHByb3ZlbiBwaGFybWFjb2xvZ2ljYWwgdHJlYXRtZW50cyBmb3IgaGFuZCBPQS4gVGhlIGxhY2sgb2YgY2F0ZWdvcml6YXRpb24gb2YgaGFuZCBPQSBhY2NvcmRpbmcgdG8gaW5mbGFtbWF0b3J5IHBoZW5vdHlwZSBtYXkgaGF2ZSBjb250cmlidXRlZCB0byBwcmV2aW91cyBuZWdhdGl2ZSBvdXRjb21lcyBpbiBjbGluaWNhbCB0cmlhbHMuICBDb3N0LWVmZmVjdGl2ZSB0aGVyYXBpZXMgdGFyZ2V0aW5nIHN5bm92aXRpcyBtYXkgb2ZmZXIgYSBub3ZlbCBhcHByb2FjaCBmb3IgcmVkdWNpbmcgZGlzZWFzZSBidXJkZW4gZnJvbSBoYW5kIE9BLiA8YnIgLz48YnIgLz5Db2xjaGljaW5lIGlzIGEgbG93IGNvc3QgZHJ1ZyB3aGljaCBoYXMgbG9uZyBiZWVuIHVzZWQgaW4gdGhlIGFudGktaW5mbGFtbWF0b3J5IHRyZWF0bWVudCBvZiBhY3V0ZSBnb3V0LiBUaGVyZSBoYXMgYmVlbiByZWNlbnQgcmVuZXdlZCBpbnRlcmVzdCBpbiB0aGlzIGFuY2llbnQgZHJ1ZywgcGFydGljdWxhcmx5IGl0cyBlZmZlY3RzIGluIGNhcmRpb3Zhc2N1bGFyIGRpc2Vhc2VzIHN1Y2ggYXMgcGVyaWNhcmRpdGlzLiBUaGUgcHJpbWFyeSBtZWNoYW5pc20gb2YgYWN0aW9uIG9mIGNvbGNoaWNpbmUgaXMgdHVidWxpbiBkaXNydXB0aW9uIGxlYWRpbmcgdG8gc3Vic2VxdWVudCBkb3duLXJlZ3VsYXRpb24gb2YgbXVsdGlwbGUgaW5mbGFtbWF0b3J5IHBhdGh3YXlzIGFuZCBtb2R1bGF0aW9uIG9mIGlubmF0ZSBpbW11bml0eS4gUHJlbGltaW5hcnkgc3R1ZGllcyBpbiBrbmVlIE9BIGhhdmUgaW5kaWNhdGVkIHRoYXQgY29sY2hpY2luZSBtYXkgaGF2ZSBhIGJlbmVmaWNpYWwgZWZmZWN0IG9uIHBhaW4gYW5kIGEgbGFyZ2VyIHJhbmRvbWl6ZWQgY2xpbmljYWwgdHJpYWwgb2YgY29sY2hpY2luZSBpbiBrbmVlIE9BIGlzIGN1cnJlbnRseSB1bmRlcndheS4gIE5vIHN0dWRpZXMgb2YgY29sY2hpY2luZSBoYXZlIGJlZW4gdW5kZXJ0YWtlbiBpbiBoYW5kIE9BLiA8YnIgLz48YnIgLz5TVFVEWSBBSU1TPGJyIC8%2BUHJpbWFyeSBoeXBvdGhlc2lzOiA8YnIgLz5Db2xjaGljaW5lIGRlY3JlYXNlcyBwYWluIChhc3Nlc3NlZCBieSAxMDBtbSBWQVMpIGJ5IDEwbW0gbW9yZSB0aGFuIGlkZW50aWNhbCBwbGFjZWJvIG92ZXIgMTIgd2Vla3MgaW4gcGF0aWVudHMgd2l0aCBjbGluaWNhbCBoYW5kIE9BLjxiciAvPjxiciAvPlNUVURZIERFU0lHTjxiciAvPlJhbmRvbWlzZWQsIHBsYWNlYm8tY29udHJvbGxlZCBkb3VibGUtYmxpbmQgY2xpbmljYWwgdHJpYWwuIDxiciAvPlRoaXMgc3R1ZHkgd2lsbCBiZSBjYXJyaWVkIG91dCBhdCBUaGUgUXVlZW4gRWxpemFiZXRoIEhvc3BpdGFsIGFuZCBSb3lhbCBBZGVsYWlkZSBIb3NwaXRhbC77AjEpCUFnZWQgYmV0d2VlbiA0MCBhbmQgODAgeWVhcnMgb2xkICA8YnIgLz4yKQlNZW4gYW5kIHdvbWVuIHdpdGggc2lnbmlmaWNhbnQgaGFuZCBwYWluIHdpdGhpbiB0aGUgbGFzdCA0OCBob3VycyAoZGVmaW5lZCBhcyBhIFZBUyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gNDAgbW0pIHdpdGggYSBoaXN0b3J5IG9mIEhhbmQgcGFpbiBmb3IgbWluaW11bSBvZiA2IG1vbnRocy4gPGJyIC8%2BMykJUmFkaW9sb2dpY2FsIE9BIChLZWxsZ3JlbiBhbmQgTGF3cmVuY2UgKEtMKSBncmFkZSA%2BIDEpIGluID4gMSBqb2ludDxiciAvPjQpCU1lZXQgQW1lcmljYW4gQ29sbGVnZSBvZiBSaGV1bWF0b2xvZ3kgKEFDUikgY2xpbmljYWwgY3JpdGVyaWEgZm9yIGhhbmQgT0E8YnIgLz4INDAgWWVhcnMIODAgWWVhcnMWQm90aCBtYWxlcyBhbmQgZmVtYWxlc6cEMS4JQ29uY29taXRhbnQgaW5mbGFtbWF0b3J5IHJoZXVtYXRpYyBkaXNlYXNlPGJyIC8%2BMi4JQ29udHJhaW5kaWNhdGlvbiB0byBjb2xjaGljaW5lLiBUaGlzIGluY2x1ZGVzIHJlbmFsIGR5c2Z1bmN0aW9uIChlR0ZSIDw1MCwgYWJub3JtYWwgTEZULCBoYWVtYXRvbG9naWMgY29uZGl0aW9uIDxiciAvPjMuCUNocm9uaWMgZ2x1Y29jb3J0aWNvaWQsIERNQVJEIG9yIGltbXVub3N1cHByZXNzYW50IHRoZXJhcHkgZm9yIGFydGhyaXRpcyBvciBvdGhlciBpbmRpY2F0aW9uczxiciAvPjQuCVdvbWVuIHdobyBhcmUgcHJlZ25hbnQgb3IgYnJlYXN0IGZlZWRpbmc8YnIgLz41LglVc2Ugb2YgYW55IGludmVzdGlnYXRpb25hbCBkcnVnKHMpIGFuZC9vciBkZXZpY2VzIHdpdGhpbiAzMCBkYXlzIHByaW9yIHRvIHJhbmRvbWlzYXRpb248YnIgLz42LglQcmVzZW5jZSBvZiBhbnkgc2VyaW91cyBtZWRpY2FsIGlsbG5lc3MgdGhhdCBtYXkgcHJlY2x1ZGUgMjQgd2VlayBmb2xsb3cgdXAuPGJyIC8%2BNy4JSW5hYmlsaXR5IHRvIHByb3ZpZGUgaW5mb3JtZWQgY29uc2VudC48YnIgLz4OZXhwYW5kYWJsZS1ib3gKSW5kaXZpZHVhbBFEciBDYXRoZXJpbmUgSGlsbGVSaGV1bWF0b2xvZ3kgQ2xpbmljYWwgVHJpYWxzPGJyIC8%2BVFFFSCwgTGV2ZWwgNUM8YnIgLz4yOCBXb29kdmlsbGUgUm9hZDxiciAvPldvb2R2aWxsZSBTb3V0aCwgU0EgNTAxMQlBdXN0cmFsaWECRHIPQ2FybGVlIFJ1ZWRpZ2VyTVRRRUgsIExldmVsIDVDPGJyIC8%2BMjggV29vZHZpbGxlIHJkPGJyIC8%2BV29vZHZpbGxlLCA1MDExPGJyIC8%2BU291dGggQXVzdHJhbGlhCUF1c3RyYWxpYQ8rNjEgOCA4MjIyIDczNjkZY2FybGVlLnJ1ZWRpZ2VyQHNhLmdvdi5hdQZoaWRkZW5kAg8PFCsABA8WBB8FZR8DZ2RkZDwrAAQBABYCHwJlZAIRDxYCHwFoZAITD2QWBgIDDw8WAh8NZWRkAgUPDxYCHw0FJi9UcmlhbFBkZi9UcmlhbFJldmlldy0zNzI5NjQucGRmP3Q9MTQxZGQCLw88KwAEAQAPFgIfA2dkZAIlD2QWFmYPFQIQcmVzdWx0cy1oZWFkZXItMRFUcmlhbCBmcm9tIEFOWkNUUmQCAQ8PFgIfDQU9fi9UcmlhbC9SZWdpc3RyYXRpb24vVHJpYWxSZXZpZXcuYXNweD9pZD0zNzM1NzcmaXNSZXZpZXc9dHJ1ZWRkAgMPDxYCHw0FJi9UcmlhbFBkZi9UcmlhbFJldmlldy0zNzM1NzcucGRmP3Q9MTQxZGQCBw8PFgIfAgUGMzczNTc3ZGQCCQ8PFgIfAgUOMTI2MTcwMDE1MjMzOTJkZAILDw8WAh8CZWRkAg0PDxYCHwIFBUZhbHNlZGQCDg8VLRByZXN1bHRzLWhlYWRlci0ylAFFdmFsdWF0aW9uIG9mIHRoZSBFeHBsb3JpbmcgVG9nZXRoZXIgcHJvZ3JhbTogYSBjbHVzdGVyLXJhbmRvbWlzZWQgdHJpYWwgZm9yIHByaW1hcnkgc2Nob29sIGFnZWQgY2hpbGRyZW4gd2l0aCBiZWhhdmlvdXJhbCBhbmQgZW1vdGlvbmFsIHByb2JsZW1zLg0KDVN0b3BwZWQgZWFybHkHaW5mby1saQhBcHByb3ZlZAdpbmZvLWxpGlJldHJvc3BlY3RpdmVseSByZWdpc3RlcmVkMUhhcyB0aGUgdHJpYWwgYmVlbiB1cGRhdGVkIGluIHRoZSBsYXN0IDEyIG1vbnRocz8KVXAgdG8gZGF0ZQkxLzExLzIwMTcScmVzdWx0cy1oZWFkZXItMTAwCEFwcHJvdmVkClVwIHRvIGRhdGUTQUNUUk4xMjYxNzAwMTUyMzM5MhAwMSBOb3ZlbWJlciAyMDE3BHNob3dAY2hpbGQgZXh0ZXJuYWxpc2luZyBiZWhhdmlvdXJzLCBjaGlsZCBpbnRlcm5hbGlzaW5nIGJlaGF2aW91cnMNCgRzaG93CUF1c3RyYWxpYQRzaG93CFZpY3RvcmlhBHNob3cEc2hvdw1TdG9wcGVkIGVhcmx5A24vYQRzaG93CEFwcHJvdmVk%2BRRBIGNsdXN0ZXItcmFuZG9taXNlZCB0cmlhbCB3YXMgY29uZHVjdGVkIGNvbXBhcmluZyB0d28gdmVyc2lvbnMgb2YgZGVsaXZlcnkgb2YgdGhlIGVhcmx5IHByaW1hcnkgc2Nob29sIHZlcnNpb24gb2YgdGhlIEV4cGxvcmluZyBUb2dldGhlciBwcm9ncmFtOyBvbmUgZm9ybSBoYWQgc2VwYXJhdGUgY2hpbGQgYW5kIHBhcmVudCBncm91cCBzZXNzaW9ucyAoRXhwbG9yaW5nIFRvZ2V0aGVyLUFkYXB0ZWQ7IEVULUFkYXB0ZWQpIGFuZCB0aGUgb3RoZXIgZm9ybSBpbmNsdWRlZCBzb21lIHBhcmVudC1jaGlsZCBncm91cCB0aW1lIGluIHRoZSBpbnRlcnZlbnRpb24gKEV4cGxvcmluZyBUb2dldGhlcjsgRVQpLiAgPGJyIC8%2BPGJyIC8%2BVGhlIHNhbXBsZSBhbmFseXNlZCBjb25zaXN0ZWQgb2YgMTM2IHBhcmVudHMgYW5kIHRoZWlyIGNoaWxkcmVuIChhZ2VkIDUtMTAgeWVhcnMpIHdpdGggZXh0ZXJuYWxpc2luZyBhbmQvb3IgaW50ZXJuYWxpc2luZyBwcm9ibGVtcywgcmVjcnVpdGVkIGZyb20gZ292ZXJubWVudCAobiA9IDIwKSBhbmQgY2F0aG9saWMgKG4gPSA0KSBwcmltYXJ5IHNjaG9vbHMgZnJvbSB3aXRoaW4gdGhlIHNvdXRoIGVhc3QgbWV0cm9wb2xpdGFuIHN1YnVyYnMgb2YgTWVsYm91cm5lIGFuZCBNb3JuaW5ndG9uIFBlbmluc3VhbCByZWdpb24sIFZpY3RvcmlhLiAgIDxiciAvPjxiciAvPkNoaWxkIG91dGNvbWUgbWVhc3VyZXMgaW5jbHVkZWQgcGFyZW50LSBhbmQgdGVhY2hlci1yZXBvcnRlZCBjaGlsZCBleHRlcm5hbGlzaW5nIGFuZCBpbnRlcm5hbGlzaW5nIHByb2JsZW1zLiAgUGFyZW50IG91dGNvbWUgbWVhc3VyZXMgaW5jbHVkZWQgcGFyZW50IHNlbGYtcmVwb3J0IG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSBwYXJlbnRpbmcgYmVoYXZpb3VyLCBwYXJlbnRpbmcgc3RyZXNzLCBzYXRpc2ZhY3Rpb24gYW5kIGVmZmljYWN5LiAgQWxsIG91dGNvbWVzIHdlcmUgYXNzZXNzZWQgcG9zdCBpbnRlcnZlbnRpb24gYW5kIGF0IDYtIGFuZCAxMi1tb250aCBmb2xsb3cgdXBzLiA8YnIgLz48YnIgLz5JbiByZWdhcmQgdG8gY2hpbGQgb3V0Y29tZXMsIHNpZ25pZmljYW50IHJlZHVjdGlvbnMgaW4gcGFyZW50LSBhbmQgdGVhY2hlci1yZXBvcnRlZCBjaGlsZCBleHRlcm5hbGlzaW5nIGFuZCBpbnRlcm5hbGlzaW5nIHByb2JsZW1zIHdlcmUgZXZpZGVudCBhY3Jvc3MgYm90aCB0cmVhdG1lbnQgZ3JvdXBzIGF0IHBvc3QgaW50ZXJ2ZW50aW9uLiAgQXQgdGhlIDYtIGFuZCAxMi1tb250aCBmb2xsb3ctdXBzIHNpZ25pZmljYW50IHJlZHVjdGlvbnMgd2VyZSBtYWludGFpbmVkIG9uIHBhcmVudC1yZXBvcnRlZCBjaGlsZCBleHRlcm5hbGlzaW5nIGFuZCBpbnRlcm5hbGlzaW5nIHByb2JsZW1zIG9ubHkuICBDaGFuZ2Ugb24gYWxsIGNoaWxkIG91dGNvbWUgdmFyaWFibGVzIGRpZCBub3QgdmFyeSBzaWduaWZpY2FudGx5IGJldHdlZW4gdHJlYXRtZW50IGNvbmRpdGlvbnMgYXQgYW55IHRpbWUgcG9pbnQuPGJyIC8%2BPGJyIC8%2BSW4gcmVnYXJkIHRvIHBhcmVudCBvdXRjb21lcywgc2lnbmlmaWNhbnQgY2hhbmdlcyBhdmVyYWdlZCBhY3Jvc3MgYm90aCB0cmVhdG1lbnQgZ3JvdXBzIG92ZXIgdGltZSB3ZXJlIGZvdW5kIGZvciBwYXJlbnQtcmVwb3J0ZWQgbmVnYXRpdmUgcGFyZW50aW5nIHByYWN0aWNlcyBhdCBwb3N0IGludGVydmVudGlvbiAobWFpbnRhaW5lZCB1cCB0byAxMiBtb250aCBmb2xsb3ctdXApIGFuZCBwYXJlbnRpbmcgZWZmaWNhY3kgYXQgcG9zdCBpbnRlcnZlbnRpb24gKG1haW50YWluZWQgdXAgdG8gNi1tb250aCBmb2xsb3ctdXApLiAgUmVzdWx0cyBzaG93ZWQgbm9uLXNpZ25pZmljYW50IGNoYW5nZXMgYXZlcmFnZWQgYWNyb3NzIGJvdGggdHJlYXRtZW50IGdyb3VwcyBvdmVyIHRpbWUgZm9yIHBhcmVudGluZyBzdHJlc3MsIHBvc2l0aXZlIHBhcmVudGluZyBwcmFjdGljZXMgYW5kIHBhcmVudGluZyBzYXRpc2ZhY3Rpb24uICAgIFRoZXJlIHdhcyBldmlkZW5jZSBvZiBhIHNpZ25pZmljYW50IGdyb3VwIChpbnRlcnZlbnRpb24pIGJ5IHRpbWUgaW50ZXJhY3Rpb24gZm9yIHBhcmVudGluZyBlZmZpY2FjeSBhdCBwb3N0IGludGVydmVudGlvbiwgd2l0aCBncmVhdGVyIGltcHJvdmVtZW50IGZvciBwYXJ0aWNpcGFudHMgaW4gdGhlIEVUIHByb2dyYW0uICBUaGVyZSB3YXMgYWxzbyBldmlkZW5jZSBvZiBhIHNpZ25pZmljYW50IGdyb3VwIChpbnRlcnZlbnRpb24pIGJ5IHRpbWUgaW50ZXJhY3Rpb24gZm9yIHBhcmVudGluZyBzYXRpc2ZhY3Rpb24gYXQgMTItbW9udGggZm9sbG93LXVwLCB3aXRoIGdyZWF0ZXIgaW1wcm92ZW1lbnRzIGZvciBwYXJ0aWNpcGFudHMgaW4gdGhlIEVULUFkYXB0ZWQgcHJvZ3JhbS4gIDxiciAvPjxiciAvPk92ZXJhbGwsIHN0dWR5IHJlc3VsdHMgZGlkIG5vdCBkZW1vbnN0cmF0ZSB0aGF0IHRoZSBpbmNsdXNpb24gb2YgcGFyZW50LWNoaWxkIGludGVyYWN0aXZlIGdyb3VwcyAoRVQgcHJvZ3JhbSkgd2FzIGFzc29jaWF0ZWQgd2l0aCBjb25zaXN0ZW50bHkgZ3JlYXRlciBpbXByb3ZlbWVudHMgaW4gY2hpbGQgYmVoYXZpb3VyIG9yIHBhcmVudGluZyBvdXRjb21lcyByZWxhdGl2ZSB0byB0aGUgdmVyc2lvbiAoRVQtQWRhcHRlZCBwcm9ncmFtKSB0aGF0IG9taXR0ZWQgdGhlIGNvbWJpbmVkIGdyb3Vwcy4gIDxiciAvPjxiciAvPjxiciAvPjxiciAvPjxiciAvPjxiciAvPpcMUGFydGljaXBhbnRzIHdlcmUgY2hpbGRyZW4gaW4gUHJlcGFyYXRvcnkgeWVhciB0byBHcmFkZSBUaHJlZSB3aXRoIGV4dGVybmFsaXNpbmcgYW5kL29yIGludGVybmFsaXNpbmcgYmVoYXZpb3VyIHByb2JsZW1zIGFuZCB0aGVpciBwYXJlbnQvY2FyZXIsIHJlY3J1aXRlZCBmcm9tIGNvbnNlbnRpbmcgZ292ZXJubWVudCBhbmQgY2F0aG9saWMgcHJpbWFyeSBzY2hvb2xzIGluIHRoZSBzb3V0aCBlYXN0IG1ldHJvcG9saXRhbiBzdWJ1cmJzIG9mIE1lbGJvdXJuZSBhbmQgTW9ybmluZ3RvbiBQZW5pbnN1bGEgcmVnaW9uLCBWaWN0b3JpYS4gPGJyIC8%2BPGJyIC8%2BSWRlbnRpZmljYXRpb24gb2YgZXh0ZXJuYWxpc2luZyBhbmQvb3IgaW50ZXJuYWxpc2luZyBwcm9ibGVtcyBvY2N1cnJlZCB0aHJvdWdoIGEgcG9wdWxhdGlvbiB3aWRlIHNjcmVlbmluZyBvZiBjaGlsZHJlbiBpbiBQcmVwYXJhdG9yeSB5ZWFyIHRvIEdyYWRlIFRocmVlIGF0IGVhY2ggcGFydGljaXBhdGluZyBzY2hvb2wgdXNpbmcgUGFyZW50IGFuZCBUZWFjaGVyIHZlcnNpb25zIG9mIHRoZSBTdHJlbmd0aHMgJiBEaWZmaWN1bHRpZXMgUXVlc3Rpb25uYWlyZSAoU0RROyBHb29kbWFuLCAxOTk3KS4gIDxiciAvPjxiciAvPkNoaWxkcmVuIGluIFByZXBhcmF0b3J5IHllYXIgdG8gR3JhZGUgVGhyZWUgd2VyZSBlbGlnaWJsZSBmb3IgcG9zc2libGUgcGFydGljaXBhdGlvbiBpbiB0aGUgaW50ZXJ2ZW50aW9uIGdyb3VwIGJhc2VkIG9uIFBhcmVudCBhbmQvb3IgVGVhY2hlciBTRFEgVG90YWwgRGlmZmljdWx0aWVzIFNjb3JlIGluIHRoZSBib3JkZXJsaW5lIOKAkyBhYm5vcm1hbCByYW5nZSAoZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDE0IG9yIDEyIHJlc3BlY3RpdmVseSkuIENoaWxkcmVuIHdlcmUgYWxzbyBlbGlnaWJsZSBmb3IgdGhlIGludGVydmVudGlvbiBncm91cCBpZiB0aGV5IHNjb3JlZCBpbiB0aGUgYm9yZGVybGluZSDigJMgYWJub3JtYWwgcmFuZ2Ugb24gYW4gRXh0ZXJuYWxpc2luZyBzY29yZSAoY29tYmluZWQgQ29uZHVjdCBQcm9ibGVtcyBTY29yZSwgSHlwZXJhY3Rpdml0eSBTY29yZSwgJiBQZWVyIFByb2JsZW1zIFNjb3JlKSBvZiB0aGUgUGFyZW50IGFuZC9vciBUZWFjaGVyIFNEUSAoZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDEyIG9yIDEzIHJlc3BlY3RpdmVseSksIG9yIGlmIHRoZXkgc2NvcmVkIGluIHRoZSBib3JkZXJsaW5lIOKAkyBhYm5vcm1hbCByYW5nZSBvbiBhbiBJbnRlcm5hbGlzaW5nIHNjb3JlIChFbW90aW9uYWwgU3ltcHRvbXMgU2NvcmUpIG9mIHRoZSBQYXJlbnQgYW5kL29yIFRlYWNoZXIgU0RRIChncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gNCBvciA1IHJlc3BlY3RpdmVseSkuIDxiciAvPjxiciAvPkdvb2RtYW4sIFIuICgxOTk3KS4gVGhlIFN0cmVuZ3RocyBhbmQgRGlmZmljdWx0aWVzIFF1ZXN0aW9ubmFpcmU6IEEgcmVzZWFyY2ggbm90ZS4gSm91cm5hbCA8YnIgLz5vZiBDaGlsZCBQc3ljaG9sb2d5IGFuZCBQc3ljaGlhdHJ5IGFuZCBBbGxpZWQgRGlzY2lwbGluZXMsIDM4KDUpLCA1ODEtNTg2LjxiciAvPiA8YnIgLz48YnIgLz4HNCBZZWFycwkgTm8gbGltaXQWQm90aCBtYWxlcyBhbmQgZmVtYWxlc8UGUGFyZW50LWNoaWxkIGR5YWRzIGV4Y2x1ZGVkIG9uIHRoZSBiYXNpcyBvZjogcGFyZW50IGZhY3RvcnMgKGkuZS4gdW5hYmxlIHRvIGF0dGVuZCBhbnkgb3Igc2lnbmlmaWNhbnQgcGFydCBvZiBpbnRlcnZlbnRpb24gcHJvZ3JhbTsgcmVjZW50IG9yIGN1cnJlbnQgc2lnbmlmaWNhbnQgdHJhbnNpdGlvbiBvciBhZGp1c3RtZW50OyBzaWduaWZpY2FudCBtZW50YWwgaGVhbHRoIHByb2JsZW1zOyBpbnRlbGxlY3R1YWwgZGlzYWJpbGl0eTsgYW5kIGluc3VmZmljaWVudCBFbmdsaXNoIGZvciBncm91cCBwYXJ0aWNpcGF0aW9uKSwgYW5kL29yIGZhbWlseSBmYWN0b3JzIChpLmUuIGN1cnJlbnRseSBlbmdhZ2VkIGluIGFub3RoZXIgZ3JvdXAgcGFyZW50aW5nIHByb2dyYW07IGFjdGl2ZSBjaGlsZCBwcm90ZWN0aW9uIGNhc2UgbWFuYWdlbWVudCkuICBDaGlsZHJlbiBleGNsdWRlZCBpZiB0aGV5IGhhZCBhIHByZS1leGlzdGluZyBkaWFnbm9zaXMgb2YgQXV0aXNtIFNwZWN0cnVtIERpc29yZGVyLCBpbnRlbGxlY3R1YWwgZGlzYWJpbGl0eSwgb3IgYmVoYXZpb3VyIGRpc29yZGVyIG9mIHN1Y2ggc2V2ZXJpdHkgdGhhdCBpdCByZXF1aXJlZCBnb3Zlcm5tZW50LWZ1bmRlZCBzcGVjaWFsaXN0IGVkdWNhdGlvbiBzdXBwb3J0IChEZXBhcnRtZW50IG9mIEVkdWNhdGlvbiBhbmQgRWFybHkgQ2hpbGRob29kIERldmVsb3BtZW50LCAxOTk4KS4gIENoaWxkcmVuIHdlcmUgYWxzbyBleGNsdWRlZCBmb3IgcGFydGljaXBhdGlvbiBpbiB0aGUgaW50ZXJ2ZW50aW9uIGdyb3VwIGlmIHRoZXkgcmVxdWlyZWQgcHJvbXB0IHJlZmVycmFsIGZvciBhc3Nlc3NtZW50IG9yIHRyZWF0bWVudC4gDmV4cGFuZGFibGUtYm94ClVuaXZlcnNpdHlDQ2VudHJlIGZvciBEZXZlbG9wbWVudGFsIFBzeWNoaWF0cnkgJiBQc3ljaG9sb2d5LCBNb25hc2ggVW5pdmVyc2l0eTwxLzI3MCBGZXJudHJlZSBHdWxseSBSb2FkLCBOb3R0aW5nIEhpbGwsIFZJQyAzMTY4LCBBdXN0cmFsaWEJQXVzdHJhbGlhBkEvUHJvZgtLeWxpZSBHcmF5IJwBQ2VudHJlIGZvciBEZXZlbG9wbWVudGFsIFBzeWNoaWF0cnkgJiBQc3ljaG9sb2d5LCBFYXJseSBpbiBMaWZlIE1lbnRhbCBIZWFsdGggU2VydmljZSwgTW9uYXNoIE1lZGljYWwgQ2VudHJlLCAyNDYgQ2xheXRvbiBSb2FkLCBDbGF5dG9uLCAzMTQ2LiAgPGJyIC8%2BPGJyIC8%2BCUF1c3RyYWxpYQ8rNjEgMyA5NTk0IDEzMDAVa3lsaWUuZ3JheUBtb25hc2guZWR1BmhpZGRlbmQCDw8UKwAEDxYEHwVlHwNnZGRkPCsABAEAFgIfAmVkAhEPFgIfAWhkAhMPZBYGAgMPDxYCHw1lZGQCBQ8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3MzU3Ny5wZGY%2FdD0xNDFkZAIvDzwrAAQBAA8WAh8DZ2RkAicPZBYWZg8VAhByZXN1bHRzLWhlYWRlci0xEVRyaWFsIGZyb20gQU5aQ1RSZAIBDw8WAh8NBT1%2BL1RyaWFsL1JlZ2lzdHJhdGlvbi9UcmlhbFJldmlldy5hc3B4P2lkPTM3Mzg4NyZpc1Jldmlldz10cnVlZGQCAw8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3Mzg4Ny5wZGY%2FdD0xNDFkZAIHDw8WAh8CBQYzNzM4ODdkZAIJDw8WAh8CBQ4xMjYxNzAwMTUyMjMwM2RkAgsPDxYCHwJlZGQCDQ8PFgIfAgUFRmFsc2VkZAIODxUtEHJlc3VsdHMtaGVhZGVyLTKdAUFuIE4tb2YtMSBjbGluaWNhbCB0cmlhbCB0byBhc3Nlc3MgdGhlIGVmZmVjdGl2ZW5lc3Mgb2YgTWFudWFsIEx5bXBoYXRpYyBEcmFpbmFnZSB3aXRoIGFuZCB3aXRob3V0IGNvbGQgbGFzZXIgdGhlcmFweSBmb3IgcGFpbiByZWxpZWYgaW4gd29tZW4gd2l0aCBsaXBlZGVtYS4STm90IHlldCByZWNydWl0aW5nB2luZm8tbGkIQXBwcm92ZWQHaW5mby1saRhQcm9zcGVjdGl2ZWx5IHJlZ2lzdGVyZWQxSGFzIHRoZSB0cmlhbCBiZWVuIHVwZGF0ZWQgaW4gdGhlIGxhc3QgMTIgbW9udGhzPwpVcCB0byBkYXRlCTEvMTEvMjAxNxJyZXN1bHRzLWhlYWRlci0xMDAIQXBwcm92ZWQKVXAgdG8gZGF0ZRNBQ1RSTjEyNjE3MDAxNTIyMzAzEDAxIE5vdmVtYmVyIDIwMTcEc2hvdwhMaXBlZGVtYQRzaG93CUF1c3RyYWxpYQRzaG93EVdlc3Rlcm4gQXVzdHJhbGlhBHNob3cEc2hvdxJOb3QgeWV0IHJlY3J1aXRpbmcQMDEgTm92ZW1iZXIgMjAxNwRzaG93CEFwcHJvdmVkwgVUaGUgcHJvamVjdCBhaW1zIHRvIGFzc2VzcyB3aGV0aGVyIG1hbnVhbCBseW1waGF0aWMgZHJhaW5hZ2UgKE1MRCkgd2l0aCBub24tdGhlcm1hbCBsYXNlciBpcyBtb3JlIGVmZmVjdGl2ZSB0aGFuIE1MRCBhbG9uZSBmb3IgcmVkdWNpbmcgcGFpbiBhbmQgc3dlbGxpbmcgaW4gYSA0My15ZWFyIG9sZCBmZW1hbGUgcGF0aWVudCB3aXRoIGJpbGF0ZXJhbCBsaXBlZGVtYS1saWtlIHN5bXB0b21zIG9mIHRoZSBsZWdzLjxiciAvPjxiciAvPlRoZSB0cmlhbCBpcyBkZXNpZ25lZCBhcyBhIHNpbmdsZS1ibGluZCwgcmFuZG9taXNlZCwgY29udHJvbGxlZCBuLW9mLTEgdHJpYWwuIFRoZSB0cmlhbCBwYXJ0aWNpcGFudCB3aWxsIGF0dGVuZCB3ZWVrbHkgY2xpbmljIHNlc3Npb25zIGZvciBlaWdodCB3ZWVrcy4gV2Vla3MgMSBhbmQgOCB3aWxsIGJlIGFzc2Vzc21lbnQgc2Vzc2lvbnMuIFdlZWtzIDItNyBhcmUgdHJlYXRtZW50IGNsaW5pY3Mgd2hlcmUgdGhlIHBhcnRpY2lwYW50IHdpbGwgcmVjZWl2ZSBlaXRoZXIgbWFudWFsIGx5bXBoYXRpYyBkcmFpbmFnZSBtYXNzYWdlIChNTEQpIHBsdXMgYWN0aXZlIGxhc2VyIHRoZXJhcHkgb3IgTUxEIHBsdXMgcGxhY2VibyBsYXNlciB0aGVyYXB5IGluIGEgcmFuZG9taXNlZCBzZXF1ZW5jZS4gVGhlIHBsYWNlYm8gdGhlcmFweSBjb25zaXN0cyBvZiB0aGUgbGFzZXIgZGV2aWNlIHdpdGhvdXQgcG93ZXIu4wFGZW1hbGU7IGFnZWQgYmV0d2VlbiAxOCBhbmQgODUgeWVhcnM7IHBhcnRpY2lwYW50cyBvZiBjaGlsZGJlYXJpbmcgYWdlIHdobyBhZ3JlZSB0byBjb250aW51ZSB1c2luZyBiaXJ0aCBjb250cm9sIG1lYXN1cmVzIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIHN0dWR5OyBwYWluIGFzc29jaWF0ZWQgd2l0aCBzd2VsbGluZyBpbiBhdCBsZWFzdCBvbmUgbGltYjsgZGlhZ25vc2lzIG9mIGxpcGVkZW1hLggxOCBZZWFycwg4NSBZZWFycwdGZW1hbGVzlQJDYW5jZXI7IGNhcmRpYWMgZGlzZWFzZTsga2lkbmV5IGRpc2Vhc2U7IGVwaWxlcHN5OyBwYXJ0aWNpcGFudHMgd2hvIGFyZSBsYWN0YXRpbmcsIHByZWduYW50IG9yIHBsYW5uaW5nIHRvIGJlY29tZSBwcmVnbmFudDsgcGFydGljaXBhbnRzIHVud2lsbGluZyB0byBjb21wbHkgd2l0aCB0aGUgc3R1ZHkgcHJvdG9jb2w7IGFueSBvdGhlciBjb25kaXRpb24sIHdoaWNoIGluIHRoZSBvcGluaW9uIG9mIHRoZSBpbnZlc3RpZ2F0b3JzIGNvdWxkIGNvbXByb21pc2UgdGhlIHN0dWR5PGJyIC8%2BDmV4cGFuZGFibGUtYm94CkluZGl2aWR1YWwgQXNzb2NpYXRlIFByb2Zlc3NvciBTYW5kcmEgR3JhY2VtU2Nob29sIG9mIEhlYWx0aCBhbmQgSHVtYW4gU2NpZW5jZXMsPGJyIC8%2BU291dGhlcm4gQ3Jvc3MgVW5pdmVyc2l0eTxiciAvPk1pbGl0YXJ5IFJkLCA8YnIgLz5MaXNtb3JlIE5TVyAyNDgwIAlBdXN0cmFsaWEGQS9Qcm9mDFNhbmRyYSBHcmFjZYIBRGlyZWN0b3Igb2YgUmVzZWFyY2ggPGJyIC8%2BU2Nob29sIG9mIEhlYWx0aCAmIEh1bWFuIFNjaWVuY2VzPGJyIC8%2BU291dGhlcm4gQ3Jvc3MgVW5pdmVyc2l0eTxiciAvPlBPIEJveCAxNTcsPGJyIC8%2BTGlzbW9yZSBOU1cgMjQ4MAlBdXN0cmFsaWEPKzYxIDIgNjYyMCAzNjQ2F3NhbmRyYS5ncmFjZUBzY3UuZWR1LmF1BmhpZGRlbmQCDw8UKwAEDxYEHwVlHwNnZGRkPCsABAEAFgIfAmVkAhEPFgIfAWhkAhMPZBYGAgMPDxYCHw1lZGQCBQ8PFgIfDQUmL1RyaWFsUGRmL1RyaWFsUmV2aWV3LTM3Mzg4Ny5wZGY%2FdD0xNDFkZAIvDzwrAAQBAA8WAh8DZ2RkAikPFCsAAmRkZAIXDxYCHwFoZBgFBR5fX0NvbnRyb2xzUmVxdWlyZVBvc3RCYWNrS2V5X18WKgUjY3RsMDAkYm9keSRyZWdpc3RyYXRpb25Gcm9tRGF0ZSREREQFKWN0bDAwJGJvZHkkcmVnaXN0cmF0aW9uRnJvbURhdGUkREREJEMkRk5QBS9jdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmwwJGNoa19kb3dubG9hZAUyY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRjdHJsMCRjaGtfZHVwRG93bmxvYWQFL2N0bDAwJGJvZHkkTHN0dndTZWFyY2hSZXN1bHQkY3RybDIkY2hrX2Rvd25sb2FkBTJjdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmwyJGNoa19kdXBEb3dubG9hZAUvY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRjdHJsNCRjaGtfZG93bmxvYWQFMmN0bDAwJGJvZHkkTHN0dndTZWFyY2hSZXN1bHQkY3RybDQkY2hrX2R1cERvd25sb2FkBS9jdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmw2JGNoa19kb3dubG9hZAUyY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRjdHJsNiRjaGtfZHVwRG93bmxvYWQFL2N0bDAwJGJvZHkkTHN0dndTZWFyY2hSZXN1bHQkY3RybDgkY2hrX2Rvd25sb2FkBTJjdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmw4JGNoa19kdXBEb3dubG9hZAUwY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRjdHJsMTAkY2hrX2Rvd25sb2FkBTNjdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmwxMCRjaGtfZHVwRG93bmxvYWQFMGN0bDAwJGJvZHkkTHN0dndTZWFyY2hSZXN1bHQkY3RybDEyJGNoa19kb3dubG9hZAUzY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRjdHJsMTIkY2hrX2R1cERvd25sb2FkBTBjdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmwxNCRjaGtfZG93bmxvYWQFM2N0bDAwJGJvZHkkTHN0dndTZWFyY2hSZXN1bHQkY3RybDE0JGNoa19kdXBEb3dubG9hZAUwY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRjdHJsMTYkY2hrX2Rvd25sb2FkBTNjdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmwxNiRjaGtfZHVwRG93bmxvYWQFMGN0bDAwJGJvZHkkTHN0dndTZWFyY2hSZXN1bHQkY3RybDE4JGNoa19kb3dubG9hZAUzY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRjdHJsMTgkY2hrX2R1cERvd25sb2FkBTBjdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmwyMCRjaGtfZG93bmxvYWQFM2N0bDAwJGJvZHkkTHN0dndTZWFyY2hSZXN1bHQkY3RybDIwJGNoa19kdXBEb3dubG9hZAUwY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRjdHJsMjIkY2hrX2Rvd25sb2FkBTNjdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmwyMiRjaGtfZHVwRG93bmxvYWQFMGN0bDAwJGJvZHkkTHN0dndTZWFyY2hSZXN1bHQkY3RybDI0JGNoa19kb3dubG9hZAUzY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRjdHJsMjQkY2hrX2R1cERvd25sb2FkBTBjdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmwyNiRjaGtfZG93bmxvYWQFM2N0bDAwJGJvZHkkTHN0dndTZWFyY2hSZXN1bHQkY3RybDI2JGNoa19kdXBEb3dubG9hZAUwY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRjdHJsMjgkY2hrX2Rvd25sb2FkBTNjdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmwyOCRjaGtfZHVwRG93bmxvYWQFMGN0bDAwJGJvZHkkTHN0dndTZWFyY2hSZXN1bHQkY3RybDMwJGNoa19kb3dubG9hZAUzY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRjdHJsMzAkY2hrX2R1cERvd25sb2FkBTBjdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmwzMiRjaGtfZG93bmxvYWQFM2N0bDAwJGJvZHkkTHN0dndTZWFyY2hSZXN1bHQkY3RybDMyJGNoa19kdXBEb3dubG9hZAUwY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRjdHJsMzQkY2hrX2Rvd25sb2FkBTNjdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmwzNCRjaGtfZHVwRG93bmxvYWQFMGN0bDAwJGJvZHkkTHN0dndTZWFyY2hSZXN1bHQkY3RybDM2JGNoa19kb3dubG9hZAUzY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRjdHJsMzYkY2hrX2R1cERvd25sb2FkBTBjdGwwMCRib2R5JExzdHZ3U2VhcmNoUmVzdWx0JGN0cmwzOCRjaGtfZG93bmxvYWQFM2N0bDAwJGJvZHkkTHN0dndTZWFyY2hSZXN1bHQkY3RybDM4JGNoa19kdXBEb3dubG9hZAUiY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdCRwYWdlcg8UKwAEZGQCFAIUZAUcY3RsMDAkYm9keSRMc3R2d1NlYXJjaFJlc3VsdA88KwAKAgc8KwAUAAgCFGQFEmN0bDAwJGJvZHkkbHZEdW1teQ88KwAKAgc8KwAUAAgCzmtkBRdjdGwwMCRib2R5JGxzdFZpZXdQYWdlcg8UKwAEZGQCFALOa2Tr%2BdsSb8hy%2BpHtBi30Pl31tIeSPg%3D%3D&__VIEWSTATEGENERATOR=9247CB99&__SCROLLPOSITIONX=0&__SCROLLPOSITIONY=0&__EVENTVALIDATION=%2FwEWlAECsbjEpg0CjZP7qQcCirKr1wcC57unSQLc7siGCwLjr%2BnnCAL%2Bhv2iDQLeobTOAwL05ZRGAuD4jNgKAtmH3vkCAqjHjLwEAp7bqaEHArXeutYKAsu0pLQKAqqw9ucNAtf%2FuIwHAvXxiaAFAt%2BP1LMOAt%2BP1LMOArTK3YIKAs67%2Ft0PAtiLw4sKAtOUiYEJAuSNjtwEAsfag6MFArS8xKQLArON85gIAtig8ZAEAo%2FK3c4BAsSPl84KArm%2Bi20CoPDwrAUC9PqaiwsC1PrG2AMCp8ONugsCztj4hQ4CiKu6tAcCrZjwxgkCncWE%2BgkCrNa11wkCx5DiEgL%2F6qisCALlm%2FX0CgLVv5OZDgL27cWwAwLToKLiCQKfwO%2B6AQL29oCVCgKvv7qBBQLS8PTqDwKMn4q1BgLK%2B7KUDwL13fSTDQKIkrr4BwKtiNeqBAKP15ejBwLW8%2FyCDwK1za2QAwKN4NrxBgKfgrw8At%2FwjP8DAsDQ7PsFAr2fopAPAr7v0oYDAqryypgJAsSu964MAvni1fwKAsi%2Fk44MAsbQxWMCw9D5YwLhkZ60BwLY0LlgAqHMvcQPAqq09KMNAoLX%2Bb8MAqDCxNoCAra4%2BGsC1djlvQsCjLK2wAkC7oWIlQ8C9ujTwwYCtOCCoAYCv5jLxwQCl%2FvG2wUCte77vgsCo5THjwkCwPTa2QICmZ6JJALBmPXTCQLjxOynDwLKyMazDALw4LW5CwLusfaZBgLD2NWmDALYo4yvDAKk7rPMCQKmhsWJAgKZ9ZHZBwLk1Lf7CwLa1u7MDgLczYP2CgLcse3iCAKoz8CFDwKAwO3MDQLa5MebDwKDpIOBBALFgtWuDgKlorimAQLc27PHDgKiosDoAwK%2B2pvPAgKjoqg5ApjawyECoKKwgwMC6tbrqQQCqaLYtwkCsNyT9goC9MqorQYC4ZqMEQLq2rLqAgKXt6roBQLgoMqlDQL168%2BfDALWsNTiCQKriO72AQLcsPm4DAKZqov0DgL3yrTQAQLumYCbBQLt2r6NDgKktp7yCgLjoNbICAKC68OpAQLZsOCFBQK4h%2BKABwLfsIXcBwKmqf%2F9AwLbyrDnBQLhksSGAQLR2rqkAgKXr%2BLdBgLHoNLfDAL144eVDQK9sNycCQKrgKbsAgLDsIHzCwKZosPpD4x20JF%2FsB%2FUlbbdXWOLmyoDxPIz&ctl00%24body%24searchTermTxtBx=&ctl00%24body%24registryRdBtnLst=ALL&ctl00%24body%24interventionDescriptionTxtBx=&ctl00%24body%24interventionCodeOperatorDrpDwnLst=OR&ctl00%24body%24interventionCodeChckListBx=&ctl00%24body%24studyTypeDrpDwnLst=&ctl00%24body%24allocationToInterventionRdBtnLst=All&ctl00%24body%24recruitmentStatusChckListBx=&ctl00%24body%24healthConditionTxtBx=&ctl00%24body%24conditionCategoryDrpDwnLst=&ctl00%24body%24genderRdBtnLst=All&ctl00%24body%24ageGroupRdBtnLst=All&ctl00%24body%24healthyVolunteersRdBtnLst=All&ctl00_body_registrationFromDate_Raw=N&ctl00%24body%24registrationFromDate=&ctl00_body_registrationFromDate_DDDWS=0%3A0%3A-1%3A-10000%3A-10000%3A0%3A-10000%3A-10000%3A1&ctl00_body_registrationFromDate_DDD_C_FNPWS=0%3A0%3A-1%3A-10000%3A-10000%3A0%3A0px%3A-10000%3A1&ctl00%24body%24registrationFromDate%24DDD%24C=11%2F08%2F2017&ctl00_body_registrationToDate_Raw=N&ctl00%24body%24registrationToDate=&ctl00_body_trialStartFromDate_Raw=N&ctl00%24body%24trialStartFromDate=&ctl00_body_trialStartToDate_Raw=N&ctl00%24body%24trialStartToDate=&ctl00%24body%24recruitmentCountryOperatorDrpDwnLst=OR&ctl00_body_recruitmentCountriesChckListBxDeletedItems=&ctl00_body_recruitmentCountriesChckListBxInsertedItems=&ctl00_body_recruitmentCountriesChckListBxCustomCallback=&ctl00%24body%24recruitmentCountriesChckListBx=9%7CAustralia11%7CNew+Zealand&ctl00%24body%24txtBxPostcode=&ctl00%24body%24drpDwnLstDistance=&ctl00%24body%24primarySponsorTypeDrpDwnLst=&ctl00%24body%24fundingSourceDrpDwnLst=&ctl00%24body%24phaseDrpDwnLst=&ctl00%24body%24pnlSearch_CollapsiblePanelExtender_ClientState=true&ctl00%24body%24drpDwnLstDownload=Download+ALL+trials&ctl00%24body%24btnDownload=DOWNLOAD&DXScript=1_32%2C1_61%2C2_22%2C2_24%2C2_29%2C2_21%2C1_36%2C1_54%2C1_51%2C2_16'
